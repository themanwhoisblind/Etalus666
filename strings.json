["RivalsofAether","default","Rivals of Aether","@@SleepMargin","10","@@DrawColour","4294967295","","cttVideoPlayer","videoPlayer.dll","fnvideoPlayerDraw","fnvideoPlayerOpen","fnvideoPlayerSetPaused","fnvideoPlayerStop","fnvideoPlayerConfig","fnvideoPlayerGetPlaybackPos","fnvideoPlayerSeek","fnvideoPlayerGetLength","fnvideoPlayerSetPos","GMHyper","GMHyper.gml","gmhyper_init","Rivals_Scripting","Rivals_Scripting.gml","MP_Steam_Custom","MP.gml","catch_error","catch_error.dll","catch_error_set_normal","catch_error_get_normal","catch_error_set_fatal","catch_error_get_fatal","catch_error_set_prompt_raw","catch_error_get_prompt_kind","catch_error_get_prompt_flags","catch_error_get_prompt_text","catch_error_get_prompt_title","catch_error_set_dump_path_raw","catch_error_get_dump_path","catch_error_dequeue","catch_error_clear","catch_error_size","catch_error_set_exec_raw","catch_error_get_exec_path","catch_error_get_exec_params","catch_error_fatal_force_raw","catch_error_get_newer","catch_error_set_newer_raw","catch_error_init_raw","catch_error_is_ready","catch_error_is_loaded","catch_error.gml","gml_buffer_tools","gml_buffer_tools.gml","buffer_tools_init","Steamworks_gml","Steamworks.gml.dll","steam_net_init_cpp_pre","RegisterCallbacks","steam_net_set_auto_accept_p2p_sessions","steam_net_accept_p2p_session_raw","steam_net_close_p2p_session_raw","steam_net_packet_set_type","steam_net_packet_send_raw","steam_net_packet_receive","steam_net_packet_get_size","steam_net_packet_get_data_raw","steam_net_packet_get_sender_id_high","steam_net_packet_get_sender_id_low","steam_lobby_leave","steam_lobby_is_owner","steam_lobby_get_owner_id_high","steam_lobby_get_owner_id_low","steam_lobby_get_member_count","steam_lobby_get_member_id_high","steam_lobby_get_member_id_low","steam_lobby_activate_invite_overlay","steam_lobby_list_request","steam_lobby_list_is_loading","steam_lobby_list_add_string_filter","steam_lobby_list_add_numerical_filter","steam_lobby_list_add_near_filter","steam_lobby_list_add_distance_filter","steam_lobby_list_get_count","steam_lobby_list_get_data","steam_lobby_list_get_lobby_id_high","steam_lobby_list_get_lobby_id_low","steam_lobby_list_join","steam_lobby_join_id_raw","steam_lobby_create","steam_lobby_set_data","steam_lobby_set_type","steam_get_user_steam_id_high","steam_get_user_steam_id_low","steam_user_set_played_with","steam_activate_overlay_raw","int64_from_string_high","int64_from_string_low","int64_combine_string","steam_net_update","steam_restart_if_necessary","steam_net_api_flags","steam_net_init_cpp","steam_net_is_ready","steam_net_get_version","steam_net_is_available","Steamworks.gml.gml","steam_net_init_gml","bigpunch_sfx","blow1_sfx","blow2_sfx","bubbly_sfx","cantselect_sfx","coins_sfx","confirm_sfx","fireball_sfx","fireballhit_sfx","flame_sfx","hit1_sfx","hit2_sfx","jump1_sfx","jump2_sfx","leaf_sfx","lightning_sfx","maybomb_sfx","plop_sfx","playerdefeated_sfx","pullbomb_sfx","punch_sfx","select_sfx","slam1_sfx","slam2_sfx","spin_sfx","splash_sfx","squirt_sfx","suck_sfx","thud_sfx","tinyslam_sfx","tinythud_sfx","wheesh_sfx","whoash_sfx","whoosh_sfx","zzzap_sfx","megacharge_sfx","gamestart_sfx","sfx_blow_double1","sfx_blow_double2","sfx_zap","sfx_burnapplied","sfx_zetter_upb_hit","sfx_burnconsume","sfx_burnend","sfx_zetter_downb","sfx_zetter_fireball_fire","sfx_upbcharge","sfx_upbmove","sfx_zetter_shine","sfx_zetter_shine_charged","sfx_zetter_shine_taunt","sfx_orca_roll","sfx_orca_roll_snow","sfx_orca_shake","sfx_orca_shake_water","sfx_orca_snow_mouth","sfx_orca_snow_evaporate","sfx_orca_soak","sfx_orca_absorb","sfx_orcane_fspecial","sfx_orcane_fspecial_pud","sfx_bubblepop","sfx_bubblespray","sfx_bubblemouth","sfx_bubblespray_breathless","sfx_waterhit_weak","sfx_waterhit_medium","sfx_waterhit_heavy","sfx_waterhit_heavy2","sfx_old_orca_bite","sfx_watergun_fire","sfx_watergun_splash","sfx_orca_bite","sfx_crunch_water","sfx_orca_crunch","sfx_waterwarp_start","sfx_waterwarp","sfx_swish_weak","sfx_swish_medium","sfx_swish_heavy","sfx_swish_heavy2","sfx_orcane_dsmash","sfx_birdclap","sfx_birdflap","sfx_bird_screech","sfx_bird_upspecial","sfx_bird_nspecial","sfx_bird_nspecial2","sfx_bird_sidespecial","sfx_bird_sidespecial_start","sfx_bird_downspecial","sfx_bird_downspecial_end","sfx_bird_cheer","sfx_pillar_crumble","sfx_kragg_rock_pull","sfx_kragg_rock_land","sfx_kragg_rock_shatter","sfx_kragg_throw","sfx_kragg_rock_pillar","sfx_kragg_spike","sfx_kragg_roll_start","sfx_kragg_roll_loop","sfx_kragg_roll_turn","sfx_kragg_roll_end","sfx_kragg_roll_land","sfx_forsburn_combust","sfx_forsburn_reappear_hit","sfx_forsburn_reappear","sfx_forsburn_cape_swipe","sfx_forsburn_cape_hit","sfx_forsburn_disappear","sfx_forsburn_consume","sfx_forsburn_consume_fail","sfx_forsburn_consume_full","sfx_forsburn_spew_smoke","sfx_forsburn_spew2","sfx_forsburn_spew_end","sfx_forsburn_breath","sfx_forsburn_split","sfx_forsburn_cape_multihit","sfx_may_whip1","sfx_may_whip2","sfx_may_wrap2","sfx_may_wrap1","sfx_may_root","sfx_leafy_hit1","sfx_leafy_hit2","sfx_leafy_hit3","sfx_plant_stepped","sfx_plant_eat","sfx_plant_fat","sfx_plant_ready","sfx_plant_shoot","sfx_may_arc_cointoss","sfx_may_arc_coineat","sfx_may_arc_hit","sfx_may_arc_plant","sfx_may_arc_talkstart","sfx_may_arc_talk","sfx_may_arc_five","sfx_rag_plant_ready","sfx_rag_plant_shoot","sfx_rag_plant_eat","sfx_rag_root","sfx_rag_mark","sfx_rag_whip","sfx_rag_axe_swing","sfx_rag_axe_hitsground","sfx_absa_jump","sfx_absa_whip2","sfx_absa_singlezap1","sfx_absa_whip","sfx_absa_new_whip1","sfx_absa_new_whip2","sfx_absa_whip_charge","sfx_absa_cloud_crackle","sfx_absa_whip3","sfx_absa_cloud_pop","sfx_absa_cloud_placepop","sfx_absa_cloud_place","sfx_absa_cloud_send","sfx_absa_concentrate","sfx_absa_boltcloud","sfx_absa_orb_hit","sfx_absa_current_pop","sfx_absa_orb_miss","sfx_absa_orb_missrelease","sfx_absa_dattack","sfx_absa_harderhit","sfx_absa_jabloop","sfx_absa_jab2","sfx_absa_dashdown","sfx_absa_dashup","sfx_absa_singlezap2","sfx_absa_uair","sfx_absa_jab1","sfx_absa_kickhit","sfx_absa_taunt","sfx_absa_8b","sfx_absa_gp","sfx_absa_champ_loop","sfx_ice_ftilt","sfx_ice_shatter","sfx_ice_shatter_big","sfx_ice_hammerstart","sfx_ice_nspecial_hit_ground","sfx_ice_fspecial_roar","sfx_ice_dspecial_ground","sfx_ice_burst_up","sfx_ice_end","sfx_ice_uspecial_start","sfx_ice_on_player","sfx_ice_back_air","sfx_ice_wake","sfx_icehit_weak1","sfx_icehit_weak2","sfx_icehit_heavy1","sfx_icehit_heavy2","sfx_icehit_medium1","sfx_icehit_medium2","sfx_ice_nspecial_armor","sfx_ice_fspecial_hit_ground","sfx_ice_dspecial_form","sfx_ice_uspecial_jump","sfx_ice_sleep","sfx_ice_shieldup","sfx_panda_taunt_open","sfx_panda_taunt_vote","sfx_panda_taunt_laugh","sfx_panda_taunt_close","sfx_ori_bash_projectile","sfx_ori_bash_launch","sfx_ori_bash_hit","sfx_ori_bash_use","sfx_ori_glide_end","sfx_ori_glide_start","sfx_ori_glide_hit","sfx_ori_glide_featherout","sfx_ori_ustrong_charge","sfx_ori_ustrong_launch","sfx_ori_spirit_flame_1","sfx_ori_spirit_flame_2","sfx_ori_spirit_flame_hit_1","sfx_ori_spirit_flame_hit_2","sfx_ori_stomp_hit","sfx_ori_stomp_hitplayer","sfx_ori_stomp_spin","sfx_ori_charged_flame_charge","sfx_ori_charged_flame_charge2","sfx_ori_charged_flame_release","sfx_ori_charged_flame_hit","sfx_ori_sein_fstrong","sfx_ori_sein_strong_start","sfx_ori_sein_fstrong_hit","sfx_ori_sein_fstrong_hit_final","sfx_ori_grenade_aim","sfx_ori_grenade_hit","sfx_ori_grenade_launch","sfx_ori_energy_hit","sfx_ori_grenade_hit_ground","sfx_ori_dsmash_seinhits","sfx_ori_energyhit_weak","sfx_ori_energyhit_medium","sfx_ori_energyhit_heavy","sfx_ori_seinhit_heavy","sfx_ori_seinhit_medium","sfx_ori_seinhit_weak","sfx_ori_dsmash_skitter_alone","sfx_ori_dsmash_skitter_sein","sfx_ori_dspecial_bash_miss","sfx_ori_uptilt","sfx_ori_uptilt_single","sfx_ori_superjump_sein","sfx_ori_dash_attack_perform","sfx_ori_dtilt_perform","sfx_ori_taunt","sfx_ori_taunt2","sfx_poison_hit_weak","sfx_poison_hit_med","sfx_poison_hit_strong","sfx_frog_jab","sfx_frog_fstrong","sfx_frog_ustrong","sfx_frog_dstrong","sfx_frog_nspecial_cast","sfx_frog_nspecial_shove","sfx_frog_fspecial_start","sfx_frog_fspecial_charge_loop","sfx_frog_fspecial_charge_gained_1","sfx_frog_fspecial_charge_gained_2","sfx_frog_fspecial_charge_full","sfx_frog_fspecial_cancel","sfx_frog_fspecial_fire","sfx_frog_uspecial_cast","sfx_frog_uspecial_spin","sfx_frog_uspecial_divekick","sfx_frog_dspecial_cast","sfx_frog_dspecial_hit","sfx_frog_dspecial_swallow","sfx_frog_dspecial_spit","sfx_frog_dspecial_hit_ground","sfx_frog_gong_hit","sfx_frog_croak","sfx_clairen_hit_weak","sfx_clairen_hit_med","sfx_clairen_hit_strong","sfx_clairen_tip_weak","sfx_clairen_tip_med","sfx_clairen_tip_strong","sfx_clairen_tip_loop","sfx_clairen_tip_assist","sfx_clairen_uspecial_rise","sfx_clairen_uspecial_swing","sfx_plasma_field_loop","sfx_clairen_nspecial_grab_success","sfx_clairen_nspecial_grab_miss","sfx_clairen_dspecial_counter_active","sfx_clairen_dspecial_counter_success","sfx_clairen_fspecial_dash","sfx_clairen_fspecial_slash","sfx_clairen_swing_weak","sfx_clairen_swing_med","sfx_clairen_swing_strong","sfx_clairen_swing_mega_delayed","sfx_clairen_swing_mega_instant","sfx_clairen_spin","sfx_clairen_poke_weak","sfx_clairen_poke_med","sfx_clairen_poke_strong","sfx_clairen_sword_activate","sfx_clairen_sword_deactivate","sfx_clairen_hair","sfx_clairen_arc_bounce","sfx_clairen_arc_hit","sfx_clairen_arc_win","sfx_clairen_arc_lose","sfx_springswitch","sfx_springgo","sfx_obstacle_hit","sfx_stage_pillar","sfx_bigplant_clamp","sfx_bigplant_eat","sfx_bigplant_lunge","sfx_ice_chain","sfx_ring_crowd","sfx_leaves","sfx_grass_creature","sfx_holy_grass","sfx_holy_die","sfx_holy_tablet_spawning","sfx_holy_tablet_appear","sfx_holy_tablet","sfx_holy_textbox","sfx_holy_lightning","sfx_owl0","sfx_owl1","sfx_owl2","sfx_owl3","sfx_owl4","sfx_troupple_rumble","sfx_troupple_splash_big","sfx_troupple_fish_splash_in","sfx_troupple_fish_splash_out","sfx_troupple_fin_flap","sfx_troupple_swipe","sfx_waveland_zet","sfx_waveland_orc","sfx_waveland_wra","sfx_waveland_kra","sfx_waveland_may","sfx_waveland_fors","sfx_waveland_abs","sfx_waveland_eta","sfx_waveland_ori","sfx_waveland_ran","sfx_waveland_cla","sfx_waveland_syl","sfx_waveland_ell","sfx_waveland_gus","sfx_syl_dspecial_growth","sfx_syl_dspecial_howl","sfx_syl_dspecial_howlgrowth","sfx_syl_dspecial_plantaway","sfx_syl_dstrong","sfx_syl_fspecial_bite","sfx_syl_fstrong","sfx_syl_fstrong_final","sfx_syl_nspecial","sfx_syl_nspecial_flowerhit","sfx_syl_nspecial_plantgrowth","sfx_syl_uspecial_travel_loop","sfx_syl_uspecial_travel_start","sfx_syl_ustrong","sfx_syl_ustrong_part2","sfx_syl_ustrong_part3","sfx_syl_ustrong_part1","sfx_syl_promo1","sfx_ell_arc_taunt_start","sfx_ell_arc_taunt_collect","sfx_ell_arc_taunt_collide","sfx_ell_arc_taunt_end","sfx_ell_arc_small_missile_ground","sfx_ell_small_missile_fire","sfx_ell_small_missile_ground","sfx_ell_big_missile_fire","sfx_ell_big_missile_ground","sfx_ell_missile_loop","sfx_ell_nair","sfx_metal_hit_weak","sfx_metal_hit_strong","sfx_ell_dtilt1","sfx_ell_dtilt2","sfx_ell_drill_loop","sfx_ell_drill_stab","sfx_ell_propeller_loop_heavy","sfx_ell_propeller_loop_med","sfx_ell_propeller_loop_light","sfx_ell_explosion_medium","sfx_ell_fist_explode","sfx_ell_fist_fire","sfx_ell_strong_attack_explosion","sfx_ell_steam_release","sfx_ell_steam_hit","sfx_ell_eject","sfx_ell_uspecial_explode","sfx_ell_uspecial_rebuild","sfx_ell_utilt_fire","sfx_ell_utilt_hit","sfx_ell_utilt_loop","sfx_ell_utilt_retract","sfx_ell_utilt_cannon","sfx_ell_dspecial_drop","sfx_ell_dspecial_stick","sfx_ell_dspecial_hit","sfx_ell_dspecial_explosion_1","sfx_ell_dspecial_explosion_2","sfx_ell_dspecial_explosion_3","sfx_ell_fspecial_charge","sfx_ell_hover","sfx_ell_overheat","sfx_ell_cooldown","sfx_gus_jump","sfx_gus_land","sfx_shovel_swing_light1","sfx_shovel_swing_light2","sfx_shovel_swing_med1","sfx_shovel_swing_med2","sfx_shovel_swing_heavy1","sfx_shovel_swing_heavy2","sfx_shovel_hit_light1","sfx_shovel_hit_light2","sfx_shovel_hit_light3","sfx_shovel_hit_med1","sfx_shovel_hit_med2","sfx_shovel_hit_heavy1","sfx_shovel_hit_heavy2","sfx_shovel_dig","sfx_dust_knuckle","sfx_charge_blade_ready","sfx_charge_blade_swing","sfx_blink_dash","sfx_shop_move","sfx_shop_invalid","sfx_shop_buy","sfx_shop_open","sfx_shop_close","sfx_chest_open","sfx_chest_rummage","sfx_chester_appear","sfx_chester_jump","sfx_phase_locket","sfx_fishing_rod_cast","sfx_fishing_rod_catch","sfx_fishing_rod_reel","sfx_fishing_rod_land","sfx_gus_dirt","sfx_mobile_gear_deploy","sfx_mobile_gear_jump","sfx_mobile_gear_move","sfx_mobile_gear_wall","sfx_coin_collect","sfx_gem_collect","sfx_diamond_small_collect","sfx_diamond_collect","sfx_fish_collect","sfx_coin_capture","sfx_war_horn","sfx_buzzsaw_hit","sfx_buzzsaw_throw","sfx_flare_razer","sfx_flareo_rod","sfx_ghost_glove","sfx_infinidagger","sfx_propeller_dagger_release","sfx_propeller_dagger_draw","sfx_propeller_dagger_loop","sfx_gus_propeller_dagger_wall","sfx_tow_anchor_start","sfx_tow_anchor_land","sfx_shovel_knight_die","sfx_shovel_knight_fanfare","sfx_shovel_brandish","sfx_sand_yell","sfx_sand_screech","sfx_death1","sfx_death2","sfx_blow_weak1","sfx_blow_weak2","sfx_swipe_weak1","sfx_swipe_weak2","sfx_blow_medium1","sfx_blow_medium2","sfx_blow_medium3","sfx_swipe_medium1","sfx_swipe_medium2","sfx_swipe_heavy1","sfx_swipe_heavy2","sfx_blow_heavy1","sfx_blow_heavy2","sfx_roll","sfx_quick_dodge","sfx_playerdefeated","sfx_crunch","sfx_spin","sfx_spin_longer","sfx_bite","sfx_jumpground","sfx_jumpair","sfx_land","sfx_land_heavy","sfx_land_med","sfx_land_med2","sfx_dash_start","sfx_land_light","sfx_parry_use","sfx_parry_success","sfx_dizzy","sfx_boss_vortex_start","sfx_boss_vortex","sfx_boss_vortex_end","sfx_boss_laser","sfx_boss_laser_hit","sfx_boss_fireball","sfx_boss_fireball_land","sfx_boss_fireball_big","sfx_boss_shine","sfx_boss_explosion","sfx_boss_final_charge","sfx_boss_final_cannon","sfx_abyss_spawn","sfx_abyss_despawn","sfx_abyss_explosion_start","sfx_abyss_explosion","sfx_abyss_bomb_spawn","sfx_abyss_hex_curse","sfx_abyss_hex_hit","sfx_abyss_hazard_start","sfx_abyss_hazard_burst","sfx_abyss_hazard_hit","sfx_abyss_seed_fall","sfx_abyss_seed_land","sfx_abyss_seed_explode","sfx_abyss_portal_intro","sfx_abyss_portal_spawn","sfx_abyss_explosion_big","sfx_abyss_capturing","sfx_abyss_capture_end","sfx_abyss_rumble","sfx_cub_yawn","sfx_cub_sneeze","sfx_sunny_bark","sfx_kraggling_idle1","sfx_kraggling_idle2","sfx_hedge_smoke","sfx_gator_laugh","sfx_kitty_squeak","sfx_pigeon_land","sfx_pigeon_spin","sfx_sun_yell","mfx_back","mfx_confirm","mfx_forward","mfx_place_marker","mfx_option","mfx_move_cursor","sfx_321","sfx_go","mfx_return_cursor","mfx_notice","mfx_tut_fail","mfx_change_color","mfx_title_loop","mfx_title_zoom","mfx_title_zoom_fast","mfx_title_start","mfx_logo_shing","mfx_flashy_shing","mfx_orby_talk","mfx_orby_talk_done","mfx_player_ready","mfx_player_found","mfx_input_back","mfx_input_end","mfx_input_key","mfx_star","mfx_unstar","mfx_wave_complete","mfx_timertick","mfx_timertick2","mfx_timertick_holy","mfx_timertick_holy2","mfx_hover","mfx_result_expand","mfx_map_open","mfx_map_zoom","mfx_coin_portal","mfx_coin","mfx_hp_spawn","mfx_hp","mfx_xp","mfx_levelup","mfx_ring_bell","mfx_ring_bell2","mfx_mm_coin","mfx_mm_coin_all","mfx_mm_coin_win","mfx_chat_received","music_earth_loop","music_earth_loop.ogg","music_earth_loop_2","music_earth_loop_2.ogg","music_earth_loop_3","music_earth_loop_3.ogg","music_earth_loop_4","music_earth_loop_4.ogg","music_tree_loop","music_tree_loop.ogg","music_tree_loop_2","music_tree_loop_2.ogg","music_tree_loop_3","music_tree_loop_3.ogg","music_tree_loop_4","music_tree_loop_4.ogg","music_fire_loop","music_fire_loop.ogg","music_fire_loop_2","music_fire_loop_2.ogg","music_fire_loop_3","music_fire_loop_3.ogg","music_fire_loop_4","music_fire_loop_4.ogg","music_air_loop","music_air_loop.ogg","music_air_loop_2","music_air_loop_2.ogg","music_air_loop_3","music_air_loop_3.ogg","music_air_loop_4","music_air_loop_4.ogg","music_water_loop","music_water_loop.ogg","music_water_loop_2","music_water_loop_2.ogg","music_water_loop_3","music_water_loop_3.ogg","music_water_loop_4","music_water_loop_4.ogg","music_holy_loop","music_holy_loop.ogg","music_holy_loop_2","music_holy_loop_2.ogg","music_holy_loop_3","music_holy_loop_3.ogg","music_holy_loop_4","music_holy_loop_4.ogg","music_smoke_loop","music_smoke_loop.ogg","music_smoke_loop_2","music_smoke_loop_2.ogg","music_smoke_loop_3","music_smoke_loop_3.ogg","music_smoke_loop_4","music_smoke_loop_4.ogg","music_lightning_loop","music_lightning_loop.ogg","music_lightning_loop_2","music_lightning_loop_2.ogg","music_lightning_loop_3","music_lightning_loop_3.ogg","music_lightning_loop_4","music_lightning_loop_4.ogg","music_ice_loop","music_ice_loop.ogg","music_ice_loop_2","music_ice_loop_2.ogg","music_ice_loop_3","music_ice_loop_3.ogg","music_ice_loop_4","music_ice_loop_4.ogg","music_gates_loop","music_gates_loop.ogg","music_gates_loop_2","music_gates_loop_2.ogg","music_gates_loop_3","music_gates_loop_3.ogg","music_gates_loop_4","music_gates_loop_4.ogg","music_abyss_loop","music_abyss_loop.ogg","music_abyss_loop_2","music_abyss_loop_2.ogg","music_abyss_loop_3","music_abyss_loop_3.ogg","music_abyss_loop_4","music_abyss_loop_4.ogg","music_abyss_ev1_loop","music_abyss_ev1_loop.ogg","music_abyss_ev2_loop","music_abyss_ev2_loop.ogg","music_abyss_ev3_loop","music_abyss_ev3_loop.ogg","music_guest1_loop","music_guest1_loop.ogg","music_guest1_loop_2","music_guest1_loop_2.ogg","music_guest1_loop_3","music_guest1_loop_3.ogg","music_guest1_loop_4","music_guest1_loop_4.ogg","music_guest2_loop","music_guest2_loop.ogg","music_guest2_loop_2","music_guest2_loop_2.ogg","music_guest2_loop_3","music_guest2_loop_3.ogg","music_guest2_loop_4","music_guest2_loop_4.ogg","music_ring_loop","music_ring_loop.ogg","music_ring_loop_2","music_ring_loop_2.ogg","music_ring_loop_3","music_ring_loop_3.ogg","music_ring_loop_4","music_ring_loop_4.ogg","music_plasma_loop","music_plasma_loop.ogg","music_plasma_loop_2","music_plasma_loop_2.ogg","music_plasma_loop_3","music_plasma_loop_3.ogg","music_plasma_loop_4","music_plasma_loop_4.ogg","music_poison_loop","music_poison_loop.ogg","music_poison_loop_2","music_poison_loop_2.ogg","music_poison_loop_3","music_poison_loop_3.ogg","music_poison_loop_4","music_poison_loop_4.ogg","music_grass_loop","music_grass_loop.ogg","music_grass_loop_2","music_grass_loop_2.ogg","music_grass_loop_3","music_grass_loop_3.ogg","music_grass_loop_4","music_grass_loop_4.ogg","music_steam_loop","music_steam_loop.ogg","music_steam_loop_2","music_steam_loop_2.ogg","music_steam_loop_3","music_steam_loop_3.ogg","music_steam_loop_4","music_steam_loop_4.ogg","music_tutorial_loop","music_tutorial_loop.ogg","music_win_fire","music_win_fire.ogg","music_win_water","music_win_water.ogg","music_win_air","music_win_air.ogg","music_win_earth","music_win_earth.ogg","music_win_smoke","music_win_smoke.ogg","music_win_tree","music_win_tree.ogg","music_win_lightning","music_win_lightning.ogg","music_win_ice","music_win_ice.ogg","music_win_poison","music_win_poison.ogg","music_win_plasma","music_win_plasma.ogg","music_win_grass","music_win_grass.ogg","music_win_steam","music_win_steam.ogg","music_win_guest1","music_win_guest1.ogg","music_win_guest2","music_win_guest2.ogg","music_results_loop","music_results_loop.ogg","music_results_abyss_loop","music_results_abyss_loop.ogg","music_menu_main_loop","music_menu_main_loop.ogg","music_menu_versus_loop","music_menu_versus_loop.ogg","music_menu_decisive_loop","music_menu_decisive_loop.ogg","music_menu_customize_loop","music_menu_customize_loop.ogg","music_menu_editor_loop","music_menu_editor_loop.ogg","music_plasma_open","music_plasma_loop_i","music_poison_open","music_poison_loop_i","music_grass_open","music_grass_loop_i","music_steam_open","music_steam_loop_i","music_ring_open","music_ring_loop_i","music_fire_open","music_fire_loop_i","music_air_open","music_air_loop_i","music_earth_open","music_earth_loop_i","music_water_open","music_water_loop_i","music_tree_open","music_tree_loop_i","music_smoke_open","music_smoke_loop_i","music_holy_open","music_holy_loop_i","music_lightning_open","music_lightning_loop_i","music_ice_open","music_ice_loop_i","music_gates_open","music_gates_loop_i","music_gates_b_open","music_gates_b_loop_i","music_abyss_open","music_abyss_loop_i","music_guest1_open","music_guest1_loop_i","music_guest2_open","music_guest2_loop_i","music_grid_open","music_grid_loop_i","music_tutorial_a","music_tutorial_b","music_tutorial_start","music_tutorial_complete","music_tutorial_st_open","music_tutorial_st_loop_i","music_menu_main_open","music_menu_main_loop_i","music_menu_versus_open","music_menu_versus_loop_i","music_menu_customize_open","music_menu_customize_loop_i","music_menu_decisive_open","music_menu_decisive_loop_i","music_menu_editor_open","music_menu_editor_loop_i","music_win_fire_i","music_win_air_i","music_win_earth_i","music_win_water_i","music_win_tree_i","music_win_smoke_i","music_win_lightning_i","music_win_ice_i","music_win_poison_i","music_win_plasma_i","music_win_grass_i","music_win_steam_i","music_win_guest1_i","music_win_guest2_i","music_results_abyss_open","music_results_abyss_loop_i","music_solo_map_open","music_solo_map_loop_i","music_solo_cutscene1_open","music_solo_cutscene1_loop_i","music_solo_cutscene2_open","music_solo_cutscene2_loop_i","music_solo_cutscene3_open","music_solo_cutscene3_loop_i","music_solo_cutscene4_open","music_solo_cutscene4_loop_i","music_solo_cutscene12_open","music_solo_cutscene12_loop_i","music_solo_cutscene13_open","music_solo_cutscene13_loop_i","music_solo_cutscene_crowd","music_solo_vs","music_solo_win_open","music_solo_win_loop_i","music_solo_credits_open","music_solo_credits_loop_i","music_solo_gameover_open","music_solo_gameover_loop_i","music_solo_restore_open","music_solo_restore_loop_i","music_vs_results_open_i","music_vs_results_loop_i","music_intro","music_empty","audiogroup_default","ag_dummy","ag_music","ag_sfx","ag_mfx","solid_32x32","yellow_32x32","tall_block","right_block_spr","left_block_spr","jumpthrough_32x32","ex_guy_collision_mask","will_die_mask","will_die_mask_grnd","ex_guy_hurt_box","ex_guy_crouch_box","ex_idle","ex_plat","ex_hurt","ex_flash","ex_guy_ftilt","ex_guy_ftilt_hbox","ex_crouch","ex_start_jump","ex_roll_forward","ex_roll_backward","ex_dodge","ex_tech","ex_air_dodge","ex_guy_turn","ex_walk","ex_dash","ex_dash_start","ex_stop_dash","ex_jump","ex_nspecial","ex_nspecial_proj","ex_uspecial","ex_fspecial","ex_dspecial","ex_fstrong","ex_ustrong","ex_dstrong","ex_jab","ex_dattack","ex_utilt","ex_dtilt","ex_fair","ex_bair","ex_dair","ex_uair","ex_nair","ex_taunt","ex_dbj","ex_land","ex_wave_land","empty_sprite","blank_attack","zet_idle_new","zet_idle_xmas","zet_idle_val","zet_val_move","zet_xmas_hat","zet_xmas_move","zet_xmas_drop","zet_taunt_champ","zet_taunt","zet_promo2_sword","zet_promo2_taunt","zet_dodge","zet_turn","zet_run","zet_dashstart","zet_walk_new","zet_walk_turn","zet_startjump","zet_land","zet_waveland","zet_djump","zet_jump","zet_walljump","zet_crouch","zet_crouch_loop","zet_short_stop","zet_bouncehurt","zet_downhurt","zet_smallhurt","zet_spinhurt","zet_bighurt","zet_bighurt_pause","zet_roll_forward","zet_roll_backward","zet_hurtground","zet_tech","zet_pratfall","zet_airdodge","dodge_circle_spr","new_dodge_spr","zet_ftilt","zet_ftilt_hurt","zet_ftilt1","zet_ftilt_hurt1","zet_fair","zet_fair_hurt","zet_dtilt","zet_dtilt_hurt","zet_dair","zet_dair_hurt","zet_utilt","zet_utilt_hurt","zet_uair","zet_uair_hurt","zet_dattack","zet_dattack_hurt","zet_usmash2","zet_usmash2_hurt","zet_nair","zet_nair_hurt","zet_bair","zet_bair_hurt","zet_fsmash","zet_fsmash_hurt","zet_fsmash1","zet_fsmash_hurt1","zet_jab","zet_jab_hurt","zet_dsmash","zet_dsmash_hurt","zet_fspecial_grnd","zet_fspecial_air","zet_fspecial_hurt","zet_proj_spr","zet_proj_large_spr","zet_proj_outline_spr","zet_proj_frame1_mask","zet_uspecial","zet_uspecial_hurt","zet_dspecial_air","zet_dspecial_grnd","zet_dspecial_hurt","zet_nspecial_fg","zet_nspecial_bg","zet_nspecial_grnd","zet_nspecial_air","zet_nspecial_hurt","zet_shine_fg","zet_shine_bg","zet_shine_grnd","zet_shine_air","zet_promo3_taunt","zet_golden_taunt","zet_golden_taunt_doll","fire_grnd1","fire_grnd1_leave","zet_plat","fire_consume_top_spr","fire_consume_bot_spr","zet_promo1_taunt","zet_abyss_fall","zet_dspecial_part1","zet_dspecial_part2","zet_dspecial_part3","zet_gameover","orca_idle","orca_val_hat","orca_val_move","orca_val_drop","orca_xmas_hat","orca_xmas_move","orca_xmas_drop","orca_hurtbox","orca_hitstun_hurtbox","orca_crouchbox","orca_walk","orca_run","orca_dashstart","orca_startrun","orca_crouch","orca_walk_turn","orca_long_stop","orca_turn","orca_jump","orca_walljump","orca_pratfall","orca_startjump","orca_land","orca_smallhurt","orca_landing_lag","orca_djump","orca_bouncehurt","orca_bighurt","orca_downhurt","orca_uphurt","orca_spinhurt","orca_hurtground","orca_airdodge_down","orca_airdodge_up","orca_airdodge_back","orca_airdodge_upback","orca_airdodge_forward","orca_airdodge_downforward","orca_airdodge_downback","orca_airdodge_upforward","orca_airdodge","orca_roll_backward","orca_tech","orca_roll_forward","orca_dodge","orca_waveland","orca_dtilt","orca_dtilt_hurt","orca_ftilt","orca_ftilt_hurt","orca_utilt","orca_utilt_hurt","orca_usmash","orca_usmash_puddle","orca_usmash_puddle_abyss","orca_usmash_hurt","orca_usmash_puddle_hurt","orca_dsmash","orca_dsmash_puddle","orca_dsmash_puddle_abyss","orca_dsmash_hurt","orca_fsmash","orca_fsmash_puddle","orca_fsmash_puddle_abyss","orca_fsmash_hurt","orca_fsmash_puddle_hurt","orca_jab","orca_jab_hurt","orca_dattack","orca_dattack_hurt","orca_bair","orca_bair_hurt","orca_dattack_air","orca_nair","orca_nair_hurt","orca_uair","orca_uair_hurt","orca_dair","orca_dair_hurt","orca_fair","orca_fair_hurt","orca_nspecial_grnd","orca_nspecial_grnd_hurt","orca_nspecial_air","orca_nspecial_hurt","puddle_tail_splash","puddle_spr","puddle_white_spr","puddle_dis_spr","puddle_sucked_spr","watergun_spr","bubbledrop_spr","orca_uspecial_attack","orca_uspecial_attack_hurt","orca_uspecial_grnd","orca_uspecial_grnd_hurt","orca_uspecial_air","orca_uspecial_air_hurt","orca_fspecial_grnd","orca_fspecial_air","orca_fspecial_grnd_white","orca_fspecial_air_white","orca_fspecial_hurt","orca_dspecial_grnd","orca_dspecial_grnd_hurt","orca_dspecial_air","orca_dspecial_hurt","orca_plat","orca_taunt","orca_shine_spr","orca_promo1_taunt","orca_abyss_fall","orca_promo2a_taunt","orca_promo2b_taunt","orca_gameover","orca_tech_gameover","orca_plat_gameover","orca_taunt_gameover","orca_idle_gameover","orca_promo3_taunt","bird_idle","bird_idle_val","bird_val_hat","bird_val_move","bird_val_drop","bird_xmas_hat","bird_xmas_move","bird_xmas_drop","bird_crouch","bird_walk","bird_walk_turn","bird_dashstart","bird_glidestart","bird_run","bird_glide","bird_dashturn","bird_dashstop","bird_land","bird_waveland","bird_land2","bird_walljump","bird_startjump","bird_fjump","bird_jump","bird_djump","bird_roll_backward","bird_roll_forward","bird_dodge","bird_airdodge","bird_airdodge_downback","bird_airdodge_upback","bird_airdodge_back","bird_airdodge_down","bird_airdodge_downforward","bird_airdodge_upforward","bird_airdodge_forward","bird_airdodge_up","bird_tech","bird_smallhurt","bird_bighurt_pause","bird_uphurt","bird_spinhurt","bird_downhurt","bird_bouncehurt","bird_pratfall","bird_hurtland","bird_bighurt","bird_jab","bird_jab_hurt","bird_dtilt","bird_dtilt_hurt","bird_ftilt","bird_ftilt_hurt","bird_nair4","bird_nair_hurt","bird_uair","bird_uair_hurt","bird_bair","bird_bair_hurt","bird_utilt","bird_utilt_hurt","bird_fair","bird_fair_hurt","bird_fsmash","bird_fsmash_hurt","bird_dair_ground","bird_dair_ground_hurt","bird_usmash","bird_usmash_hurt","bird_dattack","bird_dattack_hurt","bird_nspecial_grnd","bird_nspecial","bird_nspecial_hurt","bird_dspecial_grnd","bird_dspecial_grnd_hurt","bird_dspecial_air","bird_dspecial_air_hurt","bird_dspecial_hurt","bird_fnado_grnd","bird_fnado_air","bird_bnado_air","bird_bnado_grnd","bird_uspecial","bird_uspecial_hurt","bird_fspecial_grnd","bird_fspecial_air","bird_fspecial_hurt","bird_plat","bird_proj_spr","bird_proj_weak_spr","wind_tunnel_simple_spr","wind_tunnel_gb_spr","wind_tunnel_stripes_spr","bird_dair2","bird_dair2_hurt","bird_taunt","bird_promo1_taunt","bird_promo1_flag","bird_promo2_taunt","wind_tunnel_flat_spr","wind_tunnel_spr","bird_abyss_fall","bird_gameover","bird_promo4_hat","bird_promo4_idle","bird_promo4_move","bird_promo4_tunnel","bird_promo4_proj_spr","bird_promo4_taunt","bug_plat_spr","bug_idle","bug_idle_xmas","bug_val_hat","bug_val_move","bug_val_drop","bug_xmas_hat","bug_xmas_move","bug_xmas_drop","kragg_collision_mask","bug_hurtbox","bug_crouchbox","bug_dash","bug_taunt","bug_dashstart","bug_dashturn","bug_walk","bug_walkturn","bug_dashstop","bug_startjump","bug_jump","bug_pratfall","bug_landing_lag","bug_waveland","bug_crouch","bug_djump","bug_roll_forward","bug_roll_backward","bug_parry","bug_airdodge_neutral","bug_airdodge_down","bug_airdodge_up","bug_airdodge_forup","bug_airdodge_fordown","bug_airdodge_backdown","bug_airdodge_backup","bug_airdodge_forward","bug_airdodge_back","bug_tech","bug_bighurt","bug_downhurt","bug_uphurt","bug_smallhurt","bug_spinhurt","bug_bouncehurt","bug_walljump","bug_hurtground","bug_uthrow","bug_uthrow_hurt","bug_uthrow_air","bug_dthrow","bug_dthrow_hurt","bug_dthrow_air","bug_fthrow","bug_fthrow_hurt","bug_fthrow_air","bug_rock_startjump","burrito_rock_startjump","bug_rock_hurt","burrito_rock_hurt","bug_rock_idle","burrito_rock_idle","bug_rock_walkturn","burrito_rock_walkturn","bug_rock_jump","burrito_rock_jump","bug_rock_walk","burrito_rock_walk","bug_dspecial","bug_dspecial_hurt","bug_dspecial_air_grounded","bug_dspecial_air","bug_nspecial","bug_nspecial_hurt","bug_nspecial_air","bug_nspecial_air_hurt","bug_nspecial_air_grnd","bug_nspecial_air_grnd_hurt","bug_uspecial","bug_uspecial_hurt","rock_pillar_top_spr","rock_pillar_tile_spr","rock_pillar_spr","rock_forward_spr","rock_down_spr","rock_up_spr","rock_break_spr","rock_pieces_spr","bug_spike1_spr","bug_spike1_mask","bug_spike2_spr","bug_spike2_mask","bug_spike3_spr","bug_spike3_mask","bug_fspecial3","bug_dtilt","bug_ftilt","bug_usmash","bug_fsmash","bug_dair","bug_dair_hurt","bug_fair","bug_fair_hurt","bug_bair","bug_bair_hurt","bug_nair","bug_nair_hurt","bug_utilt","bug_dattack","bug_dattack_hurt","bug_uair","bug_uair_hurt","bug_dsmash2","bug_dsmash2_hurt","bug_jab","bug_fsmash_hurt","bug_jab_hurt","bug_fspecial3_hurt","bug_utilt_hurt","bug_dtilt_hurt","bug_usmash_hurt","bug_ftilt_hurt","bug_snow_spr","bug_promo1_taunt","bug_abyss_fall","bug_promo2_taunt","burrito_rock_forward_spr","burrito_rock_up_spr","burrito_rock_down_spr","burrito_rock_break_spr","burrito_rock_pieces_spr","burrito_pillar_top_spr","burrito_pillar_tile_spr","bug_promo3_taunt","bug_gameover","bug_promo4_taunt","bug_promo4_taunt2","golden_kragg_statue_spr","golden_kragg_sparkles","smoke_idle","smoke_idle_val","smoke_val_move","smoke_xmas_hat","smoke_xmas_move","smoke_xmas_drop","smoke_walkturn","smoke_walk","smoke_dashturn","smoke_dashstop","smoke_dash","smoke_dashstart","smoke_jump","smoke_djump","smoke_airdodge","smoke_waveland","smoke_land","smoke_hurtground","smoke_startjump","smoke_crouch","smoke_crouch_anim","smoke_fspecial","smoke_fspecial_hurt","smoke_fspecial_air","smoke_nspecial","smoke_nspecial_air","bigger_smoke_two_spr_1x","bigger_smoke_destroy","smoke_mask_spr","dlc_smoke_two_spr_1x","dlc_smoke_destroy","az_smoke_two_spr_1x","smoke_uspecial","smoke_uspecial_powered","smoke_uspecial_air","smoke_uspecial_powered_air","smoke_uspecial_hurt","smoke_uspecial_clone_hurt","smoke_jab","smoke_jab_hurt","smoke_fsmash","smoke_fsmash_hurt","smoke_usmash","smoke_usmash_hurt","smoke_utilt","smoke_utilt_hurt","smoke_dtilt","smoke_dtilt_hurt","smoke_ftilt","smoke_ftilt_hurt","smoke_nair","hyena_plat","smoke_nair_hurt","smoke_dattack","smoke_dattack_hurt","smoke_fair","smoke_fair_hurt","smoke_dair","smoke_dair_hurt","smoke_dspecial","smoke_dspecial_hurt","smoke_dspecial_air","smoke_dspecial_air_atk","smoke_dspecial_atk","smoke_dspecial_atk_heatwave","smoke_dspecial_air_atk_heatwave","smoke_fspecial_clone","smoke_fspecial_clone_air","smoke_fspecial_clone_hurt","smoke_nspecial_smoke","smoke_nspecial_smoke_air","smoke_dspecial_atk_hurt","smoke_uair","smoke_uair_hurt","smoke_bair","smoke_bair_hurt","smoke_roll_forward","smoke_roll_backward","smoke_dsmash","smoke_dsmash_hurt","smoke_smallhurt","smoke_bighurt","smoke_spinhurt","smoke_downhurt","smoke_uphurt","smoke_bouncehurt","smoke_pratfall","smoke_tech","smoke_hit1_spr","smoke_hit2_spr","smoke_walljump","smoke_taunt","smoke_promo1_taunt","smoke_promo1_effect","smoke_parry","smoke_abyss_fall","smoke_gameover","smoke_bash_explosion_spr","smoke_bash_explosion_mask","bigger_smoke_two_spr","smoke_promo_bg","smoke_promo2_taunt","falling_cactus_spr","decoy_cactus_spr","smoke_promo3_taunt","ferret_idle","ferret_idle_xmas","ferret_val_hat","ferret_val_move","ferret_val_drop","ferret_xmas_hat","ferret_xmas_move","ferret_xmas_drop","ferret_hurtbox","ferret_dash","ferret_dashstart","ferret_walk","ferret_walkturn","ferret_dashstop","ferret_dashturn","ferret_startjump","ferret_jump","ferret_jump_hor","ferret_djump","ferret_parry","ferret_uphurt","ferret_bouncehurt","ferret_downhurt","ferret_smallhurt","ferret_spinhurt","ferret_hurtground","ferret_bighurt","ferret_land","ferret_landinglag","ferret_pratfall","ferret_crouch","ferret_walljump","ferret_wallcling","ferret_rollforward","ferret_rollbackward","ferret_airdodge","ferret_airdodge_forward","ferret_airdodge_up","ferret_airdodge_down","ferret_airdodge_back","fer_tech","fer_waveland","fer_utilt","fer_utilt_hurt","fer_dattack","fer_dattack_hurt","fer_ftilt","fer_ftilt_hurt","fer_dtilt","fer_dtilt_hurt","fer_bair","fer_bair_hurt","fer_jabcombo","fer_jabcombo_hurt","fer_uair","fer_uair_hurt","fer_dair","fer_dair2","fer_dair2_hurt","fer_dair_hurt","fer_fair","fer_fair_hurt","fer_nair","fer_nair_hurt","fer_fspecial","fer_fspecial_air","fer_fspecial_hurt","fer_nspecial","fer_nspecial_hurt","fer_fsmash","fer_fsmash_hurt","fer_usmash","fer_usmash_hurt","fer_dsmash","fer_dsmash_hurt","fer_dspecial_grnd_coin","fer_dspecial_f_air_coin","fer_dspecial_air_coin","fer_dspecial_grnd","fer_dspecial_f_air","fer_dspecial_grnd_hurt","fer_dspecial_air","fer_dspecial_air_hurt","fer_uspecial_marked","fer_uspecial_marked_coin","fer_uspecial_marked_old","fer_uspecial_marked_flat","fer_uspecial_marked_hurt","fer_uspecial_marked_vul_hurt","fer_uspecial_comb_hurt","fer_uspecial","fer_uspecial_air","fer_uspecial_hurt","ferret_proj_spr","fer_leaf_spr","fer_wrap_spr","fer_plant_idle","fer_plant_panda_idle","fer_plant_stun","fer_plant_panda_stun","fer_plant_hurt","fer_plant_panda_hurt","fer_plant_fat_idle","fer_plant_panda_fat_idle","fer_plant_spawn","fer_plant_panda_spawn","fer_plant_shoot","fer_plant_panda_shoot","fer_plant_eat","fer_plant_panda_eat","fer_plant_fade","fer_plant_panda_fade","fer_plant_wrap","fer_plant_attack_spr","fer_plant_panda_attack_spr","fer_plant_mask","fer_plant_hover","fer_plant_proj","fer_dair_grnd_spr","fer_dair_plant","fer_dair_plant_hbox","fer_seed_break","leaf_part_spr1","leaf_part_spr_ab","leaf_petal_spr","leaf_coin_spr","fer_seed_hit","fer_plat","fer_seed","fer_seed_frame1_mask","leafy_hit_spr1","leafy_hit_spr2","fer_taunt","fer_plant_taunt","fer_taunt2","fer_promo1_taunt2","fer_promo1_taunt","fer_promo1_plant_taunt","ferret_nspecial_arcade","fer_promo2_taunt","fer_promo2_taunt2","fer_promo2_plant_taunt","fer_coin","fer_plant_arcade_idle","fer_plant_arcade_fade","fer_plant_arcade_hurt","fer_plant_arcade_eat","fer_plant_arcade_attack_spr","fer_plant_arcade_stun","fer_plant_arcade_spawn","fer_plant_arcade_shoot","fer_plant_arcade_fat_idle","fer_plant_arcade_wrap","ferret_abyss_fall","ferret_gameover","rag_idle","rag_dash","rag_dashstart","rag_walk","rag_dashstop","rag_dashturn","rag_startjump","rag_jump","rag_jump_hor","rag_djump","rag_parry","rag_uphurt","rag_bouncehurt","rag_downhurt","rag_smallhurt","rag_spinhurt","rag_hurtground","rag_bighurt","sprite_template","rag_land","rag_landinglag","rag_crouch","rag_pratfall","rag_walljump","rag_wallcling","rag_walkturn","rag_rollforward","rag_rollbackward","rag_airdodge","rag_tech","rag_waveland","rag_utilt","rag_ftilt","rag_dattack","rag_dtilt","rag_bair","rag_jabcombo","rag_uair","rag_dair","rag_fair","rag_nair","rag_fspecial","rag_fspecial_air","rag_uspecial","rag_uspecial_air","rag_nspecial","rag_fsmash","rag_usmash","rag_dsmash","rag_dspecial_grnd","rag_dspecial_f_air","rag_leaf_spr","rag_dspecial_air","rag_uspecial_marked","rag_wrap_spr","rag_plant_idle","rag_plant_stun","rag_plant_hurt","rag_plant_spawn","rag_plant_shoot","rag_plant_fade","rag_plant_eat","rag_plant_wrap","rag_plant_attack","rag_plant_hover","rag_plant_proj","rag_dair_plant","rag_seed_break","rag_seed_hit","rag_taunt","rag_seed","rag_plat","rag_plant_taunt","fer_promo4_taunt","fer_promo4_taunt2","fer_promo4_plant_taunt","goat_idle","goat_idle_xmas","goat_val_hat","goat_val_move","goat_val_drop","goat_xmas_hat","goat_xmas_move","goat_xmas_drop","goat_walk","goat_walkturn","goat_crouch","goat_roll_forward","goat_roll_backward","goat_land","goat_startjump","goat_jump","goat_djump","goat_dash","goat_dashstart","goat_dashstop","goat_dashturn","goat_landinglag","goat_pratfall","goat_walljump","goat_parry","goat_airdodge","goat_waveland","goat_tech","goat_smallhurt","goat_spinhurt","goat_bighurt","goat_uphurt","goat_bouncehurt","goat_downhurt","goat_hurtground","absa_plat_spr","goat_jab","goat_ftilt","goat_ftilt_proj","goat_utilt","goat_dtilt","goat_fsmash","goat_usmash","goat_dsmash2","goat_dsmash","goat_dsmash_chain","goat_dsmash_mask","goat_dsmash_chain_old","goat_nair","goat_fair","goat_bair","goat_dair","goat_uair","goat_dattack","goat_nspecial_grnd","goat_nspecial_air","goat_nspecial_cloud","goat_fspecial_grnd","goat_fspecial_air","goat_fspecial_hurt","goat_dspecial_chain","goat_dspecial_chain_pause_spr","goat_dspecial_chain_half","goat_dspecial_grnd","goat_dspecial_air","goat_uspecial_chain","goat_uspecial","goat_dtilt_hurt","goat_dsmash_hurt","goat_fsmash_hurt","goat_usmash_hurt","goat_utilt_hurt","goat_jab_hurt","goat_ftilt_hurt","goat_nspecial_ground_hurt","goat_nspecial_hurt","goat_dattack_hurt","goat_nspecial_cloud_hurt","goat_nair_hurt","goat_fair_hurt","goat_bair_hurt","goat_dair_hurt","goat_uair_hurt","goat_dspecial_hurt","goat_uspecial_hurt","goat_cloud_move","goat_cloud_form","goat_cloud_idle","goat_cloud_dspecial","goat_cloud_explode","goat_cloud_fade","twitch_cloud_idle","twitch_cloud_explode","twitch_cloud_fade","twitch_cloud_dspecial","twitch_cloud_move","twitch_cloud_form","goat_promo2_taunt","goat_promo2_taunt_lightning","goat_champ_lightning_tile","goat_promo3_taunt","goat_penguin_nspecial_grnd","goat_penguin_nspecial_air","penguin_cloud_idle","penguin_cloud_explode","penguin_cloud_fade","penguin_cloud_dspecial","penguin_cloud_pop","penguin_cloud_move","penguin_cloud_form","sweetspot_hit_spr","sweetspot_hit_old","goat_cloud_pop","goat_cloud_pop_old","goat_part1_spr","goat_part2_spr","goat_hit_small_spr","goat_hit_direction_spr","goat_hit_large_spr","electric_hurt_spr","goat_cloud_pop_mask","goat_cloud_pop_mask_big","goat_taunt","goat_promo1_taunt","goat_abyss_fall","goat_gameover","bear_idle","bear_val_hat","bear_val_move","bear_xmas_hat","bear_xmas_move","bear_xmas_drop","bear_airdodge","bear_airdodge_down","bear_airdodge_downback","bear_airdodge_downforward","bear_airdodge_forward","bear_airdodge_up","bear_airdodge_upback","bear_airdodge_upforward","bear_hurtground","bear_bighurt","bear_smallhurt","bear_uphurt","bear_spinhurt","bear_downhurt","bear_bouncehurt","bear_crouch","bear_crouchbox","bear_dash","bear_dashstart","bear_dashstop","bear_dashturn","bear_djump","bear_pratfall","bear_hurtbox","bear_ice_ends","bear_ice_pud","bear_jump","bear_parry","bear_jumpstart_dattack","bear_jump_dattack","bear_jumpstart","bear_walk","bear_land","bear_roll_forward","bear_walkturn","bear_roll_backward","bear_landinglag","bear_mask","bear_jab","bear_jab_hurt","bear_dattack","bear_dattack_hurt","bear_dtilt","bear_dtilt_hurt","bear_ftilt","bear_ftilt_hurt","bear_utilt","bear_utilt_hurt","bear_nair","bear_nair_hurt","bear_fair","bear_fair_part2","bear_fair_hurt","bear_fair_part2_hurt","bear_bair","bear_bair_hurt","bear_dair","bear_dair_hurt","bear_uair","bear_uair_hurt","bear_fsmash","bear_fsmash_clean","bear_fsmash_hurt","bear_usmash","bear_usmash_clean","bear_usmash_hurt","bear_dsmash","bear_dsmash_clean","bear_dsmash_hurt","bear_iceshard_spr","bear_nspecial_air","bear_nspecial_grnd","bear_nspecial_hurt","bear_fspecial","bear_fspecial_air","bear_fspecial_hurt","bear_fspecial_air_hurt","bear_uspecial_air","bear_uspecial_armored","bear_uspecial_hurt","bear_walljump","bear_dspecial","bear_dspecial_hurt","bear_fspecial_proj","bear_fspecial_proj_break","bear_fspecial_proj_mask","bear_plat_spr","iceo_tall_spr","iceo_short_spr","bear_taunt","bear_taunt_hurt","vfx_ice_shard_med","vfx_ice_shard_long","vfx_white_short","vfx_icy_big","vfx_ice_omni_small","bear_promo1_taunt","bear_promo1_shard_spr","bear_ice_tile","ice_parts_spr","ice_parts_spr2","ice_parts_spr2_ab","ice_parts_dark2","ice_parts_dark2_ab","ice_parts_dark","bear_abyss_fall","bear_gameover","bear_promo2_taunt","bear_promo2_idle","bear_promo2_cape","bear_promo2_crown","bear_promo2_sparkle","ice_shock_tex","panda_idle","panda_airdodge","panda_airdodge_down","panda_airdodge_downback","panda_airdodge_downforward","panda_airdodge_forward","panda_airdodge_up","panda_airdodge_upback","panda_airdodge_upforward","panda_hurtground","panda_bighurt","panda_smallhurt","panda_uphurt","panda_spinhurt","panda_downhurt","panda_bouncehurt","panda_crouch","panda_dash","panda_dashstart","panda_dashstop","panda_dashturn","panda_djump","panda_pratfall","panda_jump","panda_parry","panda_jumpstart_dattack","panda_jump_dattack","panda_jumpstart","panda_walk","panda_land","panda_roll_forward","panda_walkturn","panda_roll_backward","panda_landinglag","panda_jab","panda_dattack","panda_dtilt","panda_ftilt","panda_utilt","panda_nair","panda_fair","panda_fair_part2","panda_bair","panda_dair","panda_uair","panda_fsmash","panda_fsmash_clean","panda_usmash","panda_usmash_clean","panda_dsmash","panda_dsmash_clean","panda_nspecial_air","panda_nspecial_grnd","panda_fspecial","panda_fspecial_air","panda_uspecial_air","panda_uspecial_armored","panda_walljump","panda_dspecial","panda_taunt","panda_taunt_letters","panda_taunt_icons","cat_hurtbox","cat_crouchbox","cat_idle","cat_val_hat","cat_val_move","cat_xmas_hat","cat_xmas_move","cat_xmas_drop","cat_dash","cat_dashstart","cat_walk","cat_walkturn","cat_dashstop","cat_dashturn","cat_startjump","cat_jump","cat_djump","cat_parry","cat_uphurt","cat_bouncehurt","cat_downhurt","cat_smallhurt","cat_spinhurt","cat_hurtground","cat_bighurt","cat_land","cat_landinglag","cat_waveland","cat_pratfall","cat_crouch","cat_walljump","cat_wallcling","cat_rollforward","cat_rollbackward","cat_airdodge","cat_tech","cat_jabcombo","cat_jabcombo_hurt","cat_ftilt","cat_ftilt_hurt","cat_utilt","cat_utilt_hurt","cat_dtilt","cat_dtilt_hurt","cat_dattack","cat_dattack_hurt","cat_fsmash","cat_fsmash_hurt","cat_fsmash_orb","cat_fsmash_orb_hurt","cat_dsmash","cat_dsmash_hurt","cat_dsmash_orb","cat_dsmash_orb_hurt","orb_dsmash_solo","cat_usmash","cat_usmash_hurt","cat_usmash_dust","cat_usmash_orb","cat_aura","cat_orb_aura","cat_orb_aura_loop","cat_nair","cat_nair_hurt","cat_fair","cat_fair_hurt","cat_bair","cat_bair_hurt","cat_uair","cat_uair_hurt","cat_dair","cat_dair_hurt","cat_fspecial","cat_fspecial_hurt","cat_fspecial_air","cat_uspecial","cat_uspecial_hurt","cat_dspecial","cat_dspecial_hurt","cat_taunt","orb_idle_spr","orb_idle_charging","orb_idle_shooting","orb_idle_charged","cat_charge_spr","cat_charge_outline_spr","orb_shot","orb_shot_2","orb_trail_spr","grenade_trail_spr","orb_charged_flame","orb_charged_flame_mask","orb_charged_flame_sweet_mask","orb_charged_flame_large","orb_charged_flame_mask_large","bash_dir_spr","cat_dust_spr","orb_hit_spr","cat_hit_part_spr","cat_hit_part_blue_spr","cat_hit_weak_spr","cat_hit_weak_blue_spr","cat_hit_strong_spr","cat_hit_strong_blue_spr","cat_dspecial_effect","cat_grenade_spr","cat_grenade_moving_spr","cat_grenade_explode_spr","cat_arc_spr","cat_plat","cat_taunt_effect","cat_checkpoint_loop","cat_checkpoint_end","frog_uphurt","frog_airdodge","frog_bighurt","frog_utilt_spr","frog_uspecial_spr","frog_taunt_spr","frog_bair_spr","frog_walljump","frog_uair_spr","frog_dair_spr","frog_dattack_spr","frog_highjump","frog_smallhurt","frog_nair_spr","frog_walk","frog_land","frog_rollforward","frog_djump","frog_waveland","frog_dspecial_spr","frog_hurtground","frog_run","frog_tech","frog_downhurt","frog_dashstart","frog_bouncehurt","frog_fstrong_spr","frog_dspecial_air_spr","frog_dashstop","frog_startjump","frog_ustrong_spr","frog_spinhurt","frog_fspecial_spr","frog_nspecial_spr","frog_parry","frog_dashturn","frog_dstrong_spr","frog_jab_spr","frog_dtilt_spr","sword_smallhurt","frog_jump","frog_starthighjump","frog_pratfall","frog_idle","frog_nspecial_air_spr","frog_ftilt_spr","frog_crouch","frog_rollbackward","frog_fspecial_air_spr","frog_walkturn","frog_nspecial_summon_spr","frog_fair_spr","frog_idle_collar","frog_walk_collar","frog_champ_taunt_collar","frog_uair_collar","frog_bouncehurt_collar","frog_nair_collar","frog_djump_collar","frog_starthighjump_collar","frog_utilt_collar","frog_bair_collar","frog_spinhurt_collar","frog_run_collar","frog_pool_taunt_collar","frog_bighurt_collar","frog_fspecial_collar","frog_walkturn_collar","frog_dashturn_collar","frog_nspecial_collar","frog_dashstart_collar","frog_highjump_collar","frog_fspecial_air_collar","frog_dair_collar","frog_pratfall_collar","frog_smallhurt_collar","frog_uphurt_collar","frog_nspecial_air_collar","frog_tech_collar","frog_fair_collar","frog_downhurt_collar","frog_taunt_collar","frog_rollbackward_collar","frog_startjump_collar","frog_fstrong_collar","frog_land_collar","frog_dspecial_air_collar","frog_dattack_collar","frog_dstrong_collar","frog_hurtground_collar","frog_ustrong_collar","frog_dtilt_collar","frog_uspecial_collar","frog_dashstop_collar","frog_parry_collar","frog_crouch_collar","frog_rollforward_collar","frog_ftilt_collar","frog_airdodge_collar","frog_walljump_collar","frog_dspecial_collar","frog_jump_collar","frog_waveland_collar","frog_jab_collar","frog_ftilt_hurt","frog_fair_hurt","frog_dtilt_hurt","frog_dspecial_hurt","frog_nspecial_air_hurt","frog_dair_hurt","frog_jab_hurt","frog_nair_hurt","frog_utilt_hurt","frog_uair_hurt","frog_nspecial_summon_hurt","frog_bair_hurt","frog_ustrong_hurt","frog_uspecial_hurt","frog_dattack_hurt","frog_dspecial_air_hurt","frog_dstrong_hurt","frog_fspecial_air_hurt","frog_nspecial_hurt","frog_fspecial_hurt","frog_fstrong_hurt","frog_platform","frog_tongue_air_mask_right","frog_val_move","frog_needle_spr","frog_bubble_absorb_mask","frog_tongue_wall_mask","poison_mark_spr","frog_bubble_spr","frog_bubble_destroy_old","frog_tongue_wall_mask_right","frog_tongue_spr","frog_bubble_destroy","frog_tongue_wall_mask_left","frog_poison_palm_mask","frog_poison_palm","frog_tongue_air_mask_left","frog_small_bubble_spr","frog_tongue_mask_left","frog_bubble_outline_spr","frog_tongue_air_spr","frog_tongue_mask_right","tux_dspecial_air_spr","tux_idle","tux_parry","tux_run","tux_fspecial_air_spr","tux_rollforward","tux_ustrong_spr","tux_rollbackward","tux_spinhurt","tux_uair_spr","tux_bair_spr","tux_starthighjump","tux_jab_spr","tux_highjump","tux_dstrong_spr","tux_utilt_spr","tux_nspecial_air_spr","tux_downhurt","tux_dair_spr","tux_djump","tux_fstrong_spr","tux_dashstop","tux_airdodge","tux_fair_spr","tux_ftilt_spr","tux_uspecial_spr","tux_nspecial_summon_spr","tux_walkturn","tux_hurtground","tux_walk","tux_dashturn","tux_dtilt_spr","tux_dashstart","tux_fspecial_spr","tux_dspecial_spr","tux_bighurt","tux_nair_spr","tux_pratfall","tux_bouncehurt","tux_startjump","tux_dattack_spr","tux_land","tux_nspecial_spr","tux_waveland","tux_uphurt","tux_taunt","tux_walljump","tux_jump","tux_smallhurt","tux_tech","tux_crouch","tux_dstrong_collar","tux_ustrong_collar","tux_fstrong_collar","tux_uspecial_collar","tux_needle_spr","tux_rose","frog_champ_taunt","frog_xmas_hat","pool_bubble_outline_spr","frog_xmas_move","pool_bubble_destroy","frog_xmas_drop","pool_bubble_spr","frog_val_hat","frog_dspecial_air_pool","frog_dspecial_pool","frog_nspecial_air_collar_pool","frog_nspecial_collar_pool","frog_pool_taunt","sword_dashstop","sword_uspecial_spr","sword_run_sword","sword_hurtground","sword_jump","sword_waveland","sword_run","sword_walk","sword_spinhurt","sword_idle","sword_ftilt_spr","sword_jab_spr","sword_walljump","sword_uphurt","sword_tech","sword_land","sword_fstrong_spr","sword_taunt_spr","sword_bair_spr","sword_startjump","sword_bouncehurt","sword_downhurt","sword_fspecial_air_spr","sword_parry","sword_walkturn","sword_dashstart","sword_uspecial_air_spr","sword_fair_spr","sword_dstrong_spr","sword_dair_spr","sword_dtilt_spr","sword_djump","sword_nair_spr","sword_uair_spr","sword_dattack_spr","sword_bighurt","sword_nspecial_spr","sword_nspecial_air_spr","sword_utilt_spr","sword_crouch","sword_ustrong_spr","sword_fspecial_spr","sword_pratfall","sword_dspecial_spr","sword_dspecial_air_spr","sword_dashturn","sword_rollbackward","sword_rollforward","sword_dspecial_shine_air_spr","sword_airdodge","sword_nair_hurt","sword_ftilt_hurt","sword_fstrong_hurt","sword_fair_hurt","sword_dattack_hurt","sword_utilt_hurt","sword_uair_hurt","sword_dair_hurt","sword_ustrong_hurt","sword_dtilt_hurt","sword_dstrong_hurt","sword_dspecial_hurt","sword_jab_hurt","sword_nspecial_hurt","sword_fspecial_hurt","sword_bair_hurt","sword_uspecial_hurt","sword_fspecial_air_sword","sword_dattack_sword","sword_nair_sword","sword_dair_sword","sword_startjump_sword","sword_spinhurt_sword","sword_uair_sword","sword_dspecial_air_big_sword","sword_airdodge_sword","sword_uspecial_sword","sword_dashturn_sword","sword_walkturn_sword","sword_dspecial_shine_air_sword","sword_tech_sword","sword_nspecial_sword","sword_uphurt_sword","sword_dtilt_sword","sword_walk_sword","sword_dspecial_air_sword","sword_dspecial_sword","sword_utilt_sword","sword_djump_sword","sword_hurtground_sword","sword_rollbackward_sword","sword_dspecial_shine_air_big_sword","sword_crouch_sword","sword_waveland_sword","sword_jab_sword","sword_ftilt_sword","sword_jump_sword","sword_smallhurt_sword","sword_taunt_sword","sword_dashstop_sword","sword_dspecial_shine_sword","sword_dstrong_sword","sword_downhurt_sword","sword_idle_sword","sword_parry_sword","sword_dashstart_sword","sword_bighurt_sword","sword_land_sword","sword_walljump_sword","sword_rollforward_sword","sword_fstrong_sword","sword_bair_sword","sword_dspecial_shine_big_sword","sword_genesis_taunt_sword","sword_fspecial_sword_spark","sword_dspecial_big_sword","sword_bouncehurt_sword","sword_fspecial_sword","sword_fair_sword","sword_ustrong_sword","sword_nspecial_air_sword","sword_pratfall_sword","sword_plat","sword_dspecial_shine_vfx","plasma_hit_blue1_spr","plasma_hit_red_big_cross_spr","plasma_consume_top_spr","sword_dspecial_shine_spr","plasma_hit_red_curve_spr","plasma_genesis_consume_top_spr","sword_dsmash_proj","sword_fspecial_spark","sword_fsmash_proj_end","plasma_hit_blue2_spr","sword_usmash_proj","plasma_hit_red_big_x_spr","plasma_consume_bot_old","plasma_consume_top_old","plasma_consume_bot_spr","plasma_rim_effect","plasma_hit_red_x_spr","plasma_bolt_effect","sword_usmash_proj_mask","sword_fsmash_proj_loop","plasma_hit_red_line_spr","plasma_hit_tip_spr","plasma_part_stun_spr","plasma_field_rim","plasma_field_mask","sword_arcade_taunt","sword_arcade_ball_spr","sword_xmas_hat","sword_idle_xmas","sword_arcade_taunt_sword","sword_val_drop","sword_val_move","sword_xmas_move","sword_xmas_drop","sword_hero_taunt","plasma_genesis_consume_bot_spr","sword_genesis_taunt","plasma_consume_bot_hero","sword_confetti_spr","sword_hero_fairy","sword_genesis_taunt_emotes","sword_hero_taunt_sword","sword_fspecial_spark_hero","plasma_consume_top_hero","sword_val_hat","wolf_idle","wolf_val_hat","wolf_val_move","wolf_xmas_hat","wolf_xmas_move","wolf_xmas_drop","wolf_hurtbox","wolf_hurtbox_air","wolf_hitstun_hurtbox","wolf_crouchbox","wolf_crouch","wolf_walk","wolf_walkturn","wolf_run","wolf_dashstart","wolf_dashstop","wolf_dashturn","wolf_startjump","wolf_jump","wolf_djump","wolf_land","wolf_land_long","wolf_walljump","wolf_airdodge_downback","wolf_airdodge_upback","wolf_airdodge_downforward","wolf_airdodge_upforward","wolf_airdodge_forward","wolf_airdodge_back","wolf_airdodge_down","wolf_airdodge_up","wolf_airdodge_neutral","wolf_rollforward","wolf_rollbackward","wolf_parry","wolf_tech","wolf_waveland","wolf_pratfall","wolf_hurtground","wolf_smallhurt","wolf_bighurt","wolf_uphurt","wolf_downhurt","wolf_bouncehurt","wolf_spinhurt","wolf_taunt_spr","wolf_taunt_hurt","wolf_jab_spr_short","wolf_jab_spr","wolf_jab_hurt","wolf_dattack_spr","wolf_dattack_hurt","wolf_ftilt_spr","wolf_ftilt_hurt","wolf_utilt_spr","wolf_utilt_spr_old","wolf_utilt_hurt","wolf_utilt_hurt_old","wolf_dtilt_spr","wolf_dtilt_hurt","wolf_nair_spr","wolf_nair_hurt","wolf_fair_spr","wolf_fair_hurt","wolf_bair_spr","wolf_bair_hurt","wolf_bair_vine","wolf_bair_vine_up","wolf_bair_vine_down","wolf_uair_spr","wolf_uair_hurt","wolf_dair_spr","wolf_dair_hurt","wolf_fstrong_spr","wolf_fstrong_hurt","wolf_fstrong_trunk","wolf_ustrong_spr","wolf_ustrong_hurt","wolf_ustrong_trunk","wolf_dstrong_spr","wolf_dstrong_hurt","wolf_nspecial_spr","wolf_nspecial_hurt","wolf_nspecial_air_hurt","wolf_nspecial_air_spr","wolf_fspecial_spr","wolf_fspecial_hurt","wolf_fspecial_air_spr","wolf_uspecial_spr","wolf_uspecial_hurt","wolf_dspecial_spr","wolf_dspecial_hurt","wolf_dspecial_air_spr","wolf_spike1_spr","wolf_spike2_spr","wolf_spike3_spr","wolf_nspecial_proj","wolf_nspecial_proj_hit","wolf_bud_spr","wolf_bud_low","wolf_bud_death","wolf_grass_particle","wolf_grass_spawn","wolf_grass_idle","wolf_grass_rustle","wolf_grass_die","wolf_grass_rip","wolf_grass_attack","wolf_grass_attack_long","wolf_grass_attack_long_gen","wolf_grass_attack_2","wolf_grass_cooldown","wolf_grass_cooldown_2","wolf_grass_cooldown_3","wolf_plat","wolf_ftilt_petal_spr","wolf_ftilt_petal_mask","wolf_bud_spr_gen","wolf_bud_spr_gen_lit","wolf_bud_low_gen","wolf_bud_low_gen_lit","wolf_bud_death_gen","wolf_grass_spawn_gen","wolf_grass_idle_gen","wolf_grass_rustle_gen","wolf_grass_rip_gen","wolf_grass_attack_gen","wolf_grass_attack_2_gen","wolf_grass_cooldown_gen","wolf_grass_cooldown_2_gen","wolf_grass_cooldown_3_gen","wolf_genesis_taunt","wolf_genesis_loading_bar","wolf_genesis_glitch","wolf_plant_idle","wolf_plant_attack","wolf_plant_wrap","wolf_plant_fade","wolf_plant_hurt","wolf_plant_shoot","wolf_plant_eat","wolf_plant_spawn","wolf_plant_stun","wolf_grass_die_gen","mech_idle","mech_idle_xmas","mech_val_hat","mech_val_move","mech_xmas_hat","mech_xmas_move","mech_xmas_drop","mech_walk","mech_walkturn","mech_crouch","mech_plat","mech_dashstart","mech_run","mech_dashstop","mech_dashturn","mech_startjump","mech_jump","mech_hover","mech_djump","mech_walljump","mech_land","mech_hurtground","mech_smallhurt","mech_bighurt","mech_spinhurt","mech_uphurt","mech_downhurt","mech_bouncehurt","mech_parry","mech_tech","mech_roll_forward","mech_roll_backward","mech_airdodge","mech_pratfall","mech_taunt_spr","mech_jab_spr","mech_jab_hurt","mech_dattack_spr","mech_dattack_hurt","mech_ftilt_spr","mech_ftilt_hurt","mech_utilt_spr","mech_utilt_hurt","mech_utilt_claw_spr","mech_utilt_chain_spr","mech_dtilt_spr","mech_dtilt_hurt","mech_nair_spr","mech_nair_hurt","mech_fair_spr","mech_fair_hurt","mech_bair_spr","mech_bair_hurt","mech_uair_spr","mech_uair_hurt","mech_uair_old_spr","mech_uair_old_hurt","mech_dair_spr","mech_dair_hurt","mech_fstrong_spr","mech_fstrong_hurt","mech_fstrong_explosion","mech_fstrong_steam","mech_ustrong_spr","mech_ustrong_air_spr","mech_ustrong_hurt","mech_ustrong_explosion","mech_ustrong_steam","mech_dstrong_spr","mech_dstrong_hurt","mech_dstrong_explosion","mech_dstrong_steam","mech_nspecial_spr","mech_nspecial_hurt","mech_nspecial_arm","mech_nspecial_muzzle_spr","mech_nspecial_hand","mech_nspecial_backhand","mech_fspecial_spr","mech_fspecial_air_spr","mech_fspecial_hurt","mech_fspecial_rocket","mech_fspecial_rock_wit_trail","mech_fspecial_rocket_trail","mech_fspecial_alex_trail","mech_fspecial_smoke_trail","mech_fspecial_rocket_big_trail","mech_fspecial_alex_big_trail","mech_fspecial_smoke_big_trail","mech_fspecial_rocket_large","mech_uspecial_spr","mech_uspecial_hurt","mech_uspecial_mech","mech_uspecial_mech_air","mech_uspecial_fail","mech_uspecial_fail_air","mech_particle_spr","mech_dspecial_spr","mech_dspecial_hurt","steam_bomb_proj_spr","steam_bomb_spr","steam_bomb_mask","steam_bomb_stuck_spr","steam_bomb_explode_spr","steam_bomb_explode_small","snake_jump","snake_jump_hurt","snake_airdodge","snake_airdodge_hurt","snake_walljump","snake_walljump_hurt","snake_bighurt","snake_uphurt","snake_downhurt","snake_spinhurt","mech_nspecial_explosion_spr","mech_nspecial_explosion_mask","mech_combo_explosion_spr","steam_bubble_spr","steam_bubble_lines_spr","steam_bubble_screen_spr","steam_bubble_screen_lines_spr","mech_steambar_spr","hud_steambar_spr","hud_heatbar_spr","mech_heatbar_spr","vud_bg_spr","vud_steambar_spr","vud_heatbar_spr","snake_dot_spr","mech_arcade_taunt","mech_fstrong_explosion_arc","mech_ustrong_explosion_arc","mech_dstrong_explosion_arc","mech_fspecial_alex_big_trail_arc","mech_fspecial_alex_trail_arc","mech_fspecial_rocket_large_arc","mech_fspecial_rocket_arc","mech_fspecial_smoke_big_trail_arc","mech_fspecial_smoke_trail_arc","mech_nspecial_explosion_spr_arc","mech_combo_explosion_spr_arc","mech_uspecial_mech_air_arc","mech_uspecial_mech_arc","mech_explosion_red_large_arc","mech_explosion_hit_large_arc","mech_fspecial_hit_spr_arc","mech_bomb_hit_spr_arc","mech_fspecial_popped_spr_arc","steam_bomb_explode_arc","mech_nspecial_hand_arc","mech_nspecial_backhand_arc","mech_fspecial_air_arc","mech_fspecial_spr_arc","gus_idle","gus_idle_val","gus_val_hat","gus_val_move","gus_val_drop","gus_idle_xmas","gus_xmas_hat","gus_xmas_move","gus_xmas_drop","gus_plat","gus_crouch_hurt","gus_crouch","gus_crouch_old","gus_walk","gus_walkturn","gus_dashstart","gus_dash","gus_dashstop","gus_dashturn","gus_startjump","gus_jump","gus_jump_flip","gus_jump_twist","gus_jump_lounge","gus_jump_flex","gus_jump_spin","gus_jump_pirouette","gus_djump","gus_land","gus_tech","gus_roll_forward","gus_roll_backward","gus_parry","gus_parry_recovery","gus_parry_jump","gus_pratfall","gus_walljump","gus_airdodge","gus_airdodge_afterimage","gus_waveland","gus_hurtground","gus_smallhurt","gus_bighurt","gus_spinhurt","gus_downhurt","gus_uphurt","gus_bouncehurt","gus_jab_spr","gus_jab_hurt","gus_dattack_spr","gus_dattack_hurt","gus_ftilt_spr","gus_ftilt_hurt","gus_utilt_spr","gus_utilt_hurt","gus_dtilt_spr","gus_dtilt_hurt","gus_nair_spr","gus_nair_hurt","gus_fair_spr","gus_fair_hurt","gus_bair_spr","gus_bair_hurt","gus_uair_spr","gus_uair_hurt","gus_dair_spr","gus_dair_hurt","gus_fstrong_spr","gus_fstrong_air_spr","gus_fstrong_hurt","gus_ustrong_spr","gus_ustrong_air_spr","gus_ustrong_hurt","gus_dstrong_spr","gus_dstrong_air_spr","gus_dstrong_hurt","gus_nspecial_spr","gus_nspecial_air_spr","gus_nspecial_hurt","gus_coin_capture_spr","gus_nspecial2_spr","gus_nspecial2_hurt","mobile_gear_box","mobile_gear_spr","mobile_gear_destroy_spr","gus_nspecial3_spr","gus_nspecial3_air_spr","gus_nspecial3_hurt","gus_ghost_proj_1","gus_ghost_proj_2","gus_ghost_destroy","gus_ghost_proj_mask","gus_nspecial4_spr","gus_nspecial4_hurt","gus_fspecial_spr","gus_fspecial_air_spr","gus_fspecial_hurt","gus_uspecial_spr","gus_uspecial_air_spr","gus_uspecial_hurt","gus_dspecial_spr","gus_dspecial_air_spr","gus_dspecial_hurt","gus_dspecial_cloud_spr","gus_gems_spr","gus_gems_outlines_spr","gus_anchor_spr","gus_fishing_line_spr","gus_shopmenu_spr","gus_shopmenu_spr_RU","gus_shopnum_spr","gus_shopicon_spr","treasure_rock_spr","golden_fish_spr","moneybag_small_spr","moneybag_med_spr","moneybag_large_spr","moneybag_small_rope","moneybag_med_rope","moneybag_large_rope","gus_dirt_block_spr","gus_dirt_block_destroy_spr","buzzsaw_spr","buzzsaw_destroy_spr","gus_shop_icons_spr","gus_shop_cursor_spr","gus_taunt_spr","chester_spr","chester_air_spr","gus_taunt_2_spr","gus_taunt_3_spr","gus_exclamation_spr","drop_spark_spr","gus_nspecial_ichor_spr","gus_nspecial_ichor_air_spr","gus_nspecial_ichor_hurt","gus_dair_diag_spr","cloud_platform_spr","gus_ftilt_abyss_spr","gus_fair_abyss_spr","gus_fair_abyss_hurt","gus_dspecial_abyss_spr","bait_bomb_spr","bait_bomb_explosion_spr","bait_bomb_hit_spr","gus_utilt_abyss_spr","chaos_sphere_spr","chaos_sphere_trail_spr","hfx_large_fg","hfx_large_bg","hfx_direction_fg","hfx_direction_bg","hfx_spin_bg","hfx_spin_fg","hfx_omni_bg","hfx_omni_fg","hfx_sweet_fg","hfx_part_spr","hfx_old_last_frames","hfx_part_fire","hfx_part_fire_ab","hfx_part_ice","hfx_part_ice_ab","hfx_part_leaf","hfx_part_leaf_ab","hfx_part_lightning","hfx_part_lightning_ab","hfx_part_smoke","hfx_part_smoke_ab","hfx_part_rock","hfx_part_rock_ab","hfx_part_waterdark","hfx_part_waterdark_ab","hfx_part_waterlight","hfx_part_waterlight_ab","hfx_part_wind","hfx_part_wind_ab","hfx_part_wing","hfx_part_wing_ab","hfx_ice_large","hfx_leaf_large","hfx_lightning_large","hfx_wind_large","hfx_water_large","hfx_wind_small","hfx_rock_small_bg","hfx_rock_large","hfx_part_plasma_blue","hfx_part_plasma_red","hfx_part_poison","hfx_part_flower","hfx_part_wood","hfx_flower_large","hfx_flower_sweet","hfx_flower_small","hfx_wood_large","hfx_wood_small","hfx_firewhip_large","fx_land_bg","fx_land_fg","fx_djump_bg","fx_djump_small_bg","fx_djump_small_fg","fx_djump_fg","fx_dashstart_bg","fx_dashstart_fg","fx_dashstep_bg","fx_dashstep_fg","fx_skid_bg","fx_skid_fg","fx_dashturn_bg","fx_altdashstep_bg","fx_altdashstep_fg","fx_dashturn_fg","fx_tech_bg","fx_tech_fg","fx_tech_fg_bg","fx_techbigger_fg_fg","fx_techbigger_fg_bg","fx_techbigger_bg","fx_hitsurface_bg","fx_hitsurface_small_bg","fx_hitsurface_small_fg","fx_hitsurface_fg","fx_jump_bg","fx_jump_fg","fx_puff_bg","fx_puff_fg","fx_bigpuff_bg","fx_bigpuff_fg","fx_parry_fg","fx_parry_bg","fx_bigland_bg","fx_bigland_fg","fx_dashstep_new_bg","fx_dashstep_new_fg","fx_fastfall_bg","fx_fastfall_fg","fx_parry_new","fx_parry_new_fg","hfx_big_water","hfx_big_water_light","hfx_big_wing","hfx_big_wing_up","hfx_big_flame","hfx_diralex_bg","fx_gus_bair","fx_gus_flame_small","fx_gus_flame_large","fx_horn_particle","fx_shovel_hit_bg","fx_shovel_hit_fg","fx_horn_hit","fx_gus_bair_part","fx_ko_spark","fx_ko_star","fx_ko_lines","fx_ko_slash","fx_ko_slash_fg","fx_ko_space","fx_ko_circ","afx_rock_large","afx_air_large","afx_shock_large","afx_ice_large","afx_leaf_large","afx_poison_large","afx_water_large","afx_wood_large","st_hit_spr","simp_hit_spr","simp_hit_flash","simp_hit_all_white","simp_hit_only_white","feather_hit_side_spr","smoke_splode_spr","stage_explosion_spr","stage_explosion_abyss","stage_explosion_wspr","feather_hit_up_spr","fire_hit_direct_spr","fire_hit_omni_spr","fire_hit_omni_old_spr","follow_dot_spr","water_dark_omni_spr","water_light_omni_spr","water_both_omni_spr","water_both_side_spr","water_dark_side_spr","water_light_side_spr","water_light_burst_down_spr","poison_hit_small","poison_hit_large","poison_hit_sweet","poison_hit_large_hollow","poison_hit_dstrong_sweet","bubble_sprites","summit_bubble_sprites","xmas_bubble_sprites","summit_snow_parts","dark_pop_spr","light_pop_spr","dark_bubbles_spr","light_bubbles_spr","knock_back_arrow_spr","hitbox_circle_spr","hitbox_circle_semi_spr","hitbox_square_spr","precise_square_spr","hitbox_square_left_spr","hitbox_rounded_rectangle","dust_fly_spr","dust_turn_spr","dust_land_spr","dust_dash_spr","fire_part_spr1","fire_part_spr1_old","fire_part_spr_ab","current_part_spr1","current_part_spr_ab","current_star_spr","burn_circle_spr1","rock_part_spr1","rock_part_spr_ab","tech_side_spr","tech_center_spr","tumble_hitstun_spr","tech_side_white","tech_center_white","di_dot_spr","mech_fspecial_popped_spr","mech_bomb_hit_spr","mech_fspecial_hit_spr","mech_explosion_hit_large","mech_explosion_red_large","mech_nspecial_pop_spr","steam_hit_spr","hfx_part_explode","smoke_tower_spr","smoke_smoke_simple_spr","smoke_fire_back_spr","smoke_fire_front_spr","rising_fire_spr","rising_fire_simple2_spr","rising_fire_col_spr","smoke_mountains_spr","smoke_mountains_glow_spr","smoke_embers_spr","smoke_flames_r_spr","smoke_flames_l_spr","smoke_flames_close_spr","air_switch2_spr","air_spring_spr","air_ground_spr","air_ground_clean_spr","air_ground_prop_spr","air_platform_spr","lever_left_spr","lever_right_spr","air_flag_spr","air_speed_lines_spr","air_spring_neutral_spr","air_spring_left_spr","air_spring_right_spr","air_smallship_spr","air_tinyship_spr","rockwall_support_spr","rockwall_pillar_spr","rockwall_trees_spr","rockwall_trees_base_spr","rockwall_pillar_pieces_spr","fire_bg_spr","fire_bg_base_spr","fire_ground_spr","fire_ground_base_spr","fire_clean_ground_spr","fire_clean_ground_base_spr","fire_clean_old","fire_clean_base_old","water_pipe_fire_spr","water_pipe_fire_mask","water_wheel_plat_spr","water_wheel_inside_cross_spr","water_stage_flat_spr","water_stage_clean_spr","water_pipe_spr","water_pipe_mask_spr","water_sink_spr","water_stage_with_pipes_spr","water_stage_with_sinks_spr","water_bg_land_spr","water_wave1_spr","water_wave1a_spr","water_wave1_r1_spr","water_wave1_r2_spr","water_wave2_spr","water_wave3_spr","water_wave4_spr","water_fg_wave_spr","water_bird1_spr","water_bird2_spr","tree_wisp_big","tree_green_wisp_big","tree_red_wisp_big","tree_wisp_small","tree_green_wisp_small","tree_red_wisp_small","tree_plant_eat_spr","tree_plant_mask","tree_plant_up_spr","tree_vine_eat_spr","tree_vine_up_spr","tree_sign_spr","holy_plants_idle","holy_plants_left","holy_plants_warn_left1","holy_plants_right","holy_plants_warn_idle1","holy_plants_warn_idle2","holy_law_appear","holy_law_text","holy_law_long_text","holy_law_long_text1","holy_law_white_text","holy_law_white_text1","holy_parry_warn","holy_blank_text","holy_blank_text_new","holy_yellow_warn","holy_lightning_spr","holy_guy_walk","holy_guy_fall","holy_head_part","holy_law_part","holy_bug_spr","holy_bug_turn_spr","holy_bug_warn_left","holy_bug_warn_right","holy_bug_turn_warn_left","holy_bug_turn_warn_right","holy_guy_walk_warn","immune_part_spr","abyss_dust_5a","abyss_dust_5b","abyss_dust_5c","abyss_dust_5d","abyss_dust_5e","abyss_dust_5f","abyss_dust_p1a","abyss_dust_p1b","abyss_dust_p2a","abyss_dust_p2b","abyss_dust_p3a","abyss_dust_p3b","abyss_dust_p4a","abyss_dust_p4b","abyss_dust_p5a","abyss_dust_p5b","abyss_dust_p6a","abyss_dust_p6b","abyss_platform_spr","abyss_trans_spr","mount_ground_spr","mount_plat_spr","mount_cloud_2a","mount_cloud_2b","mount_plat_1","mount_plat_2","mount_plat_3","mount_plat_4","mount_plat_charge_1","mount_plat_charge_2","mount_plat_charge_3","mount_plat_charge_4","mount_lightning_1","mount_lightning_2","mount_lightning_3","mount_lightning_4","mount_lightning_tile","ice_chain_top_spr","ice_chain_loop_spr","ice_wall_spr","ice_wall_parts_spr","ice_water_fg_spr","ice_water_bg_spr","ice_water_bbg_spr","ori_stage_col_spr","ori_owl_spr","ori_owl2_spr","ori_tree_spr","ori_tree_base_spr","ori_platform_spr","ori_platform_base_spr","ori_dark_platform_spr","ori_dark_platform_base_spr","ori_safezone_spr","ori_safezone_gumo_spr","gumo_log_spr","log_plat_spr","gumo_spr","gumo_idle_blue_spr","gumo_idle_spr","gumo_log_move_spr","gumo_log_move_blue_spr","CEO_crowd_spr","CEO_crowd_spr_a","CEO_kragg_spr","CEO_score_lines","CEO_overlay_spr","CEO_score_text","CEO_logo_spr","CEO_logo_spr_a","CEO_score_bg","CEO_wrastor_spr","plasma_sign_kingpin_spr","plasma_sign_shoe_spr","plasma_sign_green_spr","plasma_sign_eye_spr","plasma_sign_eye_text_spr","plasma_sign_pattern_spr","plasma_sign_pink_spr","plasma_sign_big_spr","plasma_window_ac2a_spr","plasma_window_ac2b_spr","plasma_window_ac3a_spr","plasma_window_ac3b_spr","plasma_window_ac3c_spr","plasma_window_ac3d_spr","plasma_window_ac4_spr","plasma_window_char_spr","plasma_tower_spr","plasma_tower_light_spr","plasma_loxobot_spr","plasma_car_spr","plasma_car_road_spr","plasma_cloud1_spr","plasma_city_spr","plasma_cloud2_spr","plasma_glow_spr","plasma_clean_ground_spr","plasma_neon_spr","plasma_game_spr","plasma_riva_spr","plasma_screen_corner_spr","plasma_screen_shadow_spr","plasma_screen_beam_spr","plasma_screen_scanlines_spr","plasma_screen_image_spr","plasma_screen_alert_spr","plasma_screen_alert_anim_spr","plasma_screen_num_spr","plasma_screen_char_spr","poison_bg3_spr","poison_bg2_spr","poison_bg1_spr","poison_bg_water_spr","poison_bg_plat_spr","poison_bg_cloth_spr","poison_bg_cloth2_spr","poison_bg_mist_spr","poison_bg_shade_spr","poison_bg_rays_spr","poison_bg_pool_spr","poison_bg_stream_spr","grass_bg0","grass_bg1","grass_bg_c","grass_bg2","grass_bg3","grass_ground_beast","grass_ground","grass_bulb","grass_bulb_mask","grass_creature_glow","grass_creature_base","steam_ground_front","steam_ground","steam_ground_side_l","steam_ground_side_r","steam_bg1","steam_bg2","steam_bg3","steam_bg4","steam_bg5","steam_bg6","steam_bg6_sun","steam_grad","steam_plat1","steam_plat1_window_l1","steam_plat1_window_l2","steam_plat1_window_r1","steam_plat1_window_r2","steam_plat1_flyaway","steam_plat2","steam_plat2_back","steam_plat2_spinner","steam_plat2_boxes","steam_plat1_mask","steam_plat1_mask_a","steam_plat2_mask","steam_plat2_hurtbox","steam_box_thrown","steam_topleft_open","steam_topleft_nobox","steam_topleft_getbox","steam_topleft_givebox","steam_topright_open","steam_topright_nobox","steam_topright_getbox","steam_topright_givebox","steam_botleft_open","steam_botleft_loop","steam_botright_open","steam_botright_loop","steam_box_part_small","steam_box_part_med","guss_color","guss_platforms_behind","guss_platforms_tree","guss_platforms","guss_platforms_under","guss_platforms_branch","guss_branch_mask","guss_trees","guss_water_color","guss_water_fade","guss_water1","guss_water2","guss_water3","guss_water3a","guss_water3b","guss_bubbles","guss_shrubz1","guss_shrubz2","guss_shrubz_side","guss_shrubz_back","guss_lantern","guss_lantern_s","guss_splash_spr","troupple_idle_spr","troupple_pause_spr","troupple_dance1_spr","troupple_dance2_spr","troupple_dance3_spr","troupple_dance4_spr","troupple_fish_spr","gusto_color","gusto_platforms","sfront_ground_bg","cavern_ground","cavern_platform","custom_temp_bg1","custom_temp_bg2","custom_temp_bg3","custom_temp_ground","custom_temp_fg1","custom_temp_fg2","custom_temp_box","custom_temp_big","hud_black_pixel","hud_black_gradient","hud_playerbg_wspr","hud_playerbg_xp_spr","hud_select_spr","hud_alt_spr","hud_select_spr_hurt","hud_alt_spr_hurt","hud_life_spr","hud_hasjump_spr","hud_game_spr","hud_game_spr_RU","hud_go_spr","hud_go_spr_RU","hud_paused_top_spr","hud_paused_bottom_spr","hud_paused_rightblade_spr","hud_paused_leftblade_spr","hud_paused_topblade_spr","hud_paused_old","triangle_spr","ell_triangle_spr","offscreen_cloud_spr","offscreen_char_spr","offscreen_alt_spr","offscreen_rag_spr","offscreen_bg_spr","offscreen_cloud_bg_spr","input_display_spr","vs_bg_spr","result_press_start_spr","result_save_replay_spr","result_bg_spr","result_char_spr","result_button_spr","trophy_victory_spr","trophy_defeat_spr","trophy_base_spr","trophy_outline_spr","large_portraits_spr","large_alt_spr","large_ragnir_spr","result_char_border_spr","result_white_flash_spr","result_place_spr","result_place_spr_RU","result_ready_arrow_spr","result_box_spr","result_box_spr_RU","large_medals_spr","medium_medals_spr","small_medals_spr","charboxes_spr","charboxes_ranked_spr","charboxes_ranked_locked_spr","charboxes_locked_spr","charboxes_wide_spr","randbox_spr","custombox_spr","charboxes_prog_locked_spr","charboxes_prog_locked_small_spr","rand_select_spr","cat_charbox_dlc_locked","charboxes_highlight_old","charbox_high_old","randombox_old","middlebar_spr","header_spr","backbutton_spr","back_b_icon","ready_bar_spr","back_b_spr","playerbg_pieces_spr","playerbgbig_spr","playerbg_chars_spr","playerbg_alt_spr","playerbg_chars_locked_spr","playerbg_chars_old_spr","playerbg_color_spr","playersettingbut_spr","net_rematch_but","optionsbut_spr","teamsettingbut_spr","team_but_spr","team_but_spr_RU","teamattack_but_spr","stock_up_spr","stock_down_spr","winsicon_spr","winsicon_small_spr","paxcontrols_spr","e3controls_spr","stockbar_spr_old2","stock_bar_old","bottombar_spr","option_controls_spr","option_controls_spr_RU","option_onoff_spr","option_onoff_spr_RU","info_bg_spr","close_but_spr","info_but_spr","cust_icon_spr","options_but_spr","steam_chat_but","profile_but_spr","steamprof_but_spr","cont_buttons_spr","custom_controls_icons","sensitivity_spr","sensitivity_preview_spr","custom_controls_box_spr","page_but_text_spr","info_page_but_spr","cont_small_but_spr","cont_small_but_spr_RU","cont_arrow_but_spr","grayed_cont_arrow_but_spr","cont_page_but_spr","cont_set_spr","profile_page_but_spr","info_page_but_blank","prof_comp_but_spr","prof_incomp_but_spr","profile_name_but_spr","profile_name_form_spr","profile_letter_double_spr","profile_backspace_spr","profile_letter_but_spr","cs_playercursor_spr","cs_playerpuck_spr","cs_playerbg_spr","random_box_spr","random_box_smaller_spr","rand_select_smaller_spr","popup_ok_but_spr","prem_skin_spr","gamepad_menu_buttons_spr","playtest_but_spr","css_bg_overlay_spr","css_music_but_spr","css_music2_but_spr","css_music_ready_but_spr","css_music2_ready_but_spr","spr_star_banner","spr_ranked_star","spr_ranked_part","spr_ranked_loc_white","spr_null_winrate","spr_ranked_winstreak_red_outside","spr_ranked_winstreak_blue","spr_ranked_winstreak_red","spr_ranked_winstreak_blue_outside","spr_winstreak_banner_blue","spr_winstreak_banner_red","spr_character_star","spr_4p_outline","spr_4p_box","spr_4p_status","spr_4p_search_anim","spr_4p_plus_btn","spr_4p_search_plus_btn","spr_4p_cancel_btn","spr_spectate_but","spr_spectator_box","ss_boxchoice_spr","ss_box_outline_spr","ss_stage_locked_spr","ss_premium_locked","ss_counterpick_locked","ss_lock_icons_spr","ss_locks_spr","stage_skin_icons_spr","stage_skin_icons2_spr","stage_skin_cont_spr","stage_skin_anim_spr","ss_stage_unavailable","stage_bigchoices_box_spr","stage_bigchoices_spr","stage_clean_big_spr","stage_clean_big_alt_spr","stage_choiceseries_spr","stage_choicecontainer_spr","ss_stagebox_old","stage_backbut_spr","stage_header_spr","stage_name_1_spr","stage_pad_spr","music_but_spr","music_but_spr_RU","music_but_thinner","hazard_but_spr","stage_mode_but","stage_mode_but_RU","music_but_yellow_spr","dlc_stage_but_spr","dlc_stage_but_mask","dlc_stage_icon_spr","df_logo_spr","second_splash_spr","title_volcano_base_bg","title_volcano_bg","title_volcano_water_bg","title_volcano2_bg","title_cliff_base_bg","title_cliff_bg","title_clouds1_bg","title_cloudsh_bg","title_clouds2_bg","title_chars_bg","title_rocks_fg","roa_logo_half_spr","white_logo_half_spr","title_start_spr","title_start_spr_LOC","roa_logo_spr","title_tentacles_anim","title_tentacles_ground","title_tentacles_ground_hurt","title_volcano_pink","title_volcano_pink_base","title_volcano2_blue","title_volcano2_blue_water","title_volcano2_blue_base","title_cliff_blue","title_cliff_blue_base","title_cliff_pink","title_cliff_pink_base","title_shadow_pink","title_clouds1_blue","title_clouds1_pink","title_cloudsh_blue","title_cloudsh_pink","title_clouds2_blue","title_clouds2_pink","title_clouds2_pink_light","connecting_spr","tiny_connecting_spr","net_ready_spr","net_disc_spr","connect_circ_spr","connect_tri_spr","devmode_but_spr","teams_but_spr","turbomode_but_spr","mmcoin_but_spr","randstage_but_spr","sendstock_but_spr","abyss_mode_but_spr","current_region_spr","regions_bordered_spr","regions_popup_bg","regions_popup_spr","regions_save_but_spr","ranked_icon_spr","ranked_short_spr","ping_icon_spr","rematch_icon_spr","net_stage_strike_spr","found_pboxhang_spr","ping_spr","ranked_pboxhang_spr","ranked_acc_but_spr","player_name_bar_spr","ranked_player_name_bar_spr","ranked_player_name_bar_bak","player_name_bar_bak","player_icons_spr","player_icons_bg_spr","player_icon_but_spr","player_icon_page_spr","player_pet_but_spr","icon_lock_info","ranked_tier_icon","emote_icon_spr","emote_icon_alt_spr","ranked_topbar_badges","ranked_topbar_badges_shorter","spr_casual_filters","spr_filter_check","spr_casual_button","spr_casual_connecting","leaderboard_char_icons_spr","spr_eye_icon","random_but_spr","abyss_bomb_spr","abyss_bomb_intro_spr","abyss_bomb_hurt","abyss_bomb_death_spr","abyss_bomb_explode_spr","abyss_bomb_explosion_spr","abyss_bomb_explosion_mask","bomb_part_spr","abyss_seed_spr","abyss_seed_activate_spr","abyss_seed_loop_spr","abyss_seed_explosion_spr","abyss_seed_explosion_mask","abyss_root_spr","abyss_root_death_spr","abyss_armor_part_spr","target_bg_spr","target_danger_spr","target_death_spr","target_debuff_spr","target_part_spr","target_skull_spr","target_spr_1","target_spr_2","target_spr_3","abyss_hazard_spr","abyss_hazard_mask","abyss_portal_entry_spr","abyss_portal_exit_spr","abyss_portal_pulse_spr","abyss_portal_spr","big_bubble_spr","bird_wrap_spr","check_but_spr","cpu_lvl_down_spr","cpu_lvl_spr","cpu_lvl_up_spr","game_count_spr","no_spr","rune_but_spr_old","rune_but_spr","rune_equip_but_spr","rune_icons_spr","rune_icons_mask","rune_legend_spr","smoke_wrap_spr","ss_stage_strike_spr","stockbar_spr","abyss_bottom_counter_spr","wave_complete_spr","wave_complete_spr_RU","abyss_pinata_spawn_bak","abyss_pinata_spawn_spr","abyss_capture_point_spr","abyss_capture_point_mask","abyss_capture_center_spr","abyss_explosion_shine_spr","abyss_boss_gradient_spr","abyss_boss_shield_spr","abyss_numbers_left_spr","mastery_numbers_left_spr","abyss_numbers_right_spr","mastery_numbers_right_spr","abyss_border_top_right","abyss_border_top_left","abyss_border_bottom_right","abyss_border_bottom_left","abyss_border_ori","abyss_border_gus","abyss_bar_bottom_right_spr","abyss_bar_top_right_spr","abyss_bar_top_left_spr","abyss_bar_bottom_left_spr","abyss_bar_xp_spr","skip_minus_but_spr","skip_bg_spr","skip_plus_but_spr","abyss_blob_spr","abyss_floor_lava_spr","abyss_floor_hit_spr","abyss_xp_idle_spr","abyss_xp_spawn_spr","abyss_hp_idle_spr","abyss_hp_spawn_spr","obelisk_spawn_spr","obelisk_idle_spr","obelisk_mask_spr","obelisk_runes_spr","obelisk_death_spr","obelisk_particles_spr","obelisk_cannon_spr","obelisk_cannon_mask","map_land_spr","map_bg_spr","map_wave_spr","map_barrier_spr","map_cursor_spr","map_sidebar_spr","map_compass_spr","map_char_icons_spr","story_panels_spr","story_panels_spr2","story_vs_icons_spr","story_vs_spr","cc_bottomBlade_spr","cc_charPortraits_spr","cc_charPortraits_old_spr","cc_charPortraitsW_spr","cc_charSprites_spr","cc_colorNumber_spr","cc_LB_spr","cc_RB_spr","cc_middleBlade_spr","cc_revertButton_spr","cc_saveButton_spr","cc_codeButton_spr","cc_sectionBar_spr","cc_yesNoBox_spr","main_menu_but_spr","main_menu_lr_spr","main_menu_info_icon","main_menu_bg_spr","topbar_spr","mm_news_spr","stats_arrow_spr","stats_grid_spr","stats_all_spr","lead_self_bg","lead_fav_char_spr","lead_fav_alt_spr","lead_fav_no_change_spr","abyss_leader_select_spr","lead_grey_spr","lead_stats_bg","lead_abyss_top_spr","lead_stages_bg","lead_fav_bg","lead_row_spr","lead_arrow_spr","lead_table_bg","sound_icons_spr","menu_clock_bg_spr","mm_water_gray","mm_fire_gray","mm_earth_gray","mm_title_gray","mm_air_gray","mm_air_fg_clouds","saving_icon_spr","saving_icon_bak_spr","coin_portal_bg","coin_portal_fg","coin_spin_spr","coin_spin_black_outline","coin_still_spr","guide_idle_spr","guide_parry_spr","guide_mouth_spr","tut_glow_src","tut_glow_p","tut_glow_r","tut_glow_e","tut_diagram_appear_spr","tut_slides","tut_slides_RU","tut_textbox","tut_textbox_next","joystick_cardinal_spr","joystick_diagonal_spr","guide_big_attack","guide_big_attack_quick","DI_arrow_spr","joystick_spin_spr","guide_proj_spr","guide_laser_spr","guide_laser_h_spr","guide_laser_mask","tut_spikes_spr","tut_timed_block_spr","tut_joystick_spr","tut_bg_tile_spr","boss_eye_idle_spr","boss_eye_mask_spr","boss_eye_idle_lid_spr","boss_eye_wing_spr","boss_eye_strain_spr","boss_eye_strain_lid_spr","boss_eye_stunned_spr","boss_eye_hurt_spr","boss_eye_dead_spr","boss_eye_pupil_spr","boss_eye_pupil_firing_spr","final_cannon_spr","final_cannon_mask","final_cannon_charge_spr","stem_capsule","boss_stocks_spr","boss_stocks_pink","boss_stocks_jump_spr","boss_stocks_jump_pink","boss_stage_idle_spr","boss_stage_pulse_spr","boss_rocks_idle_spr","boss_rocks_idle_pink","boss_stage_idle_pink","boss_stage_hurt_spr","boss_rocks_hurt_spr","boss_rocks_hurt_pink","boss_stage_hurt_pink","boss_hp_idle_spr","boss_hp_hurt_spr","boss_hp_spr","boss_proj_spr","boss_proj_hit_spr","boss_laser_spr","boss_laser_mask_spr","boss_blackhole_spawn_spr","boss_blackhole_idle_spr","boss_blackhole_particles_spr","boss_blackhole_die_spr","boss_big_proj_spr","boss_big_proj_explode_spr","boss_big_proj_explode_mask","boss_timed_explosion_notify_spr","boss_timed_explosion_spr","boss_timed_explosion_mask","exclamation_spr","boss_platform_spr","boss_platform_eye_spr","replay_window_spr","replay_info_spr","replay_star_icon","popup_text_spr","cc_saveBox_spr","cc_revertBox_spr","yes_but_spr","no_but_spr","pop_up_load_spr","popup_large_spr","popup_image_spr","popup_mm_leftright_spr","popup_mm_coin","popup_mm_stacks_spr","popup_money_large_spr","popup_money_small","new_fire_ground_bg","new_fire_sky_bg","new_fire_sky_low_bg","top_bar_bg","stage_name_bg","stock_bar_bg","air_fg_clouds","air_bg_clouds1","air_bg_clouds2","air_bg_clouds3","air_bg_moon","wall_piece_tile_bg","earthbg_sky","earthbg_treeline","earthbg_ground","earthbg_cliffs","earthbg_clean","water_sky_bg1","water_clouds_bg1","water_clouds_bg2","forest_bg1","forest_bg2","forest_bg3","forest_fg","forest_fg_large","forest_fg_ground","forest_bg_bak","holy_sky_bg","holy_clouds_bg1","holy_clouds_bg2","holy_clouds_fg","holy_clouds_fg2","holy_tower_ground_bg1","holy_tower_ground_bg2","holy_tower_door_bg","holy_tower_color_bg","holy_tower_gradient_bg","tower_bg_temp","tower_warn_walls_bg","tut_bg","tut_bg2","tut_bg3","tut_tile_glow","tut_tiles","milestones_bg","smoke_sky_bg","smoke_mountains_bg","smoke_moon_bg","smoke_fg","smoke_fg_glow","smoke_left_building_fg","smoke_right_building_fg","smoke_back_right_buildings_bg","smoke_mid_right_buildings_bg","smoke_mid_left_buildings_bg","smoke_village_close_bg","smoke_village_close2_bg","smoke_village_mid_bg","smoke_village_far_bg","ori_sky_bg","ori_mountains_bg","ori_tree_bg","ori_fog1_bg","ori_fog2_bg","ori_fog3_bg","ori_fog1_bg_simple","ori_fog2_bg_simple","ori_fog3_bg_simple","ori_ground1_bg","ori_ground2_bg","ori_ground_fg","ori_dark_sky_bg","ori_dark_mountains_bg","ori_dark_tree_bg","ori_dark_ground1_bg","ori_dark_ground2_bg","boss_level_stage_bg","abyss_bg_1a_small","abyss_bg_1a","abyss_bg_1b","abyss_bg_1c","abyss_bg_1d","abyss_bg_2a","abyss_bg_2b","abyss_bg_2c","abyss_bg_2d","abyss_bg_2e","abyss_bg_2f","abyss_bg_2g","abyss_bg_2h","abyss_bg_2i","abyss_bg_2j","abyss_bg_2k","abyss_bg_2l","abyss_bg_2m","abyss_bg_3a","abyss_bg_3b","abyss_bg_3c","abyss_bg_3d","abyss_bg_3e","abyss_bg_4a","abyss_bg_4b","abyss_bg_4c","abyss_bg_4d","abyss_bg_4e","abyss_bg_4f","abyss_bg_4g","abyss_bg_4h","abyss_bg_4i","abyss_bg_4j","abyss_bg_4k","abyss_bg_5a","abyss_bg_5b","abyss_bg_5c","abyss_bg_5d","abyss_bg_5e","abyss_bg_5f","abyss_bg_5","abyss_bg_4","abyss_bg_3","abyss_bg_2","abyss_bg_1","abyss_skylight","mount_sky_bg","mount_cloud_4","mount_cloud_3","mount_bg_mountains","mount_stage_bg","mount_stage_fg","mount_cloud_1a","mount_cloud_1b","ice_sky_bg","ice_clouds","ice_mountains","ice_water_fg","ice_water_bg","ice_water_bbg","ice_gate_bg","ice_gate_bg2","ice_main_stage","black_tile64x64","lightblue_tile64x46","screens_bg","screens_mg","railings_bg","rafters_bg","ring_bg","railings_bg_a","screens_mg_a","screens_bg_a","ring_bg_a","plasma_sky_bg","spr_whitepixel","spr_nothing","spr_font_damagenumbers","spr_font_damagenumbers2","spr_font_fName","spr_font_roaMBL","spr_font_round","spr_font_roaLBL","spr_font_med","spr_chat_message_box","spr_chat_notice_box","spr_chat_select","spr_chat_border","spr_chat_scrollbar","spr_chat_mode_btn","spr_chat_scroll_btn","spr_chat_message_field","spr_chat_emoticons","spr_chat_icon_bg","spr_chat_page_arrow","spr_pet_icons","spr_pet_icons_bg","cub_idle","cub_run","cub_taunt","cub_wait","cub_ledge","cub_turn","kraggling_idle","kraggling_run","kraggling_taunt","kraggling_wait","kraggling_ledge","kraggling_turn","sunny_idle","sunny_run","sunny_taunt","sunny_wait","sunny_ledge","sunny_turn","hedge_idle","hedge_run","hedge_taunt","hedge_wait","hedge_ledge","hedge_turn","gator_idle","gator_run","gator_taunt","gator_wait","gator_ledge","gator_turn","sheep_idle","sheep_run","sheep_taunt","sheep_wait","sheep_ledge","sheep_turn","kitty_idle","kitty_run","kitty_taunt","kitty_wait","kitty_ledge","kitty_turn","cannon_idle","cannon_run","cannon_taunt","cannon_wait","cannon_ledge","cannon_turn","dragon_idle","dragon_run","dragon_wait","dragon_taunt","dragon_ledge","dragon_turn","dragon_idle_air","dragon_run_air","dragon_wait_air","dragon_taunt_air","dragon_turn_air","pigeon_idle","pigeon_run","pigeon_taunt","pigeon_wait","pigeon_ledge","pigeon_turn","freya_idle","freya_run","freya_taunt","freya_wait","freya_ledge","freya_turn","sun_idle","sun_run","sun_taunt","sun_wait","sun_turn","spr_loading","spr_custom_select","spr_icon_custom","item_remote_spr","item_invalid_spr","spr_hud_custom","spr_hud_custom_hurt","spr_portrait_custom","spr_large_portrait_custom","lead_fav_char_custom","lead_fav_border_spr","spr_offscreen_custom","spr_pet_custom","spr_workshop_gear","spr_workshop_frame","spr_workshop_frame_ext","sword_dsmash_proj_break","frog_tongue_mask_left_f1","frog_tongue_mask_right_f1","frog_golden_taunt","frog_golden_taunt_collar","goat_hal_hat","goat_hal_move","wall_piece_tile_bg_tileset","tut_tiles_tileset","black_tile64x64_tileset","lightblue_tile64x46_tileset","macros","GAME_START","init_character_globals","init_devmode_globals","init_menu_sfx_globals","init_multiplayer_globals","init_attract_mode","init_custom_colors","init_transitions","move_old_files","init_stat_variables","init_story_mode_variables","init_texture_pages","copy_params","set_char_info","script_create","getOutOfGround","hitstun_ground_collision","hitstun_ceiling_collision","scr_movement","tumble_ground_collision","sandbag_anim","zet_anim","orca_anim","bird_anim","bug_anim","smoke_anim","may_anim","rag_anim","absa_anim","bear_anim","panda_anim","cat_anim","frog_anim","tux_anim","sword_anim","wolf_anim","mech_anim","gus_anim","custom_anim","sandbag_init","zet_init","orca_init","bird_init","bug_init","smoke_init","set_rag_attack_sprites","set_tux_attack_sprites","set_panda_attack_sprites","may_init","absa_init","bear_init","cat_init","frog_init","sword_init","wolf_init","mech_init","gus_init","custom_init","char_animation","init_characters","init_player","controls_intake","clone_controls_intake","set_attack","set_state","hitpause_update","death_update","state_update","state_properties","init_particles","create_particle_sprites","use_ab_particles","preload_character_texture_pages","big","get_overhead_hud_offset","fast_fall_player_scr","drop_player_scr","get_player_spawn_num","create_test_player","init_test_drawing","close_test_drawing","destroy_test_articles","delete_player","delete_test_player","can_pause","get_state_name","get_attack_string","init_controls","local_controls_init","menu_controls_update","all_menu_controls_update","get_stick_sensitivity","get_rstick_xval","get_rstick_xval_direct","get_rstick_yval","get_rstick_yval_direct","check_custom_buttons","no_valid_buttons_down","get_start_down","get_select_down","get_y_down","get_rb_down","get_lb_down","get_rt_down","get_lt_down","get_face_d_down","get_face_r_down","get_face_u_down","get_face_l_down","get_dpad_u_down","get_dpad_l_down","get_dpad_r_down","get_dpad_d_down","set_default_dinput_profiles","set_controller_type","get_controller_type","get_controller_type_direct","draw_custom_controls_icons","set_custom_buttons","set_single_custom_button","remove_duplicate_custom_buttons","is_frame_advance_button","set_rstick_setting","get_stick_max","controller_is_idle","is_unused_dinput_controller","gamepad_in_use","controls_update","pause_controls_update","check_custom_xinput_buttons","xinput_check_button_down","set_custom_buttons_xinput","player_controls_update","set_player_profile","save_profile_controls","create_default_profile","create_new_profile","add_custom_cont","getControllerString","load_keyboard_controls","save_keyboard_controls","load_default_keyboard_controls","is_valid_custom_key","keyboard_controls_accept","keyboard_controls_revert","save_player_profiles","get_key_string","load_random_char_bans","save_random_char_bans","save_char_color","get_custom_key_by_name","set_custom_key_by_name","start_rumble","can_tap_jump","can_strong_attack","pause_menu_controls_update","key_check","key_check_released","key_check_pressed","draw_text_basic","draw_text_tutorial","draw_text_outline_color","draw_white_text_outline","draw_white_text","draw_small_text","draw_med_text","draw_button_scr","draw_button_color","draw_surface_center_rotate_math","draw_surface_center_rotate","draw_text_outline_color_ext","draw_text_outline_color_transformed","draw_tourney_top_bar","draw_input_display","draw_xmas_hats","draw_debug_text","draw_keyboard_key","draw_menu_buttons","init_main_menu_text","update_main_menu_text","set_main_menu_state","change_main_menu_state","get_press_start_text","get_press_select_text","get_control_stick_text","main_menu_accept_scr","main_menu_rb_scr","main_menu_lb_scr","main_menu_back_scr","main_menu_up_scr","main_menu_down_scr","main_menu_left_right_scr","draw_stats","draw_stats_bak","draw_stats_old","update_leaderboard","update_xbox_leaderboard","update_switch_leaderboard","draw_lead_rank","draw_leaderboard","get_profile_num_by_name","draw_main_menu_bg","show_menu_clock","hide_menu_clock","draw_menu_clock","draw_saving_icon","cs_drawCharBox_scr","cs_drawplayerbg_scr","draw_ResultBox","draw_ResultBox_old","create_info_buttons","create_profile_buttons","create_options_buttons","create_controls_buttons","create_chat_buttons","create_menu_colors","draw_ready_bar_scr","are_submenus_closed","close_submenus","create_rune_buttons","create_cpu_lvl_buttons","create_casual_filters","draw_credits_scr","init_credits","init_long_credits","title_screen_draw","title_screen_step","draw_center_bar","start_attract_mode","reset_attract_mode","create_gamepad_buttons","cursor_init","cursor_movement","draw_vs_character","determine_player_ranks","grid_bg_init","grid_bg_draw","grid_bg_end","css_bg_init","css_bg_step","css_bg_draw","css_bg_end","unselect_characters","popup_coins_init","draw_popup_coins","zetter_attacks","zetter_ftilt","zetter_utilt","zetter_taunt","zetter_promo1_taunt","zetter_promo2_taunt","zetter_promo3_taunt","zetter_promo4_taunt","zetter_dattack","zetter_fair","zetter_bair","zetter_dair","zetter_nair","zetter_uair","zetter_jabcombo","zetter_dtilt","zetter_fsmash","zetter_dsmash","zetter_usmash","zetter_fspecial","zetter_uspecial","zetter_dspecial","zetter_nspecial","zet_spec_attack","zetter_ftilt_hit","zetter_utilt_hit","zetter_dtilt_hit","zetter_dattack_hit","zetter_fair_hit","zetter_bair_hit","zetter_dair_hit","zetter_nair_hit","zetter_uair_hit","zetter_jabcombo_hit","zetter_fsmash_hit","zetter_usmash_hit","zetter_dsmash_hit","zetter_fspecial_hit","zetter_nspecial_hit","zetter_uspecial_hit","zetter_dspecial_hit","create_shine_effect","draw_zetter_doll","create_zetter_meteors","orcane_attacks","orcane_jabcombo","orcane_ftilt","orcane_dtilt","orcane_taunt","orcane_promo1_taunt","orcane_promo2a_taunt","orcane_promo2b_taunt","orcane_promo3_taunt","orcane_utilt","orcane_fsmash","orcane_usmash","orcane_dsmash","orcane_fsmash_puddle","orcane_usmash_puddle","orcane_dsmash_puddle","orcane_dattack","orcane_nair","orcane_fair","orcane_bair","orcane_dair","orcane_uair","orcane_fspecial","orcane_fspecial_puddle","orcane_uspecial","orcane_uspecial_grnd","orcane_uspecial_attack","orcane_dspecial","orcane_nspecial","draw_orcane_puddle_pause","orca_has_puddle","orca_spec_attack","orcane_ftilt_hit","orcane_utilt_hit","orcane_dtilt_hit","orcane_dattack_hit","orcane_bair_hit","orcane_dair_hit","orcane_nair_hit","orcane_fair_hit","orcane_uair_hit","orcane_jabcombo_hit","orcane_fsmash_hit","orcane_dsmash_hit","orcane_usmash_hit","orcane_fspecial_hit","orcane_nspecial_hit","orcane_dspecial_hit","orcane_uspecial_attack_hit","orcane_fsmash_pud_hit","orcane_usmash_pud_hit","orcane_dsmash_pud_hit","orcane_fspecial_pud_hit","init_bubble_properties","birdman_attacks","birdman_ftilt","birdman_utilt","birdman_dtilt","birdman_dattack","birdman_fair","birdman_bair","birdman_dair","birdman_dair_drill","birdman_nair","birdman_nair_3","birdman_uair","birdman_jabcombo","birdman_taunt","birdman_promo1_taunt","birdman_promo2_taunt","birdman_promo4_taunt","birdman_fsmash","birdman_dsmash","birdman_usmash","birdman_fspecial","birdman_dspecial","birdman_dspecial_air","birdman_uspecial","birdman_nspecial","bird_spec_attack","bird_speeds","birdman_ftilt_hit","birdman_utilt_hit","birdman_dtilt_hit","birdman_dattack_hit","birdman_fair_hit","birdman_bair_hit","birdman_dair_hit_drill","birdman_dair_hit","birdman_nair_hit","birdman_nair_3_hit","birdman_uair_hit","birdman_jabcombo_hit","birdman_fsmash_hit","birdman_dsmash_hit","birdman_usmash_hit","birdman_fspecial_hit","birdman_nspecial_hit","birdman_uspecial_hit","birdman_dspecial_hit","birdman_dspecial_air_hit","birdnado_draw_bg_scr","birdnado_draw_fg_scr","beetle_attacks","beetle_ftilt","beetle_utilt","beetle_taunt","beetle_promo1_taunt","beetle_promo2_taunt","beetle_promo3_taunt","beetle_promo4a_taunt","beetle_promo4b_taunt","beetle_dattack","beetle_fair","beetle_bair","beetle_dair","beetle_nair","beetle_uair","beetle_jabcombo","beetle_dtilt","beetle_fsmash","beetle_dsmash","beetle_usmash","beetle_fspecial","beetle_fspecial_armor","beetle_uspecial","beetle_dspecial","beetle_dspecial_air","beetle_nspecial","beetle_nspecial_air","beetle_fthrow","beetle_nthrow","beetle_uthrow","beetle_dthrow","bug_spec_attack","create_tiny_rocks","create_big_rock_again","rock_move_for_player","create_pillar_rocks","beetle_ftilt_hit","beetle_utilt_hit","beetle_dtilt_hit","beetle_dattack_hit","beetle_fair_hit","beetle_bair_hit","beetle_dair_hit","beetle_nair_hit","beetle_uair_hit","beetle_jabcombo_hit","beetle_fsmash_hit","beetle_dsmash_hit","beetle_dsmash_hit_old","beetle_usmash_hit","beetle_fspecial_hit","beetle_fspecial_hit_armor","beetle_fspecial_hit_toss","beetle_fspecial_hit_roll","beetle_nspecial_hit","beetle_nspecial_air_hit","beetle_fthrow_hit","beetle_uthrow_hit","beetle_dthrow_hit","beetle_nthrow_hit","beetle_uspecial_hit","beetle_dspecial_hit","beetle_dspecial_air_hit","beetle_taunt_hit","rock_explosion_code","explode_rock_dir","hyena_attacks","hyena_ftilt","hyena_utilt","hyena_taunt","hyena_promo1_taunt","hyena_promo2_taunt","hyena_promo3_taunt","hyena_dattack","hyena_fair","hyena_bair","hyena_dair","hyena_nair","hyena_uair","hyena_jabcombo","hyena_dtilt","hyena_fsmash","hyena_dsmash","hyena_usmash","hyena_fspecial","hyena_uspecial","hyena_uspecial_smoke","hyena_dspecial","hyena_fspecial_command","hyena_dspecial_smoke","hyena_dspecial_clone","hyena_have_clone","hyena_fspecial_clone","hyena_nspecial","hyena_nspecial_smoke","smoke_spec_attack","in_block_or_smoke","hyena_jabcombo_hit","hyena_ftilt_hit","hyena_utilt_hit","hyena_dtilt_hit","hyena_dattack_hit","hyena_nair_hit","hyena_fair_hit","hyena_bair_hit","hyena_dair_hit","hyena_uair_hit","hyena_fsmash_hit","hyena_usmash_hit","hyena_dsmash_hit","hyena_fspecial_hit","hyena_uspecial_hit","hyena_uspecial_smoke_hit","hyena_dspecial_hit","hyena_dspecial_smoke_hit","hyena_fspecial_clone_hit","hyena_nspecial_hit","ferret_attacks","ferret_jabcombo","ferret_ftilt","ferret_dtilt","ferret_utilt","ferret_dattack","ferret_nair","ferret_fair","ferret_bair","ferret_dair","ferret_dair_drill","ferret_uair","ferret_fsmash","ferret_dsmash","ferret_usmash","ferret_nspecial","ferret_nspecial_new","ferret_fspecial","ferret_dspecial","ferret_dspecial_air","ferret_dspecial_air_dive","ferret_uspecial","ferret_uspecial_marked_launch","ferret_uspecial_marked","ferret_taunt","ferret_promo1_taunt","ferret_promo1_taunt_plant","ferret_promo2_taunt","ferret_promo3_taunt","ferret_promo2_taunt_plant","ferret_promo4_taunt","ferret_taunt_plant","ferret_has_mark","ferret_has_plant","find_nearest_marked_player","may_spec_attack","hurtbox_mark_scr","ferret_jabcombo_hit","ferret_ftilt_hit","ferret_utilt_hit","ferret_dtilt_hit","ferret_dattack_hit","ferret_nair_hit","ferret_fair_hit","ferret_bair_hit","ferret_dair_hit","ferret_dair_hit_drill","ferret_uair_hit","ferret_fsmash_hit","ferret_dsmash_hit","ferret_usmash_hit","ferret_nspecial_hit","ferret_fspecial_hit","ferret_dspecial_hit","ferret_dspecial_air_hit","ferret_dspecial_air_hit_dive","ferret_uspecial_hit","create_vine_path","create_plant_attack","absa_attacks","absa_utilt","absa_taunt","absa_promo1_taunt","absa_promo2_taunt","absa_promo3_taunt","absa_ftilt","absa_fair","absa_dattack","absa_bair","absa_dair","absa_nair","absa_uair","absa_dtilt","absa_fsmash","absa_usmash","absa_dsmash","absa_dspecial","absa_dsmash_old","absa_jabcombo","absa_dspecial_old","absa_nspecial","absa_fspecial","absa_nspecial_cloud","absa_fspecial_cloud","absa_uspecial","absa_has_cloud","absa_has_bomb","increment_angle_scr","absa_create_fspecial_burst","absa_burst_shocks","absa_spec_attack","absa_ftilt_hit","absa_dtilt_hit","absa_dattack_hit","absa_utilt_hit","absa_fair_hit","absa_dair_hit","absa_bair_hit","absa_nair_hit","absa_uair_hit","absa_fsmash_hit","absa_dsmash_hit","absa_dsmash_hit_old","absa_jabcombo_hit","absa_usmash_hit","absa_nspecial_hit","absa_nspecial_cloud_hit","absa_uspecial_hit","absa_fspecial_hit","absa_fspecial_cloud_hit","absa_fspecial_cloud_hit_old","absa_dspecial_hit","absa_dspecial_hit_old","surf_draw_absa_line","spr_draw_absa_line","spr_draw_absa_trail","burst_penguins","etalus_attacks","etalus_utilt","etalus_taunt","etalus_promo1_taunt","etalus_promo2_taunt","etalus_promo3_taunt","etalus_ftilt","etalus_dattack","etalus_fair","etalus_fair_part2","etalus_bair","etalus_nair","etalus_dair","etalus_uair","etalus_dtilt","etalus_jabcombo","etalus_fsmash","etalus_fsmash_pud","etalus_fsmash_pud_big","etalus_dsmash","etalus_dsmash_pud","etalus_dsmash_pud_big","etalus_usmash","etalus_usmash_pud","etalus_usmash_pud_big","etalus_fspecial","etalus_uspecial","etalus_nspecial","etalus_dspecial","etalus_spec_attack","etalus_jabcombo_hit","etalus_ftilt_hit","etalus_utilt_hit","etalus_dtilt_hit","etalus_dattack_hit","etalus_fsmash_hit","etalus_fsmash_pud_hit","etalus_dsmash_hit","etalus_dsmash_pud_hit","etalus_usmash_hit","etalus_usmash_pud_hit","etalus_fair_hit","etalus_nair_hit","etalus_uair_hit","etalus_bair_hit","etalus_dair_hit","etalus_dspecial_hit","etalus_nspecial_hit","etalus_uspecial_hit","etalus_fspecial_hit","bear_speeds","etalus_burst_ice_scr","ice_tile_burst_scr","create_ice_puddle","create_tiny_ice_shards","etalus_has_ice","draw_ice_shockwave","draw_panda_tier_list","catman_attacks","catman_jabcombo","catman_ftilt","catman_utilt","catman_dtilt","catman_dattack","catman_nair","catman_fair","catman_bair","catman_dair","catman_uair","catman_fsmash","catman_fsmash_orb","catman_dsmash","catman_dsmash_orb","catman_dsmash_big","catman_usmash","catman_usmash_orb","catman_nspecial","catman_fspecial","catman_dspecial","catman_uspecial","catman_taunt","catman_spec_attack","catman_jabcombo_hit","catman_ftilt_hit","catman_utilt_hit","catman_dtilt_hit","catman_dattack_hit","catman_nair_hit","catman_fair_hit","catman_bair_hit","catman_dair_hit","catman_uair_hit","catman_fsmash_hit","catman_fsmash_orb_hit","catman_dsmash_hit","catman_dsmash_orb_hit","catman_usmash_hit","catman_usmash_orb_hit","catman_nspecial_hit","catman_dspecial_hit","catman_fspecial_hit","catman_uspecial_hit","orb_spirit_flame","orb_charge_flame","create_grenade_explosion","create_lily_proj","create_cloud_proj","create_bashed_bomb_proj","clone_bash_explosion","create_sein_touch_hitbox","frog_attacks","frog_jabcombo","frog_dattack","frog_ftilt","frog_utilt","frog_dtilt","frog_fsmash","frog_usmash","frog_dsmash","frog_nair","frog_fair","frog_bair","frog_uair","frog_dair","frog_nspecial","frog_nspecial_summon","frog_fspecial","frog_uspecial","frog_dspecial","frog_dspecial_air","frog_taunt","frog_promo1_taunt","frog_promo2_taunt","frog_promo3_taunt","frog_promo4_taunt","frog_spec_attack","frog_jabcombo_hit","frog_dattack_hit","frog_ftilt_hit","frog_utilt_hit","frog_dtilt_hit","frog_fsmash_hit","frog_usmash_hit","frog_dsmash_hit","frog_nair_hit","frog_fair_hit","frog_bair_hit","frog_uair_hit","frog_dair_hit","frog_nspecial_hit","frog_fspecial_hit","frog_uspecial_hit","frog_dspecial_hit","frog_dspecial_air_hit","frog_promo3_taunt_hit","update_poison_trail","draw_poison_trail","get_collar_spr","draw_frog_collar","create_tongue_hitbox","burst_poison_bubbles","frog_has_bubble","create_bubble_explosion","frog_fsmash_proj_hit","sword_attacks","sword_taunt","sword_promo1_taunt","sword_promo2_taunt","sword_promo3_taunt","sword_jabcombo","sword_ftilt","sword_utilt","sword_dtilt","sword_dattack","sword_fsmash","sword_usmash","sword_dsmash","sword_nair","sword_fair","sword_bair","sword_uair","sword_dair","sword_nspecial","sword_fspecial","sword_uspecial","sword_dspecial","sword_spec_attack","sword_jabcombo_hit","sword_ftilt_hit","sword_utilt_hit","sword_dtilt_hit","sword_dattack_hit","sword_fsmash_hit","sword_usmash_hit","sword_dsmash_hit","sword_nair_hit","sword_fair_hit","sword_bair_hit","sword_uair_hit","sword_dair_hit","sword_nspecial_hit","sword_fspecial_hit","sword_uspecial_hit","sword_dspecial_hit","draw_plasma_sword","get_sword_spr","draw_hero_fairy","update_hero_fairy","sword_fspecial_dash_hit","sword_dspecial_shine","sword_fstrong_proj","sword_ustrong_proj","sword_dstrong_proj","wolf_attacks","wolf_taunt","wolf_promo1_taunt","wolf_jabcombo","wolf_dattack","wolf_ftilt","wolf_utilt","wolf_dtilt","wolf_fsmash","wolf_usmash","wolf_dsmash","wolf_nair","wolf_fair","wolf_bair","wolf_uair","wolf_dair","wolf_nspecial","wolf_fspecial","wolf_uspecial","wolf_dspecial","wolf_spec_attack","wolf_jabcombo_hit","wolf_dattack_hit","wolf_ftilt_hit","wolf_utilt_hit","wolf_dtilt_hit","wolf_fsmash_hit","wolf_usmash_hit","wolf_dsmash_hit","wolf_nair_hit","wolf_fair_hit","wolf_bair_hit","wolf_uair_hit","wolf_dair_hit","wolf_nspecial_hit","wolf_fspecial_hit","wolf_uspecial_hit","wolf_dspecial_hit","create_vine_ball_hitbox","draw_fstrong_trunk","draw_ustrong_trunk","create_grass_attack_hitbox","create_ftilt_petal_hitbox","draw_wolf_howl","draw_wolf_loading_bar","wolf_make_glitch","wolf_ftilt_spikes","mech_attacks","mech_taunt","mech_jabcombo","mech_dattack","mech_ftilt","mech_utilt","mech_dtilt","mech_fsmash","mech_usmash","mech_dsmash","mech_nair","mech_bair","mech_fair","mech_uair","mech_uair_old","mech_dair","mech_nspecial","mech_fspecial","mech_uspecial","mech_dspecial","mech_spec_attack","mech_jabcombo_hit","mech_dattack_hit","mech_ftilt_hit","mech_utilt_hit","mech_dtilt_hit","mech_fsmash_hit","mech_usmash_hit","mech_dsmash_hit","mech_nair_hit","mech_fair_hit","mech_bair_hit","mech_uair_hit","mech_uair_old_hit","mech_dair_hit","mech_nspecial_hit","mech_fspecial_hit","mech_uspecial_hit","mech_dspecial_hit","mech_steam_bubble_hit","mech_steam_bomb_hit","create_steam_hitbox","create_steam_bomb_hitbox","respawn_steam_bomb","create_elliana_nspecial_explosion","create_mech_uspecial_hitbox","create_claw_hitbox","draw_aiming_arm","mech_promo1_taunt","falloff_steam_bomb","mech_uspecial_landing","gus_attacks","gus_taunt","gus_taunt_2","gus_taunt_3","gus_jabcombo","gus_dattack","gus_ftilt","gus_utilt","gus_dtilt","gus_fsmash","gus_usmash","gus_dsmash","gus_nair","gus_fair","gus_bair","gus_uair","gus_dair","gus_nspecial","gus_nspecial2","gus_nspecial3","gus_nspecial4","gus_fspecial","gus_uspecial","gus_dspecial","gus_spec_attack","gus_nspecial_ichor","gus_fair_abyss","gus_dspecial_abyss","gus_jabcombo_hit","gus_dattack_hit","gus_ftilt_hit","gus_utilt_hit","gus_dtilt_hit","gus_fsmash_hit","gus_usmash_hit","gus_dsmash_hit","gus_nair_hit","gus_fair_hit","gus_bair_hit","gus_uair_hit","gus_dair_hit","gus_nspecial2_hit","gus_nspecial3_hit","gus_nspecial4_hit","gus_fspecial_hit","gus_uspecial_hit","gus_dspecial_hit","gus_taunt_hit","gus_fair_abyss_hit","gus_dspecial_abyss_hit","burst_gems","create_anchor_hitbox","create_mobile_gear_hitbox","create_treasure_rock_hitbox","has_mobile_gear","sandbag_attacks","sand_taunt","sand_jabcombo","sand_dattack","sand_ftilt","sand_utilt","sand_dtilt","sand_fsmash","sand_usmash","sand_dsmash","sand_nair","sand_fair","sand_bair","sand_uair","sand_dair","sand_nspecial","sand_fspecial","sand_uspecial","sand_dspecial","sand_spec_attack","sand_jabcombo_hit","sand_dattack_hit","sand_ftilt_hit","sand_utilt_hit","sand_dtilt_hit","sand_fsmash_hit","sand_usmash_hit","sand_dsmash_hit","sand_nair_hit","sand_fair_hit","sand_bair_hit","sand_uair_hit","sand_dair_hit","sand_nspecial_hit","sand_fspecial_hit","sand_uspecial_hit","sand_dspecial_hit","create_attacks","SSL_Reference","attack_post_window_change","create_hitboxes","destroy_hitboxes","attack_update","attack_start","attack_end","perfect_dodge_scr","perfect_bubble_scr","any_strong_down","create_hit_parts","hit_effect_no_parts","create_hit_effect_scr","hurtbox_collision","take_damage","proj_movement","charging_smash","pillar_hitbox_collision","ice_wall_hitbox_collision","getParryKnockback","trigger_b_reverse","iasa_script","get_hitbox_angle","create_death_block","turbo_update","reset_window_value","reset_hitbox_value","reset_num_hitboxes","reset_attack_value","has_dlc_color","get_burned_colors","update_char_color","update_char_color_async","get_player_rgb","get_player_rgb_no_cpu_ext","old_get_player_rgb","import_colors","get_player_darker_color","zet_color_profiles","orca_color_profiles","bird_color_profiles","bug_color_profiles","smoke_color_profiles","may_color_profiles","absa_color_profiles","etalus_color_profiles","cat_color_profiles","frog_color_profiles","sword_color_profiles","wolf_color_profiles","mech_color_profiles","gus_color_profiles","sand_color_profiles","get_player_rgb_no_cpu","new_version_init","is_valid_color","is_character_unlocked","is_cat_unlocked","is_sword_unlocked","is_frog_unlocked","is_wolf_unlocked","is_mech_unlocked","is_guest2_unlocked","is_cat_hidden","arcade_maypul_color_change","arcade_clairen_color_change","ranked_color_profiles","is_alt_skin","is_gold_skin","get_player_color","init_custom_color_profile","set_color_profile_slot","set_color_profile_slot_range","shader_start","shader_end","is_stage_neutral","getStageName","get_stage_id","get_stage_dest","ss_drawStageBox","ss_init_stage_box","create_pipe_hbox","init_stages","init_stage_camera","init_stage_zet","init_stage_orc","init_stage_wra","init_stage_krg","init_stage_for","init_stage_may","init_stage_may_large","init_stage_toh","init_stage_abs","init_stage_eta","init_stage_boss","init_stage_abyss","init_stage_ori","init_stage_ceo","init_stage_grid","init_stage_cla","init_stage_ran","init_stage_syl","init_stage_syl_1v1","init_stage_ell","init_stage_gus","init_stage_custom","init_stage_custom_load","init_stage_custom_temp","init_stage_gusto","init_stage_training","init_stage_sfront","init_stage_cavern","create_rockwall_rocks","is_gameplay_room","get_blastzone_number","get_blastzone_size_string","create_lightning_hbox","create_owl_hitbox","create_owl_safezone_boxes","get_launched_by_fire","get_stage_song","draw_321","draw_end_game_text","draw_CEO_char_sprite","absa_stage_lightning_hbox","init_stage_changes","draw_holy_law","end_troupple_dance","create_troupple_hitbox","create_troupple","stage_symmetrical","get_stage_data","cc_save_scr","cc_saveTempColors_scr","cc_promptForRevert_scr","cc_promptForSave_scr","cc_changeCharacterAndColor_scr","cc_revert_scr","restrict_colors","unrestrict_colors","init_cc_shader","are_custom_colors_unlocked","second_custom_color_unlocked","get_max_available_colors","generate_color_code","generate_color_code_direct","load_color_from_code","load_color_array","load_opponent_custom_color","load_replay_custom_color","write_replay_data","add_replay_input","translate_replay_input","record_previous_inputs","record_input_changes","should_record_replay","should_save_replay","start_replay_match","replay_get_inputs","replay_controls_update","read_replay_files","older_read_replay_files","older_read_replay_header_data","create_sorted_replay_lists","sort_by_starred","replay_less_than","star_replay","reset_temp_replay_vars","delete_old_replays","delete_old_replays_older","get_replay_index","delete_oldest_unstarred_replay","rename_replay","redescribe_replay","get_description_string","get_cursor_string","make_replay_string","reset_replay_vars","replay_write_custom_data","replay_read_custom_data","init_parts","destroy_parts","init_shader_uniforms","init_shader","init_shockwave_shader","init_ice_shockwave_shader","init_abyss_shockwave_shader","flush_texture_pages","create_killer_hit_effect","ai_controls_reset","ai_update","init_ai","set_ai_attack_buttons","clone_destroy","ai_get_target","ai_chance","clone_input_script","get_tech_direction","ai_recovery_scr","ai_di_scr","ai_sdi_scr","will_die_from_kb","create_random_list","random_func","random_func_2","store_random_char","get_num_banned_chars","NetworkGetGameState","GetNetworkPlayer","NetworkSend","NetworkReceive","NetworkConfirmReceipt","NetworkGetPing","NetworkGetOpponentName","NetworkGetOpponentID","NetworkUpdateConnectionState","NetworkReconnect","NetworkDisconnect","NetworkSoftDisconnect","NetworkHostGame","NetworkJoinGame","NetworkGetInput","NetworkSetInput","NetworkSetInputRange","NetworkGetPlayerInputs","NetworkSetPlayerInputs","NetworkStartGameplay","NetworkSendMessage","NetworkEndGameplay","DrawDebugNetworkingText","NetworkPlayerConnected","NetworkPlayerConnected_commands","NetworkPlayerStage","NetworkNoLongerReady","NetworkParseStartInfo","NetworkSetPlayerData","NetworkSendStartInfo","NetworkPlayerConnect","NetworkIsConnected","NetworkGetError","convert_version_scr","checkID_scr","check_playtester_scr","is_beta_tester","create_beta_testers","NetworkCalculateDC","NetworkEnding","TeamsStartGameplay","TeamsSendStartInfo","TeamsSetPlayerInputsXinput","TeamsParseStartInfo","TeamsSetPlayerData","TeamsSetPlayerInputs","TeamsGetPlayerInputs","TeamsGetInput","get_my_name_color_index","get_name_color","trigger_mm_set","trigger_mm_earn","trigger_mm_dc","NetworkUpdateWins","NetworkSendWinMap","buffer_write_tempgrid","buffer_read_tempgrid","buffer_write_constgrid","buffer_read_constgrid","buffer_write_real_array","buffer_read_real_array","buffer_write_real_array2d","buffer_read_real_array2d","buffer_write_bool_array","buffer_read_bool_array","buffer_write_bool_array2d","buffer_read_bool_array2d","buffer_write_int32_array","buffer_read_int32_array","buffer_write_int32_array2d","buffer_read_int32_array2d","buffer_write_int8_array","buffer_read_int8_array","variable_instance_defget","is_number","dump_self","netd_oPlayer","netd_steam_bubble_obj","netd_ice_obj","neth_oPlayer","neth_oPlayer_init","neth_oPlayer_load","neth_oPlayer_save","neth_oPlayer_dump","neth_steam_bubble_obj","neth_steam_bubble_obj_init","neth_steam_bubble_obj_load","neth_steam_bubble_obj_save","neth_steam_bubble_obj_dump","neth_ice_obj","neth_ice_obj_init","neth_ice_obj_load","neth_ice_obj_save","neth_ice_obj_dump","LoadRollbackState","LoadRollbackStateCb","SaveRollbackState","SaveRollbackStateCb","DumpRollbackState","NetworkCreate","NetworkCreate_io","dp_handle_flow_frame","dp_handle_state_poll","dp_handle_player_departure","dp_handle_lobby_message","dp_handle_lobby_start","dp_handle_lobby_filter","dp_handle_lobby_join_request","dp_handle_lobby_error","dp_handle_flow_state_hash","dp_handle_flow_desync","dp_handle_link_ping","dp_draw_debug","dp_draw_text","steam_gml_api_flags","dp_graph_create","dp_graph_update","dp_graph_update_all","dp_graph_draw","team_ban_stage","ffa_ban_stage","strike_stage","pick_stage","stage_goto","stage_init","handle_ban","handle_pick","handle_tourney_ban","is_player_active","player_find_local","is_player_local","request_send","request_receive","dp_setup","dp_reset_w","dp_custom_init","PerFrameActivity","NetworkAdvanceFrame","AdvanceGameFrame","is_clean_string","add_player_slot","remove_player_slot","send_init_data","dp_set_player_data","draw_4p_top_bar","enable_teams","get_filter_name","lobby_set_filters","lobby_set_elo","lobby_set_ranked_level","trigger_ready","fill_casual_slots","rematch_reset_data","return_to_lobby","get_specs_count","not_afk","is_spectator","sync_init","sync_update","instance_loop","instance_place_sync","with_sync","attack_can_hit_init","attack_can_hit_cleanup","attack_can_hit_set","attack_can_hit_get","attack_grid_init","attack_grid_copy_from","attack_grid_get","attack_grid_get_from","attack_grid_set","hbox_grid_init","hbox_grid_copy_from","hbox_grid_get","hbox_grid_get_from","hbox_grid_set","hbox_grid_add","hbox_grid_mul","tween","ease_backIn","ease_backInOut","ease_backOut","ease_bounceIn","ease_bounceInOut","ease_bounceOut","ease_circIn","ease_circInOut","ease_circOut","ease_cubeIn","ease_cubeInOut","ease_cubeOut","ease_expoIn","ease_expoInOut","ease_expoOut","ease_linear","ease_quadIn","ease_quadInOut","ease_quadOut","ease_quartIn","ease_quartInOut","ease_quartOut","ease_quintIn","ease_quintInOut","ease_quintOut","ease_sineIn","ease_sineInOut","ease_sineOut","INIT_PLATFORM","handle_back_hold_timer","steam_invite_scr","steam_team_invite_scr","steam_accept_scr","steam_match_scr","steam_team_match_scr","steam_ranked_scr","steam_dlc_installed","steam_overlay_active","abyss_init","get_rune_cost","get_rune_price","start_abyss_mode","is_abyss_cpu","get_num_enemies_remaining","get_num_players","get_num_dead_players","start_new_abyss_wave","create_abyss_hazard","spawn_enemy_at_portal","die_from_portal","create_portal","has_abyss_armor","init_abyss_grids","is_rune_equipped","beetle_dspecial_5_hit","create_upward_seed","create_zet_shine","create_burnbox_hitbox","create_smoke_explosion","create_absa_blackhole_hitbox","find_nearest_plant","destroy_abyss_articles","wrastor_multihit_aerials","may_nair_projectiles","set_abyss_platform_layout","create_abyss_root_hitbox","create_seed_explosion","create_abyss_bomb_explosion","draw_equipped_runes","end_abyss_wave","kill_abyss_cpu","abyss_cpu_explode","add_player_xp","hurt_abyss_armor","story_select_array","draw_abyss_leaderboard","update_abyss_leaderboard","update_abyss_leaderboard_pc","update_abyss_leaderboard_xbox","update_abyss_leaderboard_switch","abyss_select_room_start","maypul_shotgun","create_floor_is_lava_hitbox","spawn_abyss_blobs","get_equipped_rune_value","get_left_color","get_left_player","get_left_team","get_right_color","get_right_player","init_tourney_mode","is_game_timer_on","is_holding_restart_combo","restart_match","init_training_mode","training_advance_frame","frame_adv_check_custom_buttons","frame_adv_check_custom_buttons_xinput","frame_adv_get_inputs","frame_adv_set_inputs","frame_adv_set_inputs_xinput","pre_match_post","post_match_post","unlock_absa_scr","saveSteamStat","loadSteamStat","pullSteamVars","load_progression_ini","save_progression_ini","convert_sec_to_string","get_char_prefix","clear_all_achievements_for_testing","short_tag","trigger_achievement","create_coin_visual","lock_characters_off_random","clear_popup_stack","is_achievement_unlocked","ranked_init","calculate_rank_change","create_ranked_trophy_scr","draw_region_scr","draw_icon_text","draw_trophy","draw_player_ping","change_ranked_score","create_ranked_leaderboard","count_ranked_xp","get_winrate_color","recalculate_ranked_dc","calculate_winrate","test_stars","ranked_draw_rewards","trigger_new_ranked_season","star_queue_enqueue","ranked_push_leaderboard","draw_character_stars","popup_message_ok","popup_message_yesno","popup_text_entry","popup_xbox_entry","popup_message_restart_matchmaking","init_dev_mode","reset_dev_mode_values","reset_zet_values","reset_orc_values","reset_wra_values","reset_krg_values","reset_for_values","reset_may_values","reset_abs_values","reset_eta_values","reset_ori_values","reset_ran_values","reset_cla_values","reset_syl_values","reset_ell_values","reset_gus_values","read_zet_values","read_orc_values","read_wra_values","read_krg_values","read_for_values","read_may_values","read_abs_values","read_eta_values","read_ori_values","read_ran_values","read_cla_values","read_syl_values","read_ell_values","read_gus_values","is_dev_mode_active","is_turbo_mode_active","read_non_atk_dev_values","read_dev_mode_attack","reset_dev_mode_attack","save_stats","load_stats","unload_stats","init_tutorial","tutorial_update","add_path_node","start_guide_movement","draw_tutorial_text","increment_success_counter","reset_success_counter","advance_tutorial_inputs","advance_tutorial","advance_tutorial_beg_mov","advance_tutorial_beg_def","advance_tutorial_beg_off","advance_tutorial_int_mov","advance_tutorial_int_def","advance_tutorial_int_off","advance_tutorial_adv_mov","advance_tutorial_adv_def","advance_tutorial_adv_off","advance_tutorial_zet","advance_tutorial_orc","advance_tutorial_wra","advance_tutorial_krg","advance_tutorial_for","advance_tutorial_may","advance_tutorial_abs","advance_tutorial_eta","advance_tutorial_ori","advance_tutorial_ran","advance_tutorial_cla","advance_tutorial_syl","advance_tutorial_ell","advance_tutorial_gus","tut_beg_def_update","tut_beg_off_update","tut_int_mov_update","tut_int_def_update","tut_int_off_update","tut_adv_mov_update","tut_adv_def_update","tut_adv_off_update","tut_zet_update","tut_orc_update","tut_wra_update","tut_krg_update","tut_for_update","tut_may_update","tut_abs_update","tut_eta_update","tut_ori_update","tut_ran_update","tut_cla_update","tut_syl_update","tut_ell_update","tut_gus_update","draw_tutorial_diagram","create_guide_attack","teleport_player","teleport_tut_ai","teleport_guide","create_tut_spike_hitbox","stop_guide_movement","complete_tutorial","draw_tutorial_inputs","handle_tutorial_text","play_mfx","play_mfx_ext","play_sfx","play_sfx_ext","stop_sfx","music_stop_scr","music_change_scr","bgm_game_start","bgm_init","bgm_get_temp_volume","bgm_step_update","bgm_check_open_finished","bgm_is_playing","bgm_apply_stage_volume","bgm_menu_step","bgm_set_gain","bgm_exists","st_init_tracks","st_make_plist","st_play_track","st_set_track_info","st_next_track","st_track_unlocked","st_restore_cur","bgm_start_stage","bgm_start_cutscene","bgm_play","bgm_play_once","bgm_play_fanfare","bgm_play_crossfade","bgm_play_crossfade_full","bgm_stop","bgm_stop_softly","bgm_stop_fanfare","bgm_set_volume","bgm_set_fade","bgm_set_crossfade","bgm_soften","bgm_is_faded_out","start_abyss_gates","boss_eye_start_attack","boss_eye_attack_scr","boss_eye_reset","boss_create_attack","spawn_abyss_fighter","boss_update_stems","boss_input_update","destroy_boss_fighter","create_credits_target","boss_eye_draw_stem","boss_platform_draw_stem","txt_init","txt","gtxt_init","gtxt_on_off","gtxt","draw_sprite_2x","draw_sprite_masked_2x","draw_sprite_scaled","get_anim_frame","set_player_hud_x","array","trace","ini_write_real_str","int_to_byte","byte_to_int","string_padding","string_sanitize","floor2x","do_texture_flush","preload_stageselect_textures","set_screen_size","is_gc_cont","get_button_image","jp_text_wrap","create_playtest_borders","really_real","caro","debug_matrix","string_is_real","PCNetworkCreate","PCLoadProfiles","PCInitReplays","txboxone_get_user_count","txboxone_get_user","txboxone_user_is_signed_in","txboxone_get_activating_user","txboxone_is_suspending","txboxone_set_savedata_user","txboxone_is_constrained","txboxone_suspend","txboxone_fire_event","txboxone_user_for_pad","txboxone_show_account_picker","xbox_set_keyboard_controls","XboxAsyncAccountPickerCheck","XboxAsyncAccountPickerMainMenuCheck","XboxAsyncInviteCheck","XboxLoadAllFiles","XboxLocalRankedSave","XboxProfileSignInCheck","XboxSetPlayerIndex","XboxAsyncSetPlayerIndex","XboxSuspensionConstrainPauseCheck","fix_gamertag","localLoadRankedStats","localSaveRankedStats","map_to_string","XboxNetworkCreate","NewXboxSave","NewXboxTriggerLoad","NewXboxAsyncLoad","XboxLoadProfiles","XboxInitReplays","genLeaderEntries","XboxEventAbyssModeEnd","XboxEventSaveRankedScore","XboxEventMatchCompleted","XboxEventStoryModeEnd","xevent_rankedStarted","xevent_rankedFinished","XboxTriggerRankedStatPull","XboxStatPullAsync","XboxCheckDLC","XboxSetRichPresence","handle_leaderboard_async_xbox","switch_network_create","switch_init","switch_message","switch_find_first_open_account","switch_force_open_account","switch_jujus_match_state_hack","switch_common_data_write","switch_common_data_read","switch_push_common_data","switch_push_leaderboard","switch_push_leaderboard_ranked","switch_push_leaderboard_force","handle_leaderboard_async_switch","switch_matchmaking_randomise_mode","steam_stat_spoof_init","steam_stat_spoof_step","steam_stat_spoof_force_save","steam_stat_spoof_get","steam_stat_spoof_set","steam_stat_spoof_export","steam_stat_spoof_import","steam_stat_spoof_file_save","steam_stat_spoof_file_load","steam_stat_spoof_async_handle_save","steam_stat_spoof_async_handle_load","buffer_encrypt","buffer_decrypt","string_to_buffer","buffer_to_string","buffer_save_replay_data","buffer_save_all","buffer_save_custom_colors","buffer_save_player_profiles","buffer_save_stats","buffer_save_progression","buffer_load_game_start","buffer_load_player_profiles","buffer_game_async","buffer_load_stats","buffer_read_replay_header_data","buffer_read_replay_header_data_light","buffer_start_replay","buffer_load_replay_files","buffer_load_replay_older","buffer_replay_async","draw_story_leaderboard","init_small_leaderboard","init_small_leaderboard_xbox","init_small_leaderboard_switch","update_story_leaderboard","update_story_leaderboard_pc","update_story_leaderboard_xbox","update_story_leaderboard_switch","init_cutscene","start_story_battle_intro","save_story_mode_time","draw_cutscene_text","store_gameplay_vars","restore_gameplay_vars","get_story_stage_name","begin_story_mode","end_of_story_mode_match","end_of_boss_fight","text_pause_filter","cttVideoDraw","cttVideoGetGain","cttVideoPause","cttVideoSeek","cttVideoSetGain","cttVideoStart","cttVideoStop","init_icons","get_icon_image_index","get_icon_list_index","is_icon_unlocked","get_icon_list_size","is_icon_on_sale","get_icon_price","icon_save_unlocks","is_emote_locked","add_background_layer","set_background_pos","draw_rect_col","background_get_height","background_get_width","draw_background_ext","draw_background_part","draw_background_tiled","draw_background_tiled_ext","__background_get","__background_get_element","__background_get_internal","__background_set","__background_set_colour","__background_set_element","__background_set_internal","__init_background","__background_get_colour_element","d3d_set_fog","d3d_transform_add_rotation_z","d3d_transform_add_translation","d3d_transform_set_identity","d3d_transform_stack_pop","d3d_transform_stack_push","__init_d3d","draw_enable_alphablend","draw_set_alpha_test","draw_set_alpha_test_ref_value","draw_set_blend_mode","instance_create","object_get_depth","sound_exists","sound_isplaying","texture_set_interpolation","tile_layer_shift","__view_get","__view_set","__view_set_internal","__init_view","__init_global","__global_object_depths","arcade_elliana_color_change","draw_snake_game","ugc_init","ugc_fetch","ugc_add","ugc_submit","ugc_load_item_data","ugc_get_error_text","ugc_set_current","get_ugc_type_name","ugc_clear_current","ugc_script_call","ugc_sprite_load","ugc_sprite_clear","ugc_get_filename","ugc_list_get","ugc_swap","se_add_tile","se_cleanup","custom_menu_change_page","crop_character_name","read_item_name","handle_item_data","is_custom_article","hit_fx_create","create_hitbox","set_victory_theme","article_create","article_draw","article_movement","article_step","get_gameplay_time","sli_create","sli_step","sli_draw","sli_form_array","sli_sort","chat_init","chat_add","chat_scroll_messages","chat_change_page","chat_clear","draw_chat_icon","sprite_get","sound_get","sprite_change_offset","sprite_change_collision_mask","asset_get","instance_create_v","instance_destroy_v","get_window_value","set_window_value","get_hitbox_value","set_hitbox_value","set_num_hitboxes","get_num_hitboxes","set_attack_value","can_access_object","view_get_wview","view_get_hview","view_get_xview","view_get_yview","pet_init","get_pet_list_size","get_pet_lock_info","get_pet_name","get_pet_bg_color","set_pet","create_pet","pet_save_unlocks","catcherror_init","catcherror_update","sentry_init","sentry_add_breadcrumb","sentry_last_event_id","sentry_capture_message","sentry_capture_exception","sentry_unix_timestamp","sentry_uuid","sentry_uuid4_string","sentry_datetime_string","sentry_system_string","sentry_os_version_string","sentry_os_string","sentry_browser_string","sentry_result_exists","sentry_result_pop","sentry_result_cancel","sentry_error_exists","sentry_error_pop","sentry_macros","change_casual_score","is_character_loading","dp_init","array_hx_iterator_create","array_hx_iterator_has_next","array_hx_iterator_next","dp_array_hx_push","dp_array_hx_copy","dp_mathnf_init","dp_Std_string","dp_Std_parseFloat","dp_Std_parseInt","dp_string_hx_lpad","dp_string_hx_hex","dp_debug_log_inner_hx","dp_debug_log_hx","dp_debug_log_haxe_hx","dp_debug_init_hx","dp_net_adapter_new","dp_net_adapter_create","dp_net_adapter_packet","dp_net_adapters_adp_steam_wrap_create","dp_net_adapters_adp_steam_wrap_host","dp_net_adapters_adp_steam_wrap_join","dp_net_adapters_adp_steam_wrap_packet","dp_net_adapters_adp_steam_wrap_send","dp_net_adapters_adp_steam_wrap_update","dp_net_adapters_adp_steam_wrap_destroy_server","dp_net_adapters_adp_steam_wrap_destroy_socket","dp_array_alloc","dp_func_valid","dp_make_buffer","dp_free_buffer","dp_print_buffer","dp_crc32","dp_crc16","dp_sleep","dp_get_timer","dp_core_random","dp_core_random_set_seed","dp_core_randomize","dp_flow_change_deactivation_mode_hx","dp_flow_reset_hx","dp_flow_close","dp_flow_close_inner_hx","dp_flow_steam_start_hx","dp_flow_start_hx","dp_flow_handle_hash_hx","dp_flow_handle_desyncs_hx","dp_flow_send_states_hx","dp_flow_change_delay_hx","dp_flow_change_delay_post_hx","dp_flow_handle_events_hx","dp_flow_next_hx","dp_flow_can_advance_hx","dp_flow_timeout_players_hx","dp_flow_update_sync_hx","dp_flow_update_hx","dp_event_create","dp_event_update","dp_event_room_start","dp_event_game_end","dp_event_network","dp_event_steam","dp__hook_func_impl__def_call_hx","dp__hook_func1_impl__def_call_hx","dp__hook_func2_impl__def_call_hx","dp__hook_func5_impl__def_call_hx","dp_hub_holepunch_hx","dp_hub_holepunch_ext_hx","dp_hub_find_match","dp_hub_stop_search","dp_hub_get_entry_count","dp_hub_get_entry_uid","dp_hub_get_entry_title","dp_hub_get_entry_url","dp_hub_get_entry_port","dp_hub_get_entry_rtt","dp_hub_get_entry_slots_total","dp_hub_get_entry_slots_taken","dp_hub_refresh_entries","dp_hub_is_loading_entries","dp_hub_ping_entries","dp_hub_join_public","dp_hub_host_public","dp_hub_host_private","dp_hub_host_stop","dp_hub_join_private","dp_hub_update_hx","dp_hub_handle_hx","dp_hub_close","dp_hub_reset_hx","dp_hub_init_hx","dp_hub_link_new_hx","dp_hub_link_ping_hx","dp_lobby_open_hx","dp_lobby_close","dp_lobby_reset_hx","dp_lobby_update_hx","dp_lobby_init_hx","dp_lobby_input_delay_sufficient","dp_lobby_set_input_delay","dp_lobby_get_slot_count","dp_lobby_set_slot_count","dp_lobby_send_message","dp_lobby_send_buffer","dp_lobby_send_buffer_to","dp_lobby_show_invite_overlay","dp_host","dp___host_conf_hx","dp_join","dp_leave","dp_join_hub","dp_start","dp_reset","dp_init_func_hx","dp_net_update_hx","dp_net_join_hx","dp_net_host_hx","dp_net_pre_handle_hx","dp_net_handle_hx","dp_net_reset_hx","dp_net_init_hx","dp_player_get_haxe_hx","dp_player_get_active_players","dp_player_set_count","dp_player_async_enable","dp_player_async_disable","dp_player_reset_hx","dp_player_init_hx","dp_player_new_hx","dp_player_get_is_local","dp_player_get_is_remote","dp_player_destroy_hx","dp_player_destroy_states_hx","dp_player_advance_hx","dp__player_active_player_iterator_new_hx","dp_player_count_total","dp_player_count_active","dp_player_count_local","dp_player_count_remote","dp_player_count_viewed","dp_player_count_uid","dp_player_count_sources","dp_player_find_active","dp_player_find_local","dp_player_find_remote","dp_player_find_viewed","dp_player_find_uid","dp_player_find_source","dp_player_is_empty","dp_player_is_active","dp_player_is_local","dp_player_is_remote","dp_player_is_viewed","dp_player_is_server","dp_player_get_alias","dp_player_set_alias","dp_player_get_uid","dp_player_get_rtt","dp_player_get_mtt","dp_player_get_att","dp_player_get_wait_time","dp_player_get_steam_id","dp_player_drop","dp_player_occupy","dp_player_release","dp_player_swap","dp_player_get_scheme","dp_player_set_scheme","dp_player_get_button_node","dp_player_get_state_count","dp_player_get_state","dp_player_get_seed","dp_player_get_gamepad","dp_player_set_gamepad","dp_get_players","dp_get_is_online","dp_get_is_server","dp_get_is_playing","dp_get_is_connecting","dp_get_delay","dp_set_delay","dp_get_delay_ms","dp_set_delay_ms","dp_set_deactivation_mode","dp_set_pause_physics","dp_copy_path","dp_collections__dictionary_dictionary_impl__get","dp_type_vector__new","dp_flow_flow_act_set_mode_hx","dp_flow_flow_act_update_hx","dp_flow_flow_rollback_handle_hx","dp_flow_state_new_hx","dp_flow_state_destroy_hx","dp_flow_state_save_hx","dp_flow_state_load_hx","dp_axis_value","dp_axis_previous","dp_axis_value_async","dp_axis_previous_async","dp_axis_define","dp_axis_define_async","dp_axis_get_index","dp_axis_get_name","dp_axis_set_name","dp_axis_get_input","dp_axis_set_input","dp_axis_get_node","dp_axis_find","dp_button_check","dp_button_previous","dp_button_pressed","dp_button_released","dp_button_check_async","dp_button_previous_async","dp_button_pressed_async","dp_button_released_async","dp_button_define","dp_button_define_async","dp_button_get_index","dp_button_get_name","dp_button_set_name","dp_button_get_input","dp_button_set_input","dp_button_find","dp_gamepad_get_count","dp_gamepad_is_connected_hx","dp_gamepad_button_hx","dp_gamepad_axis_hx","dp_input_key_get_code","dp_input_key_get_name","dp_input_key_init_hx","dp_keyboard_check_hx","dp_input_adapter_create","dp_input_next_hx","dp_input_update_hx","dp_input_exec","dp_input_define","dp_input_find_buttons","dp_input_init_hx","dp_mouse_get_bt_left","dp_mouse_get_bt_right","dp_mouse_get_bt_middle","dp_mouse_next_hx","dp_mouse_update_hx","dp_pos_value","dp_pos_previous","dp_pos_value_async","dp_pos_previous_async","dp_pos_define","dp_pos_define_async","dp_pos_get_index","dp_pos_get_name","dp_pos_set_name","dp_pos_get_input","dp_pos_set_input","dp_pos_find","dp_replay_record","dp_replay_play","dp_replay_takeover","dp_replay_handle_takeover_hx","dp_replay_set_view","dp_replay_write_next_hx","dp_replay_read_next_hx","dp_replay_reset_hx","dp_scheme_create","dp_scheme_copy","dp_scheme_get_button","dp_scheme_set_button","dp_scheme_get_axis","dp_scheme_set_axis","dp_scheme_get_pos","dp_scheme_set_pos","dp_scheme_get_button_node","dp_scheme_get_axis_node","dp_scheme_get_pos_node","dp_scheme_get_data","dp_scheme_set_data","dp_scheme_write_ini","dp_scheme_read_ini","dp_buffer_count","dp_buffer_id","dp_buffer_size","dp_buffer_send","dp_state_create_ext_hx","dp_state_new_hx","dp_state_init_hx","dp_state_ref_hx","dp_state_deref_hx","dp_state_destroy_hx","dp_state_clear_hx","dp_state_equals_hx","dp_state_clone_hx","dp_state_set_to_hx","dp_state_net_set_hx","dp_state_net_read_hx","dp_state_poll_hx","dp_state_write_hx","dp_state_read_hx","dp_state_get_button","dp_state_set_button","dp_state_get_axis","dp_state_set_axis","dp_state_get_pos","dp_state_set_pos","dp_state_print_hx","dp_input_state_event_leaving_new","dp_input_state_event_owner_change","dp_input_state_event_owner_change_re_new","dp_input_state_event_delay_change","dp_text_get","dp_text_send","dp_input_ast_in_func_def_call1_hx","dp_input_ast_in_func_def_call2_hx","dp_input_ast_in_func_def_call3_hx","dp_input_ast_in_func_def_callx_hx","dp_input_ast_in_func_def_init_hx","dp_input_leaf_in_current_new","dp_input_leaf_in_const","dp_input_leaf_in_ternary","dp_input_leaf_in_key","dp_input_leaf_in_mouse_button","dp_input_leaf_in_mouse_axis","dp_input_leaf_in_joy_button","dp_input_leaf_in_joy_axis","dp_input_leaf_in_unop","dp_input_leaf_in_binop","dp_input_leaf_in_func","dp_input_leaf_in_func1","dp_input_leaf_in_func2","dp_input_leaf_in_func3","dp_input_leaf_in_func_x","dp_input_leaf_equals_hx","dp_input_leaf_contains_hx","dp_input_leaf_print_hx","dp_input_node_exec_leaf_hx","dp_input_node_leaf_uses_gamepad_hx","dp_input_node_leaf_uses_mouse_pos_hx","dp_input_node_create","dp_input_node_get_expr","dp_input_node_set_expr","dp_input_node_exec","dp_input_node_exec_expr","dp_input_node_uses_input","dp_input_node_uses_node","dp_input_node_uses_gamepad","dp_input_node_uses_mouse_pos","dp_input_node_print_hx","dp_input_parse_get_cond","dp_input_parse_next_hx","dp_input_parse_curr_hx","dp_input_parse_mark_hx","dp_input_parse_get_error","dp_input_parse_set_error_hx","dp_input_parse_value_hx","dp_input_parse_values_hx","dp_input_parse_input_hx","dp_input_parse_init_hx","dp_net_client_handle_error_hx","dp_net_client_handle_hx","dp_net_client_accept_hx","dp_link_iterator_hx","dp_link_get_raw_list_hx","dp_link_send_hx","dp_link_handle_hx","dp_link_add_hx","dp_link_remove_hx","dp_link_replace_hx","dp_link_clear_hx","dp_link_init_hx","dp_link_get_link_hx","dp_link_find_endpoint_hx","dp_link_get_count","dp_link_get_uid","dp_link_get_url","dp_link_get_port","dp_link_get_alias","dp_link_get_rtt","dp_link_get_att","dp_link_count_viewers","dp_link_find_viewer","dp_link_drop","dp_net_netlink_from_steam_id_hx","dp_net_netlink_new_hx","dp_net_netlink_to_steam_id_hx","dp_net_netlink_get_is_server","dp_net_netlink_destroy_hx","dp_net_netlink_read_data_hx","dp_net_netlink_is_hx","dp_net_netlink_handle_hx","dp_net_netlink_update_hx","dp_net_netlink_send_raw_hx","dp_net_netlink_send_hx","dp_net_netlink_print_hx","dp_link_relpacket_new_hx","dp_link_relpacket_destroy_hx","dp_link_list_remove_hx","dp_net_error_get_text_hx","dp_net_error_get_name","dp_net_game_handle_state_hx","dp_net_game_handle_error_hx","dp_net_game_handle_hx","dp_net_packet__rtt_hx","dp_net_packet__slot_release_hx","dp_net_packet__slot_update_hx","dp_net_packet__slot_count_hx","dp_net_packet__slot_alias_hx","dp_net_packet__auth_hx","dp_net_packet__delay_change_write_hx","dp_net_packet__delay_change_read_hx","dp_net_queue_update_hx","dp_net_queue_handle_hx","dp_net_server_handle_hx","dp_net_server_accept_hx","dp_net_shared_handle_rtt_hx","dp_net_shared_handle_buffer_hx","dp_net_shared_handle_leaving_hx","dp_net_shared_handle_chat_hx","dp_net_shared_handle_hx","dp_net_adapters_adp_gml_create","dp_net_adapters_adp_gml_update","dp_net_adapters_adp_gml_host","dp_net_adapters_adp_gml_join","dp_net_adapters_adp_gml_send","dp_net_adapters_adp_gml_destroy","dp_net_adapters_adp_gml_destroy_server","dp_net_adapters_adp_gml_destroy_socket","dp_net_adapters_adp_steam_create","dp_net_adapters_adp_steam_update","dp_net_adapters_adp_steam_send","dp_net_adapters_adp_steam_host","dp_net_adapters_adp_steam_join","dp_net_adapters_adp_steam_destroy_server","dp_net_adapters_adp_steam_destroy_socket","dp_custom_init_inner","dp_custom_on_net_packet","dp_custom_on_lobby_created","dp_custom_on_lobby_joined","dp_custom_on_lobby_join_requested","dp_steam_set_active","dp_steam_get_local_user_hx","dp_steam_init_hx","dp_steam_update","dp_steam_cleanup","dp_steam_set_played_with","dp_steam_steam_impl_init_hx","dp_steam_steam_impl_update_hx","dp_steam_steam_impl_get_local_alias_hx","dp_steam_steam_impl_set_played_with_hx","dp_steam_steam_impl_async_event_hx","dp_steam_steam_impl_cleanup_hx","dp_steam_lobby_leave","dp_steam_lobby_join","dp_steam_lobby_lobby_joined_hx","dp_steam_lobby_create_hx","dp_steam_lobby_lobby_created_hx","dp_steam_lobby_lobby_join_requested_hx","dp_steam_lobby_update_start","dp_steam_lobby_update_submit","dp_steam_lobby_set_data","dp_steam_lobby_set_type","dp_steam_lobby_is_owner","dp_steam_lobby_get_owner","dp_steam_lobby_show_invite_overlay","dp_steam_steam_lobby_impl_leave_hx","dp_steam_steam_lobby_impl_join_hx","dp_steam_steam_lobby_impl_create_hx","dp_steam_steam_lobby_impl_set_data_hx","dp_steam_steam_lobby_impl_is_owner_hx","dp_steam_steam_lobby_impl_get_owner_hx","dp_steam_steam_lobby_impl_show_invite_overlay_hx","dp_steam_lobbylist_request","dp_steam_lobbylist_is_loading","dp_steam_lobbylist_add_string_filter","dp_steam_lobbylist_add_numerical_filter","dp_steam_lobbylist_get_count","dp_steam_lobbylist_get_data","dp_steam_lobbylist_get_lobby_id","dp_steam_lobbylist_join","dp_steam_net_send_packet","dp_steam_net_receive_packet","dp_steam_net_get_packet_size","dp_steam_net_get_packet_data","dp_steam_steam_networking_impl_send_packet_hx","dp_steam_steam_networking_impl_receive_packet_hx","dp_steam_steam_networking_impl_get_packet_size_hx","dp_steam_steam_networking_impl_get_packet_data_hx","dp_steam_steam_networking_impl_get_packet_sender_hx","dp_switch_reset_lobby_hx","dp_switch_leave_lobby_hx","dp_switch_reset_hx","dp_switch_ensure_matchmaking_hx","dp_switch_ensure_socket_hx","dp_switch_init_make_blank_id","dp_switch_init_make_id","dp_switch_init_get_id_high","dp_switch_init_get_id_low","dp_switch_init_send","dp_switch_init_destroy","dp_switch_init_leave_lobby_pre","dp_switch_init_lobby_join","dp_switch_init_make_lobby","dp_switch_init_set_lobby_type","dp_switch_init_is_lobby_owner","dp_switch_init_get_lobby_owner","dp_switch_init_lobby_finder_filter","dp_switch_init_request_lobbies","dp_switch_init_are_lobbies_loading","dp_switch_init_get_lobby_count","dp_switch_init_get_lobby_data","dp_switch_init_join_list_lobby","dp_switch_init_add_lobby_distance_filter","dp_switch_init","dp_switch_proc_mtmk_session_hx","dp_switch_async_social","dp_switch_async_network","dp_steam__switch_api_switch_mtmk_event_impl__get_is_ok","dp_buffer_read_buffer","dp_buffer_write_buffer","dp_type_steam_id_get_def_value","dp_type_steam_id_get_high","dp_type_steam_id_get_low","dp_type_steam_id__new","dp_uid_create","dp_type_url_to_int","dp_type_url_from_int","dp_haxe_class_create","dp_haxe_enum_create","gml_ds__array_list_array_list_iterator_create","gml_ds__array_list_array_list_iterator_has_next","gml_ds__array_list_array_list_iterator_next","dp_haxe_boot_wget","dp_haxe_boot_wset","cpp","cpp_header","cpp_init","cpp_file","array_set_unchecked","array_replace","array_get_unchecked","typeid","buffer_print_self","buffer_read_self_proc_error","buffer_read_self","buffer_print","buffer_ignore_object","buffer_ignore_variable","buffer_ignore_section","buffer_write_instances","buffer_read_instances","buffer_print_instances","buffer_read_ua","buffer_write_ua","buffer_read_instance_id","buffer_write_instance_id","buffer_write_any_error_cannot","buffer_write_any","buffer_print_any","buffer_print_field","buffer_read_any_error","buffer_read_any","buffer_write_list","buffer_read_list","buffer_write_map","buffer_read_map","buffer_write_self","gml_init","gml_std_array_hx_push","gml_std_array_hx_join","gml_std_array_hx_slice","gml_std_array_hx_copy","gml_builder_create","gml_builder_error_at","gml_builder_error","gml_builder_expect","gml_builder_expect_node","gml_builder_build_ops","gml_builder_build_args","gml_builder_build_expr","gml_builder_build_line","gml_builder_build_outer","gml_builder_build_loop","gml_compile_error","gml_compile_node","gml_compile_script","gml_compile_program","gml_parser_error","gml_parser_buf_sub","gml_parser_run","gml_program_seek_error","gml_program_create","gml_program_error","gml_program_destroy","gml_program_call_v","gml_program_call","gml_program_print","gml_program_update","gml_program_change_time_tags","gml_program_seek","gml_program_check","gml_program_eval","ref_init_main_script_get_name1","ref_init_main_script_get_index","ref_init_main","ref_init_cleanup","mod_inst_init","mod_inst_cleanup","ref_array_init_array_create1","ref_array_init_array_clear","ref_array_init_array_clone","ref_array_init_array_slice","ref_array_init_array_copy1","ref_array_init_array_length","ref_array_init_array_equals1","ref_array_init_array_push","ref_array_init_array_insert","ref_array_init_array_find_index","ref_array_init_array_find_index_ext","ref_array_init_array_find_last_index","ref_array_init_array_find_last_index_ext","ref_array_init_array_sort","ref_array_init_array_sort_sub","ref_array_init","ref_basics_init_is_real1","ref_basics_init_is_int321","ref_basics_init_is_int641","ref_basics_init_is_bool1","ref_basics_init_is_number","ref_basics_init_is_string1","ref_basics_init_is_array1","ref_basics_init_is_object","ref_basics_init_abs1","ref_basics_init_round1","ref_basics_init_floor1","ref_basics_init_ceil1","ref_basics_init_sign1","ref_basics_init_frac1","ref_basics_init_sqrt1","ref_basics_init_sqr1","ref_basics_init_exp1","ref_basics_init_ln1","ref_basics_init_log21","ref_basics_init_log101","ref_basics_init_logn1","ref_basics_init_sin1","ref_basics_init_cos1","ref_basics_init_tan1","ref_basics_init_arcsin1","ref_basics_init_arccos1","ref_basics_init_arctan1","ref_basics_init_arctan21","ref_basics_init_dsin1","ref_basics_init_dcos1","ref_basics_init_dtan1","ref_basics_init_darcsin1","ref_basics_init_darccos1","ref_basics_init_darctan1","ref_basics_init_darctan21","ref_basics_init_degtorad1","ref_basics_init_radtodeg1","ref_basics_init_lf","ref_basics_init_lf1","ref_basics_init_clamp1","ref_basics_init_lerp1","ref_basics_init_dot_product1","ref_basics_init_angle_difference1","ref_basics_init_point_distance1","ref_basics_init_point_direction1","ref_basics_init_lengthdir_x1","ref_basics_init_lengthdir_y1","ref_basics_init_real1","ref_basics_init_bool1","ref_basics_init_string1","ref_basics_init_string_format1","ref_basics_init_chr1","ref_basics_init_string_length1","ref_basics_init_string_pos1","ref_basics_init_string_count1","ref_basics_init_string_copy1","ref_basics_init_string_delete1","ref_basics_init_string_char_at1","ref_basics_init_string_ord_at1","ref_basics_init_string_upper1","ref_basics_init_string_lower1","ref_basics_init_string_letters1","ref_basics_init_string_digits1","ref_basics_init_string_lettersdigits1","ref_basics_init_string_replace1","ref_basics_init_string_replace_all1","ref_basics_init","ref_draw_init_draw_set_colour1","ref_draw_init_draw_set_color1","ref_draw_init_draw_set_alpha1","ref_draw_init_draw_get_colour1","ref_draw_init_draw_get_color1","ref_draw_init_draw_get_alpha1","ref_draw_init_merge_colour1","ref_draw_init_make_colour_rgb1","ref_draw_init_make_colour_hsv1","ref_draw_init_colour_get_red1","ref_draw_init_colour_get_green1","ref_draw_init_colour_get_blue1","ref_draw_init_colour_get_hue1","ref_draw_init_colour_get_saturation1","ref_draw_init_colour_get_value1","ref_draw_init_merge_colour2","ref_draw_init_make_color_rgb1","ref_draw_init_make_color_hsv1","ref_draw_init_color_get_red1","ref_draw_init_color_get_green1","ref_draw_init_color_get_blue1","ref_draw_init_color_get_hue1","ref_draw_init_color_get_saturation1","ref_draw_init_color_get_value1","ref_draw_init_merge_color1","ref_draw_init_draw_set_font1","ref_draw_init_draw_get_font","ref_draw_init_draw_set_halign1","ref_draw_init_draw_get_halign","ref_draw_init_draw_set_valign1","ref_draw_init_draw_get_valign","ref_draw_init_string_width1","ref_draw_init_string_height1","ref_draw_init_string_width_ext1","ref_draw_init_string_height_ext1","ref_draw_init_draw_text_transformed1","ref_draw_init_draw_text_ext_transformed1","ref_draw_init_draw_text_colour1","ref_draw_init_draw_text_ext_colour1","ref_draw_init_draw_text_transformed_colour1","ref_draw_init_draw_text_ext_transformed_colour1","ref_draw_init_draw_text_color1","ref_draw_init_draw_text_ext_color1","ref_draw_init_draw_text_transformed_color1","ref_draw_init_draw_text_ext_transformed_color1","ref_draw_init_draw_point_colour1","ref_draw_init_draw_line_colour1","ref_draw_init_draw_line_width_colour1","ref_draw_init_draw_rectangle_colour1","ref_draw_init_draw_roundrect_colour1","ref_draw_init_draw_roundrect_colour_ext1","ref_draw_init_draw_triangle_colour1","ref_draw_init_draw_circle_colour1","ref_draw_init_draw_ellipse_colour1","ref_draw_init_draw_point_color1","ref_draw_init_draw_line_color1","ref_draw_init_draw_line_width_color1","ref_draw_init_draw_rectangle_color1","ref_draw_init_draw_roundrect_color1","ref_draw_init_draw_roundrect_color_ext1","ref_draw_init_draw_triangle_color1","ref_draw_init_draw_circle_color1","ref_draw_init_draw_ellipse_color1","ref_draw_init_draw_primitive_begin1","ref_draw_init_draw_vertex1","ref_draw_init_draw_vertex_colour1","ref_draw_init_draw_vertex_color1","ref_draw_init_draw_primitive_end1","ref_draw_init_sprite_get_uvs1","ref_draw_init_font_get_uvs1","ref_draw_init_sprite_get_texture1","ref_draw_init_font_get_texture1","ref_draw_init_texture_get_width1","ref_draw_init_texture_get_height1","ref_draw_init_texture_get_uvs1","ref_draw_init_draw_primitive_begin_texture1","ref_draw_init_draw_vertex_texture1","ref_draw_init_draw_vertex_texture_colour1","ref_draw_init_draw_vertex_texture_color1","ref_draw_init_texture_global_scale1","ref_draw_init_gpu_set_blendenable1","ref_draw_init_gpu_set_ztestenable1","ref_draw_init_gpu_set_zfunc1","ref_draw_init_gpu_set_zwriteenable1","ref_draw_init_gpu_set_fog1","ref_draw_init_gpu_set_cullmode1","ref_draw_init_gpu_set_blendmode1","ref_draw_init_gpu_set_blendmode_ext1","ref_draw_init_gpu_set_blendmode_ext_sepalpha1","ref_draw_init_gpu_set_colorwriteenable1","ref_draw_init_gpu_set_colourwriteenable1","ref_draw_init_gpu_set_alphatestenable1","ref_draw_init_gpu_set_alphatestref1","ref_draw_init_gpu_set_alphatestfunc1","ref_draw_init_gpu_set_texfilter1","ref_draw_init_gpu_set_texfilter_ext1","ref_draw_init_gpu_set_texrepeat1","ref_draw_init_gpu_set_texrepeat_ext1","ref_draw_init_gpu_set_tex_filter1","ref_draw_init_gpu_set_tex_filter_ext1","ref_draw_init_gpu_set_tex_repeat1","ref_draw_init_gpu_set_tex_repeat_ext1","ref_draw_init_gpu_set_tex_mip_filter1","ref_draw_init_gpu_set_tex_mip_filter_ext1","ref_draw_init_gpu_set_tex_mip_bias1","ref_draw_init_gpu_set_tex_mip_bias_ext1","ref_draw_init_gpu_set_tex_min_mip1","ref_draw_init_gpu_set_tex_min_mip_ext1","ref_draw_init_gpu_set_tex_max_mip1","ref_draw_init_gpu_set_tex_max_mip_ext1","ref_draw_init_gpu_set_tex_max_aniso1","ref_draw_init_gpu_set_tex_max_aniso_ext1","ref_draw_init_gpu_set_tex_mip_enable1","ref_draw_init_gpu_set_tex_mip_enable_ext1","ref_draw_init_gpu_get_blendenable1","ref_draw_init_gpu_get_ztestenable1","ref_draw_init_gpu_get_zfunc1","ref_draw_init_gpu_get_zwriteenable1","ref_draw_init_gpu_get_fog1","ref_draw_init_gpu_get_cullmode1","ref_draw_init_gpu_get_blendmode1","ref_draw_init_gpu_get_blendmode_ext1","ref_draw_init_gpu_get_blendmode_ext_sepalpha1","ref_draw_init_gpu_get_blendmode_src1","ref_draw_init_gpu_get_blendmode_dest1","ref_draw_init_gpu_get_blendmode_srcalpha1","ref_draw_init_gpu_get_blendmode_destalpha1","ref_draw_init_gpu_get_colorwriteenable1","ref_draw_init_gpu_get_colourwriteenable1","ref_draw_init_gpu_get_alphatestenable1","ref_draw_init_gpu_get_alphatestref1","ref_draw_init_gpu_get_alphatestfunc1","ref_draw_init_gpu_get_texfilter1","ref_draw_init_gpu_get_texfilter_ext1","ref_draw_init_gpu_get_texrepeat1","ref_draw_init_gpu_get_texrepeat_ext1","ref_draw_init_gpu_get_tex_filter1","ref_draw_init_gpu_get_tex_filter_ext1","ref_draw_init_gpu_get_tex_repeat1","ref_draw_init_gpu_get_tex_repeat_ext1","ref_draw_init_gpu_get_tex_mip_filter1","ref_draw_init_gpu_get_tex_mip_filter_ext1","ref_draw_init_gpu_get_tex_mip_bias1","ref_draw_init_gpu_get_tex_mip_bias_ext1","ref_draw_init_gpu_get_tex_min_mip1","ref_draw_init_gpu_get_tex_min_mip_ext1","ref_draw_init_gpu_get_tex_max_mip1","ref_draw_init_gpu_get_tex_max_mip_ext1","ref_draw_init_gpu_get_tex_max_aniso1","ref_draw_init_gpu_get_tex_max_aniso_ext1","ref_draw_init_gpu_get_tex_mip_enable1","ref_draw_init_gpu_get_tex_mip_enable_ext1","ref_draw_init_gpu_push_state1","ref_draw_init_gpu_pop_state1","ref_draw_init_draw_light_define_ambient1","ref_draw_init_draw_light_define_direction1","ref_draw_init_draw_light_define_point1","ref_draw_init_draw_light_enable1","ref_draw_init_draw_set_lighting1","ref_draw_init_draw_light_get_ambient1","ref_draw_init_draw_light_get1","ref_draw_init_draw_get_lighting1","ref_draw_init_draw_self1","ref_draw_init_draw_sprite1","ref_draw_init_draw_sprite_pos1","ref_draw_init_draw_sprite_ext1","ref_draw_init_draw_sprite_stretched1","ref_draw_init_draw_sprite_stretched_ext1","ref_draw_init_draw_sprite_tiled1","ref_draw_init_draw_sprite_tiled_ext1","ref_draw_init_draw_sprite_part1","ref_draw_init_draw_sprite_part_ext1","ref_draw_init_draw_sprite_general1","ref_draw_init","ref_grid_func","ref_grid_init_ds_grid_create1","ref_grid_init_ds_grid_destroy1","ref_grid_init_ds_grid_valid","ref_grid_init_ds_grid_clear1","ref_grid_init_ds_grid_width1","ref_grid_init_ds_grid_height1","ref_grid_init_ds_grid_resize1","ref_grid_init_ds_grid_get1","ref_grid_init_ds_grid_set1","ref_grid_init_ds_grid_set_region1","ref_grid_init_ds_grid_sort1","ref_grid_init","ref_inst_init_variable_instance_get1","ref_inst_init_variable_instance_set1","ref_inst_init_variable_instance_get_names1","ref_inst_init","ref_instances_init_instance_find1","ref_instances_init_instance_number1","ref_instances_init_instance_exists1","ref_instances_init_instance_position1","ref_instances_init_instance_place1","ref_instances_init_instance_nearest1","ref_instances_init_instance_furthest1","ref_instances_init_motion_set1","ref_instances_init_motion_add1","ref_instances_init_place_free1","ref_instances_init_place_empty1","ref_instances_init_place_meeting1","ref_instances_init_place_snapped1","ref_instances_init_move_random1","ref_instances_init_move_snap1","ref_instances_init_move_towards_point1","ref_instances_init_move_contact_solid1","ref_instances_init_move_contact_all1","ref_instances_init_move_outside_solid1","ref_instances_init_move_outside_all1","ref_instances_init_move_bounce_solid1","ref_instances_init_move_bounce_all1","ref_instances_init_move_wrap1","ref_instances_init_distance_to_point1","ref_instances_init_distance_to_object1","ref_instances_init_position_empty1","ref_instances_init_position_meeting1","ref_instances_init_mp_linear_step1","ref_instances_init_mp_potential_step1","ref_instances_init_mp_linear_step_object1","ref_instances_init_mp_potential_step_object1","ref_instances_init_collision_point1","ref_instances_init_collision_rectangle1","ref_instances_init_collision_circle1","ref_instances_init_collision_ellipse1","ref_instances_init_collision_line1","ref_instances_init","ref_list_func","ref_list_unpack","ref_list_init_ds_list_create1","ref_list_init_ds_list_destroy1","ref_list_init_ds_list_valid","ref_list_init_ds_list_clear1","ref_list_init_ds_list_size1","ref_list_init_ds_list_shuffle1","ref_list_init_ds_list_find_value1","ref_list_init_ds_list_set1","ref_list_init_ds_list_add1","ref_list_init_ds_list_add_array","ref_list_init_ds_list_insert1","ref_list_init_ds_list_delete1","ref_list_init_ds_list_find_index1","ref_list_init_ds_list_remove","ref_list_init_ds_list_join","ref_list_init_ds_list_to_array","ref_list_init","ref_map_func","ref_map_trycast","ref_map_create","ref_map_wrap","ref_map_init_ds_map_create1","ref_map_init_ds_map_destroy1","ref_map_init_ds_map_valid","ref_map_init_ds_map_clear1","ref_map_init_ds_map_size1","ref_map_init_ds_map_keys","ref_map_init_ds_map_values","ref_map_init_ds_map_find_value1","ref_map_init_ds_map_set1","ref_map_init_ds_map_exists1","ref_map_init_ds_map_delete1","ref_map_init","ref_mouse_init_mouse_lock","ref_mouse_init_mouse_unlock","ref_mouse_init_mouse_is_locked","ref_mouse_init","ref_mouse_unlock_for","ref_mouse_update","ref_sprite_init_sprite_add_base64","ref_sprite_init_sprite_exists1","ref_sprite_init_sprite_get_name1","ref_sprite_init_sprite_get_number1","ref_sprite_init_sprite_get_width1","ref_sprite_init_sprite_get_height1","ref_sprite_init_sprite_get_xoffset1","ref_sprite_init_sprite_get_yoffset1","ref_sprite_init_sprite_get_bbox_mode","ref_sprite_init_sprite_get_bbox_left1","ref_sprite_init_sprite_get_bbox_right1","ref_sprite_init_sprite_get_bbox_top1","ref_sprite_init_sprite_get_bbox_bottom1","ref_sprite_init","ref_vertex_func","ref_vertex_vfmt_func","ref_vertex_init_vertex_create_buffer1","ref_vertex_init_vertex_create_buffer_ext1","ref_vertex_init_vertex_delete_buffer1","ref_vertex_init_vertex_begin1","ref_vertex_init_vertex_float11","ref_vertex_init_vertex_float21","ref_vertex_init_vertex_float31","ref_vertex_init_vertex_float41","ref_vertex_init_vertex_color1","ref_vertex_init_vertex_colour1","ref_vertex_init_vertex_texcoord1","ref_vertex_init_vertex_position1","ref_vertex_init_vertex_position_3d1","ref_vertex_init_vertex_normal1","ref_vertex_init_vertex_argb1","ref_vertex_init_vertex_end1","ref_vertex_init_vertex_get_buffer_size1","ref_vertex_init_vertex_get_number1","ref_vertex_init_vertex_freeze1","ref_vertex_init_vertex_submit1","ref_vertex_init_vertex_format_begin1","ref_vertex_init_vertex_format_end1","ref_vertex_init_vertex_format_delete1","ref_vertex_init_vertex_format_add_color1","ref_vertex_init_vertex_format_add_colour1","ref_vertex_init_vertex_format_add_normal1","ref_vertex_init_vertex_format_add_position1","ref_vertex_init_vertex_format_add_position_3d1","ref_vertex_init_vertex_format_add_texcoord1","ref_vertex_init_vertex_format_add_custom1","ref_vertex_init","gml_std_haxe_enum_tools_set","gml_std__Std_StdImpl_isNumber","gml_std_string_pos_ext","gml_std_string_split","gml_std_string_hx_startsWith","gml_std_string_hx_trim","gml_std_haxe_type_tools_enum_constructor","gml_enum_create","gml_enum_ctr_create","gml_node_unpack","gml_node_is_simple","gml_node_is_statement","gml_node_is_in_block","gml_node_equals_list","gml_node_equals","gml_node_clone_opt","gml_node_clone","gml_node_seek_all_out","gml_node_seek_all","gml_node_seek","gml_op_get_priority","gml_op_to_string","gml_op_apply","gml_op_get_name","gml_pos_create","gml_pos_to_string","gml_script_create","gml_script_destroy","gml_script_seek","gml_source_create","gml_source_to_string","gml_api_print","gml_note_add","gml_parse_name","gml_func_add","gml_func_copy","gml_get_self","gml_scope_clear","gml_scope_create","gml_light_create","gml_light_create_ext","gml_field_func","gml_field_check","gml_field_get","gml_field_get_names","gml_with_func","gml_with_first","gml_var_add","gml_const_add","gml_asset_add","gml_std_haxe_class_create","gml_seek_adjfix_proc","gml_seek_arguments_proc","gml_seek_calls_proc","gml_seek_enum_fields_proc","gml_seek_enum_values_proc","gml_seek_eval_node_to_value","gml_seek_eval_value_to_node","gml_seek_eval_proc","gml_seek_eval_eval","gml_seek_eval_opt","gml_seek_fields_proc","gml_seek_idents_proc","gml_seek_locals_proc","gml_seek_self_fields_proc","gml_seek_set_op_resolve_set_op_rfn","gml_seek_set_op_proc","gml_std_haxe_boot_wget","gml_std_haxe_boot_wset","tools__array_list_array_list_impl__pop","gml_link_create","tools__gml_stack_gml_stack_impl__push","tools__gml_stack_gml_stack_impl__dup","tools__gml_stack_gml_stack_impl__dup2","tools__gml_stack_gml_stack_impl__dup_in","tools__gml_stack_gml_stack_impl__pop","tools__gml_stack_gml_stack_impl__discard","gml_action_list_print","gml_object_init","gml_object_field","gml_object_setup","gml_class_else","gml_func_scope_create","gml_thread_error","gml_thread_create","gml_thread_get_error","gml_thread_get_error_ptr","gml_thread_proc_error","gml_thread_exec","gml_thread_fork","vm_gml_thread_exec_call_fn0","vm_gml_thread_exec_call_fn1","vm_gml_thread_exec_call_fn2","vm_gml_thread_exec_call_fn3","vm_gml_thread_exec_call_fn4","vm_gml_thread_exec_call_fn5","vm_gml_thread_exec_call_fn6","vm_gml_thread_exec_call_fn7","vm_gml_thread_exec_call_fn8","vm_gml_thread_exec_call_fn9","vm_gml_thread_exec_call_fn10","vm_gml_thread_exec_call_fn11","vm_gml_thread_exec_call_fn12","vm_gml_thread_exec_call_fn13","vm_gml_thread_exec_call_fn14","vm_gml_thread_exec_call_fn15","vm_gml_thread_exec_call_fn16","vm_gml_thread_exec_call_fn17","vm_gml_thread_exec_call_fn18","vm_gml_thread_exec_call_fn19","vm_gml_thread_exec_call_fn20","vm_gml_thread_exec_call_fn21","vm_gml_thread_exec_call_fn22","vm_gml_thread_exec_call_fn23","vm_gml_thread_exec_call_fn24","vm_gml_thread_exec_call","vm_gml_thread_exec_slice_call_fn0","vm_gml_thread_exec_slice_call_fn1","vm_gml_thread_exec_slice_call_fn2","vm_gml_thread_exec_slice_call_fn3","vm_gml_thread_exec_slice_call_fn4","vm_gml_thread_exec_slice_call_fn5","vm_gml_thread_exec_slice_call_fn6","vm_gml_thread_exec_slice_call_fn7","vm_gml_thread_exec_slice_call_fn8","vm_gml_thread_exec_slice_call_fn9","vm_gml_thread_exec_slice_call","gml_type_check_init","gml_type_check_any","gml_type_check_number","gml_type_check_int","gml_type_check_index","gml_type_check_string","gml_type_check_array","gml_type_check_z_number","gml_type_check_z_string","gml_type_check_z_array","gml_value_is_number","gml_value_is1d_array","gml_value_get_type","gml_value_print_rec","gml_value_print","gml_value_list_copy","gml_with_scope_copy","gml_with_scope_destroy","gml_with_scope_create","vm__gml_with_data_gml_with_data_impl__init","vm__gml_with_data_gml_with_data_impl__alloc","vm__gml_with_data_gml_with_data_impl__destroy","catch_error_init","catch_error_set_prompt","catch_error_set_dump_path","catch_error_set_exec","catch_error_set_newer","steam_id_create","steam_id_get_high","steam_id_get_low","steam_id_equals","steam_id_from_int64","steam_id_to_int64","steam_net_check_version","steam_net_accept_p2p_session","steam_net_close_p2p_session","steam_net_packet_get_sender_id","steam_net_packet_get_data","steam_net_packet_send","steam_lobby_join_id","steam_lobby_get_owner_id","steam_lobby_get_member_id","steam_lobby_list_get_lobby_id","shColorReplaceBlendExt","#define LOWPREC lowp\n#define\tMATRIX_VIEW \t\t\t\t\t0\r\n#define\tMATRIX_PROJECTION \t\t\t\t1\r\n#define\tMATRIX_WORLD \t\t\t\t\t2\r\n#define\tMATRIX_WORLD_VIEW \t\t\t\t3\r\n#define\tMATRIX_WORLD_VIEW_PROJECTION \t4\r\n#define\tMATRICES_MAX\t\t\t\t\t5\r\n\r\nuniform mat4 gm_Matrices[MATRICES_MAX]; \r\n\r\nuniform bool gm_LightingEnabled;\r\nuniform bool gm_VS_FogEnabled;\r\nuniform float gm_FogStart;\r\nuniform float gm_RcpFogRange;\r\n\r\n#define MAX_VS_LIGHTS\t8\r\n#define MIRROR_WIN32_LIGHTING_EQUATION\r\n\r\n\r\n//#define\tMAX_VS_LIGHTS\t\t\t\t\t8\r\nuniform vec4   gm_AmbientColour;\t\t\t\t\t\t\t// rgb=colour, a=1\r\nuniform vec4   gm_Lights_Direction[MAX_VS_LIGHTS];\t\t// normalised direction\r\nuniform vec4   gm_Lights_PosRange[MAX_VS_LIGHTS];\t\t\t// X,Y,Z position,  W range\r\nuniform vec4   gm_Lights_Colour[MAX_VS_LIGHTS];\t\t\t// rgb=colour, a=1\r\n\r\nfloat CalcFogFactor(vec4 pos)\r\n{\r\n\tif (gm_VS_FogEnabled)\r\n\t{\r\n\t\tvec4 viewpos = gm_Matrices[MATRIX_WORLD_VIEW] * pos;\r\n\t\tfloat fogfactor = ((viewpos.z - gm_FogStart) * gm_RcpFogRange);\r\n\t\treturn fogfactor;\r\n\t}\r\n\telse\r\n\t{\r\n\t\treturn 0.0;\r\n\t}\r\n}\r\n\r\nvec4 DoDirLight(vec3 ws_normal, vec4 dir, vec4 diffusecol)\r\n{\r\n\tfloat dotresult = dot(ws_normal, dir.xyz);\r\n\tdotresult = max(0.0, dotresult);\r\n\r\n\treturn dotresult * diffusecol;\r\n}\r\n\r\nvec4 DoPointLight(vec3 ws_pos, vec3 ws_normal, vec4 posrange, vec4 diffusecol)\r\n{\r\n\tvec3 diffvec = ws_pos - posrange.xyz;\r\n\tfloat veclen = length(diffvec);\r\n\tdiffvec /= veclen;\t// normalise\r\n#ifdef MIRROR_WIN32_LIGHTING_EQUATION\r\n\t// This is based on the Win32 D3D and OpenGL falloff model, where:\r\n\t// Attenuation = 1.0f / (factor0 + (d * factor1) + (d*d * factor2))\r\n\t// For some reason, factor0 is set to 0.0f while factor1 is set to 1.0f/lightrange (on both D3D and OpenGL)\r\n\t// This'll result in no visible falloff as 1.0f / (d / lightrange) will always be larger than 1.0f (if the vertex is within range)\r\n\tfloat atten = 1.0 / (veclen / posrange.w);\r\n\tif (veclen > posrange.w)\r\n\t{\r\n\t\tatten = 0.0;\r\n\t}\r\n#else\r\n\tfloat atten = clamp( (1.0 - (veclen / posrange.w)), 0.0, 1.0);\t\t// storing 1.0f/range instead would save a rcp\r\n#endif\r\n\tfloat dotresult = dot(ws_normal, diffvec);\r\n\tdotresult = max(0.0, dotresult);\r\n\r\n\treturn dotresult * atten * diffusecol;\r\n}\r\n\r\nvec4 DoLighting(vec4 vertexcolour, vec4 objectspacepos, vec3 objectspacenormal)\r\n{\r\n\tif (gm_LightingEnabled)\r\n\t{\r\n\t\t// Normally we'd have the light positions\\\\directions back-transformed from world to object space\r\n\t\t// But to keep things simple for the moment we'll just transform the normal to world space\r\n\t\tvec4 objectspacenormal4 = vec4(objectspacenormal, 0.0);\r\n\t\tvec3 ws_normal;\r\n\t\tws_normal = (gm_Matrices[MATRIX_WORLD_VIEW] * objectspacenormal4).xyz;\r\n\t\tws_normal = -normalize(ws_normal);\r\n\r\n\t\tvec3 ws_pos;\r\n\t\tws_pos = (gm_Matrices[MATRIX_WORLD] * objectspacepos).xyz;\r\n\r\n\t\t// Accumulate lighting from different light types\r\n\t\tvec4 accumcol = vec4(0.0, 0.0, 0.0, 0.0);\t\t\r\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\r\n\t\t{\r\n\t\t\taccumcol += DoDirLight(ws_normal, gm_Lights_Direction[i], gm_Lights_Colour[i]);\r\n\t\t}\r\n\r\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\r\n\t\t{\r\n\t\t\taccumcol += DoPointLight(ws_pos, ws_normal, gm_Lights_PosRange[i], gm_Lights_Colour[i]);\r\n\t\t}\r\n\r\n\t\taccumcol *= vertexcolour;\r\n\t\taccumcol += gm_AmbientColour;\r\n\t\taccumcol = min(vec4(1.0, 1.0, 1.0, 1.0), accumcol);\r\n\t\taccumcol.a = vertexcolour.a;\r\n\t\treturn accumcol;\r\n\t}\r\n\telse\r\n\t{\r\n\t\treturn vertexcolour;\r\n\t}\r\n}\r\n\r\n#define _YY_GLSLES_ 1\n//\r\n// Simple passthrough vertex shader\r\n//\r\nattribute vec3 in_Position;                  // (x,y,z)\r\nattribute vec4 in_Colour;                    // (r,g,b,a)\r\nattribute vec2 in_TextureCoord;              // (u,v)\r\n//attribute vec3 in_Normal;                  // (x,y,z)     unused in this shader.\r\n\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\nvarying vec3 v_vPosition;\r\n\r\nvoid main()\r\n{\r\n    vec4 object_space_pos = vec4( in_Position.x, in_Position.y, in_Position.z, 1.0);\r\n    gl_Position = gm_Matrices[MATRIX_WORLD_VIEW_PROJECTION] * object_space_pos;\r\n    \r\n    v_vColour = in_Colour;\r\n    v_vTexcoord = in_TextureCoord;\r\n    v_vPosition = in_Position;\r\n}\r\n\r\n\r\n","precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\r\n\r\nuniform sampler2D gm_BaseTexture;\r\n\r\nuniform bool gm_PS_FogEnabled;\r\nuniform vec4 gm_FogColour;\r\nuniform bool gm_AlphaTestEnabled;\r\nuniform float gm_AlphaRefValue;\r\n\r\nvoid DoAlphaTest(vec4 SrcColour)\r\n{\r\n\tif (gm_AlphaTestEnabled)\r\n\t{\r\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\r\n\t\t{\r\n\t\t\tdiscard;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid DoFog(inout vec4 SrcColour, float fogval)\r\n{\r\n\tif (gm_PS_FogEnabled)\r\n\t{\r\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \r\n\t}\r\n}\r\n\r\n#define _YY_GLSLES_ 1\n\r\n\r\n\r\n//\r\n//  shColorReplaceBlendExt\r\n//\r\n//      Replaces multiple colors with others. Can replace \r\n//      similar colors while preserving shading.\r\n//\r\n//      colorIn             color to replace (vec4)\r\n//      colorOut            replacement color (vec4)\r\n//      colorTolerance      HSVA tolerances (vec4)\r\n//      blend               1.0 preserves shading of original, \r\n//                          0.0 replaces color as-is (float)\r\n//\r\n//  GMLscripts.com\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\nvarying vec3 v_vPosition;\r\n\r\nconst int maxcolors = 9;\r\n\r\nuniform vec4  colorIn[maxcolors];\r\nuniform vec4  colorOut[maxcolors];\r\nuniform vec4  colorTolerance[maxcolors];\r\nuniform vec4  blend[maxcolors];\r\n\r\nuniform float effectY;\r\nuniform float playerX;\r\nuniform float playerY;\r\nuniform int   special;\r\nuniform float time;\r\n// 1 - American Wrastor\r\n// 2 - Genesis Forsburn (moved to separate shader)\r\n// 3 - Excaliburn\r\n// 4 - Champ Kragg\r\n// 5 - Pool Party Ranno\r\n\r\nvec3 rgb_to_hsv(vec3 col)\r\n{\r\n    float H = 0.0;\r\n    float S = 0.0;\r\n    float V = 0.0;\r\n    \r\n    float M = max(col.r, max(col.g, col.b));\r\n    float m = min(col.r, min(col.g, col.b));\r\n    \r\n    V = M;\r\n    \r\n    float C = M - m;\r\n    \r\n    if (C > 0.0)\r\n    {\r\n        if (M == col.r) H = mod( (col.g - col.b) / C, 6.0);\r\n        if (M == col.g) H = (col.b - col.r) / C + 2.0;\r\n        if (M == col.b) H = (col.r - col.g) / C + 4.0;\r\n        H /= 6.0;\r\n        S = C / V;\r\n    }\r\n    \r\n    return vec3(H, S, V);\r\n}\r\n\r\nvec3 hsv_to_rgb(vec3 col)\r\n{\r\n    float H = col.r;\r\n    float S = col.g;\r\n    float V = col.b;\r\n    \r\n    float C = V * S;\r\n    \r\n    H *= 6.0;\r\n    float X = C * (1.0 - abs( mod(H, 2.0) - 1.0 ));\r\n    float m = V - C;\r\n    C += m;\r\n    X += m;\r\n    \r\n    if (H < 1.0) return vec3(C, X, m);\r\n    if (H < 2.0) return vec3(X, C, m);\r\n    if (H < 3.0) return vec3(m, C, X);\r\n    if (H < 4.0) return vec3(m, X, C);\r\n    if (H < 5.0) return vec3(X, m, C);\r\n    else         return vec3(C, m, X);\r\n}\r\n\r\nvoid main()\r\n{\r\n    vec4 colorPixel = texture2D( gm_BaseTexture, v_vTexcoord );\r\n    \r\n    vec4 colorResult = colorPixel;\r\n    \r\n    vec4 colorHSV = vec4( rgb_to_hsv( colorPixel.rgb ), colorPixel.a);\r\n    \r\n    \r\n    for (int i=0; i< maxcolors; i+=1)\r\n    {            \r\n        vec4 colorInHSV = vec4( rgb_to_hsv( colorIn[i].rgb ), colorIn[i].a);\r\n        \r\n        vec4 colorDelta = colorHSV - colorInHSV;\r\n        \r\n        if (abs(colorDelta.r)>0.5) colorDelta.r -= sign(colorDelta.r);\r\n    \r\n        if ( all( lessThanEqual( abs(colorDelta), colorTolerance[i] ) ) ) \r\n        {\r\n            vec4 tColorOut = colorOut[i];\r\n\t\t\tif (special == 7){\r\n\t\t\t\tif (i < 3){\r\n\t\t\t\t\t//float t_y = floor((playerY - v_vPosition.y) * 0.5) * 2.0;\r\n\t\t\t\t\t//float t_x = floor((playerX - v_vPosition.x) * 0.5) * 2.0;\r\n\t\t\t\t\tfloat t_y = floor((v_vPosition.y) * 0.5) * 2.0;\r\n\t\t\t\t\tfloat t_x = floor((playerX - v_vPosition.x) * 0.5) * 2.0;\r\n\t\t\t\t\tif (t_y > effectY + 4.0*sin((t_x - floor(time*0.5))*0.2)){\r\n\t\t\t\t\t\ttColorOut.r = 255.0/255.0;\r\n                        tColorOut.g = 181.0/255.0;\r\n                        tColorOut.b = 65.0/255.0;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else if (special == 8) {\r\n                if (i == 0){\r\n                    if (v_vPosition.y < effectY){\r\n                        //replace with snow texture\r\n                        tColorOut.r = 0.81960;//0.73725;//v_vTexcoord.x;\r\n                        tColorOut.g = 0.83529;//0.76078;//v_vTexcoord.y;\r\n                        tColorOut.b = 0.86667;//0.80784;\r\n                    } else if (v_vPosition.y < effectY + 8.0){\r\n                        float t_y = floor((playerY - v_vPosition.y) * 0.5) * 2.0;\r\n                        float t_a = (t_y - effectY)*0.125;\r\n                        float t_dither = (t_a * 4.0) + 1.0; //1 at top 4 at bottom\r\n                        float t_x = floor((playerX - v_vPosition.x) * 0.5) + mod(t_dither, 2.0);\r\n                        t_y = floor(v_vPosition.y * 0.5) * 2.0;\r\n                        t_a = (t_y - effectY)*0.125;\r\n                        if (mod(t_x, 2.0) < 1.0){\r\n                            tColorOut.r = mix(0.81960,colorOut[i].r,t_a);\r\n                            tColorOut.g = mix(0.83529,colorOut[i].g,t_a);\r\n                            tColorOut.b = mix(0.86667,colorOut[i].b,t_a);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            \r\n            //American Wrastor\r\n            float t_x = floor((playerX - v_vPosition.x) * 0.5);\r\n            float t_y = floor((playerY - v_vPosition.y) * 0.5);\r\n            float modx = mod(t_x,4.0);\r\n            float mody = mod(t_y,4.0);\r\n            float isStar = float(special == 1 && i == 1 && ((modx == 0.0 && mody == 0.0) || (modx == 2.0 && mody == 2.0)));\r\n            tColorOut.r = mix(tColorOut.r, 1.0, isStar * 0.5);\r\n            tColorOut.g = mix(tColorOut.g, 1.0, isStar * 0.5);\r\n            tColorOut.b = mix(tColorOut.b, 1.0, isStar * 0.5);\r\n            \r\n            \r\n            //Excaliburn\r\n\t\t\t//bool isGolden = ((tColorOut.r == 228.0/255.0 && tColorOut.g == 228.0/255.0 && tColorOut.b == 240.0/255.0) || (tColorOut.r == 121.0/255.0 && tColorOut.g == 122.0/255.0 && tColorOut.b == 195.0/255.0));\r\n            float isScanline = float(((special == 3 && (i == 2 || i == 3)) || (special == 6)) && t_y > t_x * -0.3 + mod(time*2.0,200.0) - 100.0 && t_y < t_x * -0.3 + mod(time*2.0,200.0) - 96.0);\r\n\t\t\ttColorOut.r = mix(tColorOut.r, 1.0, isScanline * 0.7);\r\n            tColorOut.g = mix(tColorOut.g, 1.0, isScanline * 0.7);\r\n            tColorOut.b = mix(tColorOut.b, 1.0, isScanline * 0.7);\r\n            //Champion Kragg\r\n            isScanline = float(special == 4 && i == 0 && ((mod(t_y,200.0) > mod(t_x + time*2.0,200.0) && mod(t_y,200.0) < mod(t_x + time*2.0 + 6.0,200.0))));\r\n            tColorOut.r = mix(tColorOut.r, 1.0, isScanline * 0.7);\r\n            tColorOut.g = mix(tColorOut.g, 1.0, isScanline * 0.7);\r\n            tColorOut.b = mix(tColorOut.b, 1.0, isScanline * 0.7);\r\n\t\t\t\r\n\t\t\t//Pool Party Ranno\r\n            mody = mod(t_y,6.0);\r\n            bool inFlowerPos1 = (modx == 1.0 && (mody == 0.0 || mody == 2.0)) || (mody == 1.0 && (modx == 0.0 || modx == 2.0));\r\n            bool inFlowerPos2 = (modx == 3.0 && (mody == 3.0 || mody == 5.0)) || (mody == 4.0 && (modx == 0.0 || modx == 2.0));\r\n            bool inFlowerPos = (inFlowerPos1 || inFlowerPos2);\r\n            float isFlower = float(special == 5 && i == 2 && inFlowerPos);\r\n            tColorOut.r = mix(tColorOut.r, 1.0, isFlower * 0.8);\r\n            tColorOut.g = mix(tColorOut.g, 1.0, isFlower * 0.8);\r\n            tColorOut.b = mix(tColorOut.b, 1.0, isFlower * 0.8);\r\n            \r\n            \r\n            vec4 colorOutHSV = vec4( rgb_to_hsv( tColorOut.rgb ), tColorOut.a);\r\n            \r\n            colorResult = mix( tColorOut,\r\n                              vec4 ( hsv_to_rgb( vec3( mod( colorOutHSV.r + colorDelta.r, 1.0 ),\r\n                                                     clamp( colorOutHSV.g + colorDelta.g, 0.0, 1.0 ),\r\n                                                     clamp( colorOutHSV.b + colorDelta.b, 0.0, 1.0 ) ) ), \r\n                                     clamp( tColorOut.a + colorDelta.a, 0.0, 1.0) ),\r\n                              blend[i].x );\r\n        }\r\n    }\r\n    \r\n    //Genesis Forsburn\r\n    /*if (special == 2){\r\n        for (float xOffset = -0.01; xOffset <= 0.01; xOffset += 0.005){\r\n            for (float yOffset = -0.01; yOffset <= 0.01; yOffset += 0.005){\r\n                vec4 colorPixel2 = texture2D( gm_BaseTexture, v_vTexcoord + vec2(xOffset, yOffset) );\r\n                vec4 colorHSV2 = vec4( rgb_to_hsv( colorPixel2.rgb ), colorPixel2.a);\r\n                \r\n                vec4 colorInHSV2 = vec4( rgb_to_hsv( colorIn[2].rgb ), colorIn[2].a);\r\n                vec4 colorInHSV3 = vec4( rgb_to_hsv( colorIn[3].rgb ), colorIn[3].a);\r\n                vec4 colorInHSV4 = vec4( rgb_to_hsv( colorIn[4].rgb ), colorIn[4].a);\r\n                vec4 colorDelta2 = colorHSV2 - colorInHSV2;\r\n                vec4 colorDelta3 = colorHSV2 - colorInHSV3;\r\n                vec4 colorDelta4 = colorHSV2 - colorInHSV4;\r\n                if (abs(colorDelta2.r)>0.5) colorDelta2.r -= sign(colorDelta2.r);\r\n                if (abs(colorDelta3.r)>0.5) colorDelta3.r -= sign(colorDelta3.r);\r\n                if (abs(colorDelta4.r)>0.5) colorDelta4.r -= sign(colorDelta4.r);\r\n                \r\n                if ( all( lessThanEqual( abs(colorDelta2), colorTolerance[2] ) )\r\n                ||   all( lessThanEqual( abs(colorDelta3), colorTolerance[3] ) )\r\n                ||   all( lessThanEqual( abs(colorDelta4), colorTolerance[4] ) )) {\r\n                    colorResult.r += 0.1;\r\n                    if (colorResult.a == 0.0){\r\n                        colorResult.g = 0.0;\r\n                        colorResult.b = 0.0;\r\n                    }\r\n                    colorResult.a = clamp(colorResult.a + 0.1, 0.1, 1.0);\r\n                }\r\n            }\r\n        }\r\n    }*/\r\n    \r\n    gl_FragColor = v_vColour * colorResult;\r\n}\r\n\r\n","#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n#define\tMATRIX_VIEW \t\t\t\t\t0\r\n#define\tMATRIX_PROJECTION \t\t\t\t1\r\n#define\tMATRIX_WORLD \t\t\t\t\t2\r\n#define\tMATRIX_WORLD_VIEW \t\t\t\t3\r\n#define\tMATRIX_WORLD_VIEW_PROJECTION \t4\r\n#define\tMATRICES_MAX\t\t\t\t\t5\r\n\r\nuniform mat4 gm_Matrices[MATRICES_MAX]; \r\n\r\nuniform bool gm_LightingEnabled;\r\nuniform bool gm_VS_FogEnabled;\r\nuniform float gm_FogStart;\r\nuniform float gm_RcpFogRange;\r\n\r\n#define MAX_VS_LIGHTS\t8\r\n#define MIRROR_WIN32_LIGHTING_EQUATION\r\n\r\n\r\n//#define\tMAX_VS_LIGHTS\t\t\t\t\t8\r\nuniform vec4   gm_AmbientColour;\t\t\t\t\t\t\t// rgb=colour, a=1\r\nuniform vec4   gm_Lights_Direction[MAX_VS_LIGHTS];\t\t// normalised direction\r\nuniform vec4   gm_Lights_PosRange[MAX_VS_LIGHTS];\t\t\t// X,Y,Z position,  W range\r\nuniform vec4   gm_Lights_Colour[MAX_VS_LIGHTS];\t\t\t// rgb=colour, a=1\r\n\r\nfloat CalcFogFactor(vec4 pos)\r\n{\r\n\tif (gm_VS_FogEnabled)\r\n\t{\r\n\t\tvec4 viewpos = gm_Matrices[MATRIX_WORLD_VIEW] * pos;\r\n\t\tfloat fogfactor = ((viewpos.z - gm_FogStart) * gm_RcpFogRange);\r\n\t\treturn fogfactor;\r\n\t}\r\n\telse\r\n\t{\r\n\t\treturn 0.0;\r\n\t}\r\n}\r\n\r\nvec4 DoDirLight(vec3 ws_normal, vec4 dir, vec4 diffusecol)\r\n{\r\n\tfloat dotresult = dot(ws_normal, dir.xyz);\r\n\tdotresult = max(0.0, dotresult);\r\n\r\n\treturn dotresult * diffusecol;\r\n}\r\n\r\nvec4 DoPointLight(vec3 ws_pos, vec3 ws_normal, vec4 posrange, vec4 diffusecol)\r\n{\r\n\tvec3 diffvec = ws_pos - posrange.xyz;\r\n\tfloat veclen = length(diffvec);\r\n\tdiffvec /= veclen;\t// normalise\r\n#ifdef MIRROR_WIN32_LIGHTING_EQUATION\r\n\t// This is based on the Win32 D3D and OpenGL falloff model, where:\r\n\t// Attenuation = 1.0f / (factor0 + (d * factor1) + (d*d * factor2))\r\n\t// For some reason, factor0 is set to 0.0f while factor1 is set to 1.0f/lightrange (on both D3D and OpenGL)\r\n\t// This'll result in no visible falloff as 1.0f / (d / lightrange) will always be larger than 1.0f (if the vertex is within range)\r\n\tfloat atten = 1.0 / (veclen / posrange.w);\r\n\tif (veclen > posrange.w)\r\n\t{\r\n\t\tatten = 0.0;\r\n\t}\r\n#else\r\n\tfloat atten = clamp( (1.0 - (veclen / posrange.w)), 0.0, 1.0);\t\t// storing 1.0f/range instead would save a rcp\r\n#endif\r\n\tfloat dotresult = dot(ws_normal, diffvec);\r\n\tdotresult = max(0.0, dotresult);\r\n\r\n\treturn dotresult * atten * diffusecol;\r\n}\r\n\r\nvec4 DoLighting(vec4 vertexcolour, vec4 objectspacepos, vec3 objectspacenormal)\r\n{\r\n\tif (gm_LightingEnabled)\r\n\t{\r\n\t\t// Normally we'd have the light positions\\\\directions back-transformed from world to object space\r\n\t\t// But to keep things simple for the moment we'll just transform the normal to world space\r\n\t\tvec4 objectspacenormal4 = vec4(objectspacenormal, 0.0);\r\n\t\tvec3 ws_normal;\r\n\t\tws_normal = (gm_Matrices[MATRIX_WORLD_VIEW] * objectspacenormal4).xyz;\r\n\t\tws_normal = -normalize(ws_normal);\r\n\r\n\t\tvec3 ws_pos;\r\n\t\tws_pos = (gm_Matrices[MATRIX_WORLD] * objectspacepos).xyz;\r\n\r\n\t\t// Accumulate lighting from different light types\r\n\t\tvec4 accumcol = vec4(0.0, 0.0, 0.0, 0.0);\t\t\r\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\r\n\t\t{\r\n\t\t\taccumcol += DoDirLight(ws_normal, gm_Lights_Direction[i], gm_Lights_Colour[i]);\r\n\t\t}\r\n\r\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\r\n\t\t{\r\n\t\t\taccumcol += DoPointLight(ws_pos, ws_normal, gm_Lights_PosRange[i], gm_Lights_Colour[i]);\r\n\t\t}\r\n\r\n\t\taccumcol *= vertexcolour;\r\n\t\taccumcol += gm_AmbientColour;\r\n\t\taccumcol = min(vec4(1.0, 1.0, 1.0, 1.0), accumcol);\r\n\t\taccumcol.a = vertexcolour.a;\r\n\t\treturn accumcol;\r\n\t}\r\n\telse\r\n\t{\r\n\t\treturn vertexcolour;\r\n\t}\r\n}\r\n\r\n#define _YY_GLSL_ 1\n//\r\n// Simple passthrough vertex shader\r\n//\r\nattribute vec3 in_Position;                  // (x,y,z)\r\nattribute vec4 in_Colour;                    // (r,g,b,a)\r\nattribute vec2 in_TextureCoord;              // (u,v)\r\n//attribute vec3 in_Normal;                  // (x,y,z)     unused in this shader.\r\n\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\nvarying vec3 v_vPosition;\r\n\r\nvoid main()\r\n{\r\n    vec4 object_space_pos = vec4( in_Position.x, in_Position.y, in_Position.z, 1.0);\r\n    gl_Position = gm_Matrices[MATRIX_WORLD_VIEW_PROJECTION] * object_space_pos;\r\n    \r\n    v_vColour = in_Colour;\r\n    v_vTexcoord = in_TextureCoord;\r\n    v_vPosition = in_Position;\r\n}\r\n\r\n\r\n","#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\r\n\r\nuniform sampler2D gm_BaseTexture;\r\n\r\nuniform bool gm_PS_FogEnabled;\r\nuniform vec4 gm_FogColour;\r\nuniform bool gm_AlphaTestEnabled;\r\nuniform float gm_AlphaRefValue;\r\n\r\nvoid DoAlphaTest(vec4 SrcColour)\r\n{\r\n\tif (gm_AlphaTestEnabled)\r\n\t{\r\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\r\n\t\t{\r\n\t\t\tdiscard;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid DoFog(inout vec4 SrcColour, float fogval)\r\n{\r\n\tif (gm_PS_FogEnabled)\r\n\t{\r\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \r\n\t}\r\n}\r\n\r\n#define _YY_GLSL_ 1\n\r\n\r\n\r\n//\r\n//  shColorReplaceBlendExt\r\n//\r\n//      Replaces multiple colors with others. Can replace \r\n//      similar colors while preserving shading.\r\n//\r\n//      colorIn             color to replace (vec4)\r\n//      colorOut            replacement color (vec4)\r\n//      colorTolerance      HSVA tolerances (vec4)\r\n//      blend               1.0 preserves shading of original, \r\n//                          0.0 replaces color as-is (float)\r\n//\r\n//  GMLscripts.com\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\nvarying vec3 v_vPosition;\r\n\r\nconst int maxcolors = 9;\r\n\r\nuniform vec4  colorIn[maxcolors];\r\nuniform vec4  colorOut[maxcolors];\r\nuniform vec4  colorTolerance[maxcolors];\r\nuniform vec4  blend[maxcolors];\r\n\r\nuniform float effectY;\r\nuniform float playerX;\r\nuniform float playerY;\r\nuniform int   special;\r\nuniform float time;\r\n// 1 - American Wrastor\r\n// 2 - Genesis Forsburn (moved to separate shader)\r\n// 3 - Excaliburn\r\n// 4 - Champ Kragg\r\n// 5 - Pool Party Ranno\r\n\r\nvec3 rgb_to_hsv(vec3 col)\r\n{\r\n    float H = 0.0;\r\n    float S = 0.0;\r\n    float V = 0.0;\r\n    \r\n    float M = max(col.r, max(col.g, col.b));\r\n    float m = min(col.r, min(col.g, col.b));\r\n    \r\n    V = M;\r\n    \r\n    float C = M - m;\r\n    \r\n    if (C > 0.0)\r\n    {\r\n        if (M == col.r) H = mod( (col.g - col.b) / C, 6.0);\r\n        if (M == col.g) H = (col.b - col.r) / C + 2.0;\r\n        if (M == col.b) H = (col.r - col.g) / C + 4.0;\r\n        H /= 6.0;\r\n        S = C / V;\r\n    }\r\n    \r\n    return vec3(H, S, V);\r\n}\r\n\r\nvec3 hsv_to_rgb(vec3 col)\r\n{\r\n    float H = col.r;\r\n    float S = col.g;\r\n    float V = col.b;\r\n    \r\n    float C = V * S;\r\n    \r\n    H *= 6.0;\r\n    float X = C * (1.0 - abs( mod(H, 2.0) - 1.0 ));\r\n    float m = V - C;\r\n    C += m;\r\n    X += m;\r\n    \r\n    if (H < 1.0) return vec3(C, X, m);\r\n    if (H < 2.0) return vec3(X, C, m);\r\n    if (H < 3.0) return vec3(m, C, X);\r\n    if (H < 4.0) return vec3(m, X, C);\r\n    if (H < 5.0) return vec3(X, m, C);\r\n    else         return vec3(C, m, X);\r\n}\r\n\r\nvoid main()\r\n{\r\n    vec4 colorPixel = texture2D( gm_BaseTexture, v_vTexcoord );\r\n    \r\n    vec4 colorResult = colorPixel;\r\n    \r\n    vec4 colorHSV = vec4( rgb_to_hsv( colorPixel.rgb ), colorPixel.a);\r\n    \r\n    \r\n    for (int i=0; i< maxcolors; i+=1)\r\n    {            \r\n        vec4 colorInHSV = vec4( rgb_to_hsv( colorIn[i].rgb ), colorIn[i].a);\r\n        \r\n        vec4 colorDelta = colorHSV - colorInHSV;\r\n        \r\n        if (abs(colorDelta.r)>0.5) colorDelta.r -= sign(colorDelta.r);\r\n    \r\n        if ( all( lessThanEqual( abs(colorDelta), colorTolerance[i] ) ) ) \r\n        {\r\n            vec4 tColorOut = colorOut[i];\r\n\t\t\tif (special == 7){\r\n\t\t\t\tif (i < 3){\r\n\t\t\t\t\t//float t_y = floor((playerY - v_vPosition.y) * 0.5) * 2.0;\r\n\t\t\t\t\t//float t_x = floor((playerX - v_vPosition.x) * 0.5) * 2.0;\r\n\t\t\t\t\tfloat t_y = floor((v_vPosition.y) * 0.5) * 2.0;\r\n\t\t\t\t\tfloat t_x = floor((playerX - v_vPosition.x) * 0.5) * 2.0;\r\n\t\t\t\t\tif (t_y > effectY + 4.0*sin((t_x - floor(time*0.5))*0.2)){\r\n\t\t\t\t\t\ttColorOut.r = 255.0/255.0;\r\n                        tColorOut.g = 181.0/255.0;\r\n                        tColorOut.b = 65.0/255.0;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else if (special == 8) {\r\n                if (i == 0){\r\n                    if (v_vPosition.y < effectY){\r\n                        //replace with snow texture\r\n                        tColorOut.r = 0.81960;//0.73725;//v_vTexcoord.x;\r\n                        tColorOut.g = 0.83529;//0.76078;//v_vTexcoord.y;\r\n                        tColorOut.b = 0.86667;//0.80784;\r\n                    } else if (v_vPosition.y < effectY + 8.0){\r\n                        float t_y = floor((playerY - v_vPosition.y) * 0.5) * 2.0;\r\n                        float t_a = (t_y - effectY)*0.125;\r\n                        float t_dither = (t_a * 4.0) + 1.0; //1 at top 4 at bottom\r\n                        float t_x = floor((playerX - v_vPosition.x) * 0.5) + mod(t_dither, 2.0);\r\n                        t_y = floor(v_vPosition.y * 0.5) * 2.0;\r\n                        t_a = (t_y - effectY)*0.125;\r\n                        if (mod(t_x, 2.0) < 1.0){\r\n                            tColorOut.r = mix(0.81960,colorOut[i].r,t_a);\r\n                            tColorOut.g = mix(0.83529,colorOut[i].g,t_a);\r\n                            tColorOut.b = mix(0.86667,colorOut[i].b,t_a);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            \r\n            //American Wrastor\r\n            float t_x = floor((playerX - v_vPosition.x) * 0.5);\r\n            float t_y = floor((playerY - v_vPosition.y) * 0.5);\r\n            float modx = mod(t_x,4.0);\r\n            float mody = mod(t_y,4.0);\r\n            float isStar = float(special == 1 && i == 1 && ((modx == 0.0 && mody == 0.0) || (modx == 2.0 && mody == 2.0)));\r\n            tColorOut.r = mix(tColorOut.r, 1.0, isStar * 0.5);\r\n            tColorOut.g = mix(tColorOut.g, 1.0, isStar * 0.5);\r\n            tColorOut.b = mix(tColorOut.b, 1.0, isStar * 0.5);\r\n            \r\n            \r\n            //Excaliburn\r\n\t\t\t//bool isGolden = ((tColorOut.r == 228.0/255.0 && tColorOut.g == 228.0/255.0 && tColorOut.b == 240.0/255.0) || (tColorOut.r == 121.0/255.0 && tColorOut.g == 122.0/255.0 && tColorOut.b == 195.0/255.0));\r\n            float isScanline = float(((special == 3 && (i == 2 || i == 3)) || (special == 6)) && t_y > t_x * -0.3 + mod(time*2.0,200.0) - 100.0 && t_y < t_x * -0.3 + mod(time*2.0,200.0) - 96.0);\r\n\t\t\ttColorOut.r = mix(tColorOut.r, 1.0, isScanline * 0.7);\r\n            tColorOut.g = mix(tColorOut.g, 1.0, isScanline * 0.7);\r\n            tColorOut.b = mix(tColorOut.b, 1.0, isScanline * 0.7);\r\n            //Champion Kragg\r\n            isScanline = float(special == 4 && i == 0 && ((mod(t_y,200.0) > mod(t_x + time*2.0,200.0) && mod(t_y,200.0) < mod(t_x + time*2.0 + 6.0,200.0))));\r\n            tColorOut.r = mix(tColorOut.r, 1.0, isScanline * 0.7);\r\n            tColorOut.g = mix(tColorOut.g, 1.0, isScanline * 0.7);\r\n            tColorOut.b = mix(tColorOut.b, 1.0, isScanline * 0.7);\r\n\t\t\t\r\n\t\t\t//Pool Party Ranno\r\n            mody = mod(t_y,6.0);\r\n            bool inFlowerPos1 = (modx == 1.0 && (mody == 0.0 || mody == 2.0)) || (mody == 1.0 && (modx == 0.0 || modx == 2.0));\r\n            bool inFlowerPos2 = (modx == 3.0 && (mody == 3.0 || mody == 5.0)) || (mody == 4.0 && (modx == 0.0 || modx == 2.0));\r\n            bool inFlowerPos = (inFlowerPos1 || inFlowerPos2);\r\n            float isFlower = float(special == 5 && i == 2 && inFlowerPos);\r\n            tColorOut.r = mix(tColorOut.r, 1.0, isFlower * 0.8);\r\n            tColorOut.g = mix(tColorOut.g, 1.0, isFlower * 0.8);\r\n            tColorOut.b = mix(tColorOut.b, 1.0, isFlower * 0.8);\r\n            \r\n            \r\n            vec4 colorOutHSV = vec4( rgb_to_hsv( tColorOut.rgb ), tColorOut.a);\r\n            \r\n            colorResult = mix( tColorOut,\r\n                              vec4 ( hsv_to_rgb( vec3( mod( colorOutHSV.r + colorDelta.r, 1.0 ),\r\n                                                     clamp( colorOutHSV.g + colorDelta.g, 0.0, 1.0 ),\r\n                                                     clamp( colorOutHSV.b + colorDelta.b, 0.0, 1.0 ) ) ), \r\n                                     clamp( tColorOut.a + colorDelta.a, 0.0, 1.0) ),\r\n                              blend[i].x );\r\n        }\r\n    }\r\n    \r\n    //Genesis Forsburn\r\n    /*if (special == 2){\r\n        for (float xOffset = -0.01; xOffset <= 0.01; xOffset += 0.005){\r\n            for (float yOffset = -0.01; yOffset <= 0.01; yOffset += 0.005){\r\n                vec4 colorPixel2 = texture2D( gm_BaseTexture, v_vTexcoord + vec2(xOffset, yOffset) );\r\n                vec4 colorHSV2 = vec4( rgb_to_hsv( colorPixel2.rgb ), colorPixel2.a);\r\n                \r\n                vec4 colorInHSV2 = vec4( rgb_to_hsv( colorIn[2].rgb ), colorIn[2].a);\r\n                vec4 colorInHSV3 = vec4( rgb_to_hsv( colorIn[3].rgb ), colorIn[3].a);\r\n                vec4 colorInHSV4 = vec4( rgb_to_hsv( colorIn[4].rgb ), colorIn[4].a);\r\n                vec4 colorDelta2 = colorHSV2 - colorInHSV2;\r\n                vec4 colorDelta3 = colorHSV2 - colorInHSV3;\r\n                vec4 colorDelta4 = colorHSV2 - colorInHSV4;\r\n                if (abs(colorDelta2.r)>0.5) colorDelta2.r -= sign(colorDelta2.r);\r\n                if (abs(colorDelta3.r)>0.5) colorDelta3.r -= sign(colorDelta3.r);\r\n                if (abs(colorDelta4.r)>0.5) colorDelta4.r -= sign(colorDelta4.r);\r\n                \r\n                if ( all( lessThanEqual( abs(colorDelta2), colorTolerance[2] ) )\r\n                ||   all( lessThanEqual( abs(colorDelta3), colorTolerance[3] ) )\r\n                ||   all( lessThanEqual( abs(colorDelta4), colorTolerance[4] ) )) {\r\n                    colorResult.r += 0.1;\r\n                    if (colorResult.a == 0.0){\r\n                        colorResult.g = 0.0;\r\n                        colorResult.b = 0.0;\r\n                    }\r\n                    colorResult.a = clamp(colorResult.a + 0.1, 0.1, 1.0);\r\n                }\r\n            }\r\n        }\r\n    }*/\r\n    \r\n    gl_FragColor = v_vColour * colorResult;\r\n}\r\n\r\n","#define\tMATRIX_VIEW \t\t\t\t\t0\r\n#define\tMATRIX_PROJECTION \t\t\t\t1\r\n#define\tMATRIX_WORLD \t\t\t\t\t2\r\n#define\tMATRIX_WORLD_VIEW \t\t\t\t3\r\n#define\tMATRIX_WORLD_VIEW_PROJECTION \t4\r\n#define\tMATRICES_MAX\t\t\t\t\t5\r\n\r\nfloat4x4 \tgm_Matrices[MATRICES_MAX] : register(c0);\r\n\r\nbool \tgm_LightingEnabled;\r\nbool \tgm_VS_FogEnabled;\r\nfloat \tgm_FogStart;\r\nfloat \tgm_RcpFogRange;\r\n\r\n#define\tMAX_VS_LIGHTS\t\t\t\t\t8\r\nfloat4 gm_AmbientColour;\t\t\t\t\t\t\t// rgb=colour, a=1\r\nfloat3 gm_Lights_Direction[MAX_VS_LIGHTS];\t\t\t// normalised direction\r\nfloat4 gm_Lights_PosRange[MAX_VS_LIGHTS];\t\t\t// X,Y,Z position,  W range\r\nfloat4 gm_Lights_Colour[MAX_VS_LIGHTS];\t\t\t\t// rgb=colour, a=1\r\n\r\n","// GameMaker reserved and common types/inputs\r\n\r\nsampler2D gm_BaseTexture : register(S0);\r\n\r\nbool \tgm_PS_FogEnabled;\r\nfloat4 \tgm_FogColour;\r\nbool \tgm_AlphaTestEnabled;\r\nfloat4\tgm_AlphaRefValue;\r\n","in_Position","in_Colour","in_TextureCoord","shGenesisForsburn","precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\r\n\r\nuniform sampler2D gm_BaseTexture;\r\n\r\nuniform bool gm_PS_FogEnabled;\r\nuniform vec4 gm_FogColour;\r\nuniform bool gm_AlphaTestEnabled;\r\nuniform float gm_AlphaRefValue;\r\n\r\nvoid DoAlphaTest(vec4 SrcColour)\r\n{\r\n\tif (gm_AlphaTestEnabled)\r\n\t{\r\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\r\n\t\t{\r\n\t\t\tdiscard;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid DoFog(inout vec4 SrcColour, float fogval)\r\n{\r\n\tif (gm_PS_FogEnabled)\r\n\t{\r\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \r\n\t}\r\n}\r\n\r\n#define _YY_GLSLES_ 1\n//\r\n//  shColorReplaceBlendExt\r\n//\r\n//      Replaces multiple colors with others. Can replace \r\n//      similar colors while preserving shading.\r\n//\r\n//      colorIn             color to replace (vec4)\r\n//      colorOut            replacement color (vec4)\r\n//      colorTolerance      HSVA tolerances (vec4)\r\n//      blend               1.0 preserves shading of original, \r\n//                          0.0 replaces color as-is (float)\r\n//\r\n//  GMLscripts.com\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\nvarying vec3 v_vPosition;\r\n\r\nuniform float time;\r\n\r\nvec3 rgb_to_hsv(vec3 col)\r\n{\r\n    float H = 0.0;\r\n    float S = 0.0;\r\n    float V = 0.0;\r\n    \r\n    float M = max(col.r, max(col.g, col.b));\r\n    float m = min(col.r, min(col.g, col.b));\r\n    \r\n    V = M;\r\n    \r\n    float C = M - m;\r\n    \r\n    if (C > 0.0)\r\n    {\r\n        if (M == col.r) H = mod( (col.g - col.b) / C, 6.0);\r\n        if (M == col.g) H = (col.b - col.r) / C + 2.0;\r\n        if (M == col.b) H = (col.r - col.g) / C + 4.0;\r\n        H /= 6.0;\r\n        S = C / V;\r\n    }\r\n    \r\n    return vec3(H, S, V);\r\n}\r\n\r\nvec3 hsv_to_rgb(vec3 col)\r\n{\r\n    float H = col.r;\r\n    float S = col.g;\r\n    float V = col.b;\r\n    \r\n    float C = V * S;\r\n    \r\n    H *= 6.0;\r\n    float X = C * (1.0 - abs( mod(H, 2.0) - 1.0 ));\r\n    float m = V - C;\r\n    C += m;\r\n    X += m;\r\n    \r\n    if (H < 1.0) return vec3(C, X, m);\r\n    if (H < 2.0) return vec3(X, C, m);\r\n    if (H < 3.0) return vec3(m, C, X);\r\n    if (H < 4.0) return vec3(m, X, C);\r\n    if (H < 5.0) return vec3(X, m, C);\r\n    else         return vec3(C, m, X);\r\n}\r\n\r\nvoid main()\r\n{\r\n    //vec4 colorPixel = texture2D( gm_BaseTexture, v_vTexcoord );\r\n    \r\n    vec4 colorResult = vec4(1.0, 0.223, 0.247, 0.0);\r\n    \r\n    /*float flashFactor = clamp(sin(time * 0.022) * 2.4 - 1.4, 0.0, 1.0);\r\n    colorResult.g += flashFactor * 0.777;\r\n    colorResult.b += flashFactor * 0.753;*/\r\n    \r\n    //vec4 colorHSV = vec4( rgb_to_hsv( colorPixel.rgb ), colorPixel.a);\r\n    \r\n    //Genesis Forsburn\r\n    float numNearbyFlames = 0.0;\r\n    float glowRange = 0.01;\r\n    for (float xOffset = -glowRange; xOffset <= glowRange; xOffset += 0.005){\r\n        for (float yOffset = -glowRange; yOffset <= glowRange; yOffset += 0.005){\r\n            vec4 colorPixel2 = texture2D( gm_BaseTexture, v_vTexcoord + vec2(xOffset, yOffset) );\r\n            vec4 colorHSV2 = vec4( rgb_to_hsv( colorPixel2.rgb ), colorPixel2.a);\r\n            \r\n            vec4 colorInHSV2 = vec4( rgb_to_hsv( vec3(1.0, 233.0/255.0, 0.0) ), 1.0);\r\n            vec4 colorInHSV3 = vec4( rgb_to_hsv( vec3(1.0, 127.0/255.0, 0.0) ), 1.0);\r\n            vec4 colorInHSV4 = vec4( rgb_to_hsv( vec3(170.0/255.0, 0.0, 0.0) ), 1.0);\r\n            vec4 colorDelta2 = colorHSV2 - colorInHSV2;\r\n            vec4 colorDelta3 = colorHSV2 - colorInHSV3;\r\n            vec4 colorDelta4 = colorHSV2 - colorInHSV4;\r\n            if (abs(colorDelta2.r)>0.5) colorDelta2.r -= sign(colorDelta2.r);\r\n            if (abs(colorDelta3.r)>0.5) colorDelta3.r -= sign(colorDelta3.r);\r\n            if (abs(colorDelta4.r)>0.5) colorDelta4.r -= sign(colorDelta4.r);\r\n            \r\n            if ( all( lessThanEqual( abs(colorDelta2), vec4(0.05, 0.1, 0.1, 1.0) ) )\r\n            ||   all( lessThanEqual( abs(colorDelta3), vec4(0.05, 0.1, 0.1, 1.0) ) )\r\n            ||   all( lessThanEqual( abs(colorDelta4), vec4(0.1, 0.15, 0.1, 1.0) ) )) {\r\n                numNearbyFlames += 1.0;\r\n            }\r\n        }\r\n    }\r\n\r\n    colorResult.a = clamp(numNearbyFlames * 0.06, 0.0, 1.0);// * ((sin(time * 0.1) + 1.0) * 0.5);\r\n    \r\n    gl_FragColor = v_vColour * colorResult;\r\n}\r\n\r\n","#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\r\n\r\nuniform sampler2D gm_BaseTexture;\r\n\r\nuniform bool gm_PS_FogEnabled;\r\nuniform vec4 gm_FogColour;\r\nuniform bool gm_AlphaTestEnabled;\r\nuniform float gm_AlphaRefValue;\r\n\r\nvoid DoAlphaTest(vec4 SrcColour)\r\n{\r\n\tif (gm_AlphaTestEnabled)\r\n\t{\r\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\r\n\t\t{\r\n\t\t\tdiscard;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid DoFog(inout vec4 SrcColour, float fogval)\r\n{\r\n\tif (gm_PS_FogEnabled)\r\n\t{\r\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \r\n\t}\r\n}\r\n\r\n#define _YY_GLSL_ 1\n//\r\n//  shColorReplaceBlendExt\r\n//\r\n//      Replaces multiple colors with others. Can replace \r\n//      similar colors while preserving shading.\r\n//\r\n//      colorIn             color to replace (vec4)\r\n//      colorOut            replacement color (vec4)\r\n//      colorTolerance      HSVA tolerances (vec4)\r\n//      blend               1.0 preserves shading of original, \r\n//                          0.0 replaces color as-is (float)\r\n//\r\n//  GMLscripts.com\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\nvarying vec3 v_vPosition;\r\n\r\nuniform float time;\r\n\r\nvec3 rgb_to_hsv(vec3 col)\r\n{\r\n    float H = 0.0;\r\n    float S = 0.0;\r\n    float V = 0.0;\r\n    \r\n    float M = max(col.r, max(col.g, col.b));\r\n    float m = min(col.r, min(col.g, col.b));\r\n    \r\n    V = M;\r\n    \r\n    float C = M - m;\r\n    \r\n    if (C > 0.0)\r\n    {\r\n        if (M == col.r) H = mod( (col.g - col.b) / C, 6.0);\r\n        if (M == col.g) H = (col.b - col.r) / C + 2.0;\r\n        if (M == col.b) H = (col.r - col.g) / C + 4.0;\r\n        H /= 6.0;\r\n        S = C / V;\r\n    }\r\n    \r\n    return vec3(H, S, V);\r\n}\r\n\r\nvec3 hsv_to_rgb(vec3 col)\r\n{\r\n    float H = col.r;\r\n    float S = col.g;\r\n    float V = col.b;\r\n    \r\n    float C = V * S;\r\n    \r\n    H *= 6.0;\r\n    float X = C * (1.0 - abs( mod(H, 2.0) - 1.0 ));\r\n    float m = V - C;\r\n    C += m;\r\n    X += m;\r\n    \r\n    if (H < 1.0) return vec3(C, X, m);\r\n    if (H < 2.0) return vec3(X, C, m);\r\n    if (H < 3.0) return vec3(m, C, X);\r\n    if (H < 4.0) return vec3(m, X, C);\r\n    if (H < 5.0) return vec3(X, m, C);\r\n    else         return vec3(C, m, X);\r\n}\r\n\r\nvoid main()\r\n{\r\n    //vec4 colorPixel = texture2D( gm_BaseTexture, v_vTexcoord );\r\n    \r\n    vec4 colorResult = vec4(1.0, 0.223, 0.247, 0.0);\r\n    \r\n    /*float flashFactor = clamp(sin(time * 0.022) * 2.4 - 1.4, 0.0, 1.0);\r\n    colorResult.g += flashFactor * 0.777;\r\n    colorResult.b += flashFactor * 0.753;*/\r\n    \r\n    //vec4 colorHSV = vec4( rgb_to_hsv( colorPixel.rgb ), colorPixel.a);\r\n    \r\n    //Genesis Forsburn\r\n    float numNearbyFlames = 0.0;\r\n    float glowRange = 0.01;\r\n    for (float xOffset = -glowRange; xOffset <= glowRange; xOffset += 0.005){\r\n        for (float yOffset = -glowRange; yOffset <= glowRange; yOffset += 0.005){\r\n            vec4 colorPixel2 = texture2D( gm_BaseTexture, v_vTexcoord + vec2(xOffset, yOffset) );\r\n            vec4 colorHSV2 = vec4( rgb_to_hsv( colorPixel2.rgb ), colorPixel2.a);\r\n            \r\n            vec4 colorInHSV2 = vec4( rgb_to_hsv( vec3(1.0, 233.0/255.0, 0.0) ), 1.0);\r\n            vec4 colorInHSV3 = vec4( rgb_to_hsv( vec3(1.0, 127.0/255.0, 0.0) ), 1.0);\r\n            vec4 colorInHSV4 = vec4( rgb_to_hsv( vec3(170.0/255.0, 0.0, 0.0) ), 1.0);\r\n            vec4 colorDelta2 = colorHSV2 - colorInHSV2;\r\n            vec4 colorDelta3 = colorHSV2 - colorInHSV3;\r\n            vec4 colorDelta4 = colorHSV2 - colorInHSV4;\r\n            if (abs(colorDelta2.r)>0.5) colorDelta2.r -= sign(colorDelta2.r);\r\n            if (abs(colorDelta3.r)>0.5) colorDelta3.r -= sign(colorDelta3.r);\r\n            if (abs(colorDelta4.r)>0.5) colorDelta4.r -= sign(colorDelta4.r);\r\n            \r\n            if ( all( lessThanEqual( abs(colorDelta2), vec4(0.05, 0.1, 0.1, 1.0) ) )\r\n            ||   all( lessThanEqual( abs(colorDelta3), vec4(0.05, 0.1, 0.1, 1.0) ) )\r\n            ||   all( lessThanEqual( abs(colorDelta4), vec4(0.1, 0.15, 0.1, 1.0) ) )) {\r\n                numNearbyFlames += 1.0;\r\n            }\r\n        }\r\n    }\r\n\r\n    colorResult.a = clamp(numNearbyFlames * 0.06, 0.0, 1.0);// * ((sin(time * 0.1) + 1.0) * 0.5);\r\n    \r\n    gl_FragColor = v_vColour * colorResult;\r\n}\r\n\r\n","shGenesisClairen","precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\r\n\r\nuniform sampler2D gm_BaseTexture;\r\n\r\nuniform bool gm_PS_FogEnabled;\r\nuniform vec4 gm_FogColour;\r\nuniform bool gm_AlphaTestEnabled;\r\nuniform float gm_AlphaRefValue;\r\n\r\nvoid DoAlphaTest(vec4 SrcColour)\r\n{\r\n\tif (gm_AlphaTestEnabled)\r\n\t{\r\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\r\n\t\t{\r\n\t\t\tdiscard;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid DoFog(inout vec4 SrcColour, float fogval)\r\n{\r\n\tif (gm_PS_FogEnabled)\r\n\t{\r\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \r\n\t}\r\n}\r\n\r\n#define _YY_GLSLES_ 1\n\r\n\r\n//\r\n//  shColorReplaceBlendExt\r\n//\r\n//      Replaces multiple colors with others. Can replace \r\n//      similar colors while preserving shading.\r\n//\r\n//      colorIn             color to replace (vec4)\r\n//      colorOut            replacement color (vec4)\r\n//      colorTolerance      HSVA tolerances (vec4)\r\n//      blend               1.0 preserves shading of original, \r\n//                          0.0 replaces color as-is (float)\r\n//\r\n//  GMLscripts.com\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\nvarying vec3 v_vPosition;\r\n\r\nvec3 rgb_to_hsv(vec3 col)\r\n{\r\n    float H = 0.0;\r\n    float S = 0.0;\r\n    float V = 0.0;\r\n    \r\n    float M = max(col.r, max(col.g, col.b));\r\n    float m = min(col.r, min(col.g, col.b));\r\n    \r\n    V = M;\r\n    \r\n    float C = M - m;\r\n    \r\n    if (C > 0.0)\r\n    {\r\n        if (M == col.r) H = mod( (col.g - col.b) / C, 6.0);\r\n        if (M == col.g) H = (col.b - col.r) / C + 2.0;\r\n        if (M == col.b) H = (col.r - col.g) / C + 4.0;\r\n        H /= 6.0;\r\n        S = C / V;\r\n    }\r\n    \r\n    return vec3(H, S, V);\r\n}\r\n\r\nvec3 hsv_to_rgb(vec3 col)\r\n{\r\n    float H = col.r;\r\n    float S = col.g;\r\n    float V = col.b;\r\n    \r\n    float C = V * S;\r\n    \r\n    H *= 6.0;\r\n    float X = C * (1.0 - abs( mod(H, 2.0) - 1.0 ));\r\n    float m = V - C;\r\n    C += m;\r\n    X += m;\r\n    \r\n    if (H < 1.0) return vec3(C, X, m);\r\n    if (H < 2.0) return vec3(X, C, m);\r\n    if (H < 3.0) return vec3(m, C, X);\r\n    if (H < 4.0) return vec3(m, X, C);\r\n    if (H < 5.0) return vec3(X, m, C);\r\n    else         return vec3(C, m, X);\r\n}\r\n\r\nvoid main()\r\n{\r\n    vec4 colorResult = vec4(1.0, 0.223, 0.247, 0.0);\r\n    \r\n    //Genesis Forsburn\r\n    float numNearbyFlames = 0.0;\r\n    float glowRange = 0.015;\r\n    for (float xOffset = -glowRange; xOffset <= glowRange; xOffset += 0.005){\r\n        for (float yOffset = -glowRange; yOffset <= glowRange; yOffset += 0.005){\r\n            vec4 colorPixel2 = texture2D( gm_BaseTexture, v_vTexcoord + vec2(xOffset, yOffset) );\r\n            vec4 colorHSV2 = vec4( rgb_to_hsv( colorPixel2.rgb ), colorPixel2.a);\r\n            \r\n            vec4 colorInHSV2 = vec4( rgb_to_hsv( vec3(0.0, 1.0, 247.0/255.0) ), 1.0);\r\n            vec4 colorDelta2 = colorHSV2 - colorInHSV2;\r\n            if (abs(colorDelta2.r)>0.5) colorDelta2.r -= sign(colorDelta2.r);\r\n            \r\n            if ( all( lessThanEqual( abs(colorDelta2), vec4(0.11, 0.85, 0.2, 1.0) ) )) {\r\n                numNearbyFlames += 1.0;\r\n            }\r\n        }\r\n    }\r\n\r\n    colorResult.a = clamp(numNearbyFlames * 0.06, 0.0, 1.0);\r\n    \r\n    gl_FragColor = v_vColour * colorResult;\r\n}\r\n\r\n","#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\r\n\r\nuniform sampler2D gm_BaseTexture;\r\n\r\nuniform bool gm_PS_FogEnabled;\r\nuniform vec4 gm_FogColour;\r\nuniform bool gm_AlphaTestEnabled;\r\nuniform float gm_AlphaRefValue;\r\n\r\nvoid DoAlphaTest(vec4 SrcColour)\r\n{\r\n\tif (gm_AlphaTestEnabled)\r\n\t{\r\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\r\n\t\t{\r\n\t\t\tdiscard;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid DoFog(inout vec4 SrcColour, float fogval)\r\n{\r\n\tif (gm_PS_FogEnabled)\r\n\t{\r\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \r\n\t}\r\n}\r\n\r\n#define _YY_GLSL_ 1\n\r\n\r\n//\r\n//  shColorReplaceBlendExt\r\n//\r\n//      Replaces multiple colors with others. Can replace \r\n//      similar colors while preserving shading.\r\n//\r\n//      colorIn             color to replace (vec4)\r\n//      colorOut            replacement color (vec4)\r\n//      colorTolerance      HSVA tolerances (vec4)\r\n//      blend               1.0 preserves shading of original, \r\n//                          0.0 replaces color as-is (float)\r\n//\r\n//  GMLscripts.com\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\nvarying vec3 v_vPosition;\r\n\r\nvec3 rgb_to_hsv(vec3 col)\r\n{\r\n    float H = 0.0;\r\n    float S = 0.0;\r\n    float V = 0.0;\r\n    \r\n    float M = max(col.r, max(col.g, col.b));\r\n    float m = min(col.r, min(col.g, col.b));\r\n    \r\n    V = M;\r\n    \r\n    float C = M - m;\r\n    \r\n    if (C > 0.0)\r\n    {\r\n        if (M == col.r) H = mod( (col.g - col.b) / C, 6.0);\r\n        if (M == col.g) H = (col.b - col.r) / C + 2.0;\r\n        if (M == col.b) H = (col.r - col.g) / C + 4.0;\r\n        H /= 6.0;\r\n        S = C / V;\r\n    }\r\n    \r\n    return vec3(H, S, V);\r\n}\r\n\r\nvec3 hsv_to_rgb(vec3 col)\r\n{\r\n    float H = col.r;\r\n    float S = col.g;\r\n    float V = col.b;\r\n    \r\n    float C = V * S;\r\n    \r\n    H *= 6.0;\r\n    float X = C * (1.0 - abs( mod(H, 2.0) - 1.0 ));\r\n    float m = V - C;\r\n    C += m;\r\n    X += m;\r\n    \r\n    if (H < 1.0) return vec3(C, X, m);\r\n    if (H < 2.0) return vec3(X, C, m);\r\n    if (H < 3.0) return vec3(m, C, X);\r\n    if (H < 4.0) return vec3(m, X, C);\r\n    if (H < 5.0) return vec3(X, m, C);\r\n    else         return vec3(C, m, X);\r\n}\r\n\r\nvoid main()\r\n{\r\n    vec4 colorResult = vec4(1.0, 0.223, 0.247, 0.0);\r\n    \r\n    //Genesis Forsburn\r\n    float numNearbyFlames = 0.0;\r\n    float glowRange = 0.015;\r\n    for (float xOffset = -glowRange; xOffset <= glowRange; xOffset += 0.005){\r\n        for (float yOffset = -glowRange; yOffset <= glowRange; yOffset += 0.005){\r\n            vec4 colorPixel2 = texture2D( gm_BaseTexture, v_vTexcoord + vec2(xOffset, yOffset) );\r\n            vec4 colorHSV2 = vec4( rgb_to_hsv( colorPixel2.rgb ), colorPixel2.a);\r\n            \r\n            vec4 colorInHSV2 = vec4( rgb_to_hsv( vec3(0.0, 1.0, 247.0/255.0) ), 1.0);\r\n            vec4 colorDelta2 = colorHSV2 - colorInHSV2;\r\n            if (abs(colorDelta2.r)>0.5) colorDelta2.r -= sign(colorDelta2.r);\r\n            \r\n            if ( all( lessThanEqual( abs(colorDelta2), vec4(0.11, 0.85, 0.2, 1.0) ) )) {\r\n                numNearbyFlames += 1.0;\r\n            }\r\n        }\r\n    }\r\n\r\n    colorResult.a = clamp(numNearbyFlames * 0.06, 0.0, 1.0);\r\n    \r\n    gl_FragColor = v_vColour * colorResult;\r\n}\r\n\r\n","shGenesisSylvanos","precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\r\n\r\nuniform sampler2D gm_BaseTexture;\r\n\r\nuniform bool gm_PS_FogEnabled;\r\nuniform vec4 gm_FogColour;\r\nuniform bool gm_AlphaTestEnabled;\r\nuniform float gm_AlphaRefValue;\r\n\r\nvoid DoAlphaTest(vec4 SrcColour)\r\n{\r\n\tif (gm_AlphaTestEnabled)\r\n\t{\r\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\r\n\t\t{\r\n\t\t\tdiscard;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid DoFog(inout vec4 SrcColour, float fogval)\r\n{\r\n\tif (gm_PS_FogEnabled)\r\n\t{\r\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \r\n\t}\r\n}\r\n\r\n#define _YY_GLSLES_ 1\n\r\n\r\n//\r\n//  shColorReplaceBlendExt\r\n//\r\n//      Replaces multiple colors with others. Can replace \r\n//      similar colors while preserving shading.\r\n//\r\n//      colorIn             color to replace (vec4)\r\n//      colorOut            replacement color (vec4)\r\n//      colorTolerance      HSVA tolerances (vec4)\r\n//      blend               1.0 preserves shading of original, \r\n//                          0.0 replaces color as-is (float)\r\n//\r\n//  GMLscripts.com\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\nvarying vec3 v_vPosition;\r\n\r\nvec3 rgb_to_hsv(vec3 col)\r\n{\r\n    float H = 0.0;\r\n    float S = 0.0;\r\n    float V = 0.0;\r\n    \r\n    float M = max(col.r, max(col.g, col.b));\r\n    float m = min(col.r, min(col.g, col.b));\r\n    \r\n    V = M;\r\n    \r\n    float C = M - m;\r\n    \r\n    if (C > 0.0)\r\n    {\r\n        if (M == col.r) H = mod( (col.g - col.b) / C, 6.0);\r\n        if (M == col.g) H = (col.b - col.r) / C + 2.0;\r\n        if (M == col.b) H = (col.r - col.g) / C + 4.0;\r\n        H /= 6.0;\r\n        S = C / V;\r\n    }\r\n    \r\n    return vec3(H, S, V);\r\n}\r\n\r\nvec3 hsv_to_rgb(vec3 col)\r\n{\r\n    float H = col.r;\r\n    float S = col.g;\r\n    float V = col.b;\r\n    \r\n    float C = V * S;\r\n    \r\n    H *= 6.0;\r\n    float X = C * (1.0 - abs( mod(H, 2.0) - 1.0 ));\r\n    float m = V - C;\r\n    C += m;\r\n    X += m;\r\n    \r\n    if (H < 1.0) return vec3(C, X, m);\r\n    if (H < 2.0) return vec3(X, C, m);\r\n    if (H < 3.0) return vec3(m, C, X);\r\n    if (H < 4.0) return vec3(m, X, C);\r\n    if (H < 5.0) return vec3(X, m, C);\r\n    else         return vec3(C, m, X);\r\n}\r\n\r\nvoid main()\r\n{\r\n    vec4 colorResult = vec4(1.0, 0.223, 0.247, 0.0);\r\n    \r\n    //Genesis Forsburn\r\n    float numNearbyFlames = 0.0;\r\n    float glowRange = 0.02;//0.015;\r\n    for (float xOffset = -glowRange; xOffset <= glowRange; xOffset += 0.005){\r\n        for (float yOffset = -glowRange; yOffset <= glowRange; yOffset += 0.005){\r\n            vec4 colorPixel2 = texture2D( gm_BaseTexture, v_vTexcoord + vec2(xOffset, yOffset) );\r\n            vec4 colorHSV2 = vec4( rgb_to_hsv( colorPixel2.rgb ), colorPixel2.a);\r\n            \r\n            //vec4 colorInHSV2 = vec4( rgb_to_hsv( vec3(126.0/255.0, 167.0/255.0, 87.0/255.0) ), 1.0);\r\n\t\t\tvec4 colorInHSV3 = vec4( rgb_to_hsv( vec3(196.0/255.0, 44.0/255.0, 69.0/255.0) ), 1.0);\r\n\t\t\tvec4 colorInHSV4 = vec4( rgb_to_hsv( vec3(242.0/255.0, 208.0/255.0, 134.0/255.0) ), 1.0);\r\n            //vec4 colorDelta2 = colorHSV2 - colorInHSV2;\r\n\t\t\tvec4 colorDelta3 = colorHSV2 - colorInHSV3;\r\n\t\t\tvec4 colorDelta4 = colorHSV2 - colorInHSV4;\r\n            //if (abs(colorDelta2.r)>0.5) colorDelta2.r -= sign(colorDelta2.r);\r\n\t\t\tif (abs(colorDelta3.r)>0.5) colorDelta3.r -= sign(colorDelta3.r);\r\n\t\t\tif (abs(colorDelta4.r)>0.5) colorDelta4.r -= sign(colorDelta4.r);\r\n            \r\n\t\t\t//if ( all( lessThanEqual( abs(colorDelta2), vec4(0.01, 0.17, 0.6, 1.0) ) )\r\n            if ( all( lessThanEqual( abs(colorDelta3), vec4(0.026, 0.08, 0.34, 1.0) ) )\r\n            ||   all( lessThanEqual( abs(colorDelta4), vec4(0.1, 0.11, 0.08, 1.0) ) )) {\r\n                numNearbyFlames += 1.0;\r\n            }\r\n        }\r\n    }\r\n\r\n    colorResult.a = clamp(numNearbyFlames * 0.06, 0.0, 1.0);\r\n    \r\n    gl_FragColor = v_vColour * colorResult;\r\n}\r\n\r\n","#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\r\n\r\nuniform sampler2D gm_BaseTexture;\r\n\r\nuniform bool gm_PS_FogEnabled;\r\nuniform vec4 gm_FogColour;\r\nuniform bool gm_AlphaTestEnabled;\r\nuniform float gm_AlphaRefValue;\r\n\r\nvoid DoAlphaTest(vec4 SrcColour)\r\n{\r\n\tif (gm_AlphaTestEnabled)\r\n\t{\r\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\r\n\t\t{\r\n\t\t\tdiscard;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid DoFog(inout vec4 SrcColour, float fogval)\r\n{\r\n\tif (gm_PS_FogEnabled)\r\n\t{\r\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \r\n\t}\r\n}\r\n\r\n#define _YY_GLSL_ 1\n\r\n\r\n//\r\n//  shColorReplaceBlendExt\r\n//\r\n//      Replaces multiple colors with others. Can replace \r\n//      similar colors while preserving shading.\r\n//\r\n//      colorIn             color to replace (vec4)\r\n//      colorOut            replacement color (vec4)\r\n//      colorTolerance      HSVA tolerances (vec4)\r\n//      blend               1.0 preserves shading of original, \r\n//                          0.0 replaces color as-is (float)\r\n//\r\n//  GMLscripts.com\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\nvarying vec3 v_vPosition;\r\n\r\nvec3 rgb_to_hsv(vec3 col)\r\n{\r\n    float H = 0.0;\r\n    float S = 0.0;\r\n    float V = 0.0;\r\n    \r\n    float M = max(col.r, max(col.g, col.b));\r\n    float m = min(col.r, min(col.g, col.b));\r\n    \r\n    V = M;\r\n    \r\n    float C = M - m;\r\n    \r\n    if (C > 0.0)\r\n    {\r\n        if (M == col.r) H = mod( (col.g - col.b) / C, 6.0);\r\n        if (M == col.g) H = (col.b - col.r) / C + 2.0;\r\n        if (M == col.b) H = (col.r - col.g) / C + 4.0;\r\n        H /= 6.0;\r\n        S = C / V;\r\n    }\r\n    \r\n    return vec3(H, S, V);\r\n}\r\n\r\nvec3 hsv_to_rgb(vec3 col)\r\n{\r\n    float H = col.r;\r\n    float S = col.g;\r\n    float V = col.b;\r\n    \r\n    float C = V * S;\r\n    \r\n    H *= 6.0;\r\n    float X = C * (1.0 - abs( mod(H, 2.0) - 1.0 ));\r\n    float m = V - C;\r\n    C += m;\r\n    X += m;\r\n    \r\n    if (H < 1.0) return vec3(C, X, m);\r\n    if (H < 2.0) return vec3(X, C, m);\r\n    if (H < 3.0) return vec3(m, C, X);\r\n    if (H < 4.0) return vec3(m, X, C);\r\n    if (H < 5.0) return vec3(X, m, C);\r\n    else         return vec3(C, m, X);\r\n}\r\n\r\nvoid main()\r\n{\r\n    vec4 colorResult = vec4(1.0, 0.223, 0.247, 0.0);\r\n    \r\n    //Genesis Forsburn\r\n    float numNearbyFlames = 0.0;\r\n    float glowRange = 0.02;//0.015;\r\n    for (float xOffset = -glowRange; xOffset <= glowRange; xOffset += 0.005){\r\n        for (float yOffset = -glowRange; yOffset <= glowRange; yOffset += 0.005){\r\n            vec4 colorPixel2 = texture2D( gm_BaseTexture, v_vTexcoord + vec2(xOffset, yOffset) );\r\n            vec4 colorHSV2 = vec4( rgb_to_hsv( colorPixel2.rgb ), colorPixel2.a);\r\n            \r\n            //vec4 colorInHSV2 = vec4( rgb_to_hsv( vec3(126.0/255.0, 167.0/255.0, 87.0/255.0) ), 1.0);\r\n\t\t\tvec4 colorInHSV3 = vec4( rgb_to_hsv( vec3(196.0/255.0, 44.0/255.0, 69.0/255.0) ), 1.0);\r\n\t\t\tvec4 colorInHSV4 = vec4( rgb_to_hsv( vec3(242.0/255.0, 208.0/255.0, 134.0/255.0) ), 1.0);\r\n            //vec4 colorDelta2 = colorHSV2 - colorInHSV2;\r\n\t\t\tvec4 colorDelta3 = colorHSV2 - colorInHSV3;\r\n\t\t\tvec4 colorDelta4 = colorHSV2 - colorInHSV4;\r\n            //if (abs(colorDelta2.r)>0.5) colorDelta2.r -= sign(colorDelta2.r);\r\n\t\t\tif (abs(colorDelta3.r)>0.5) colorDelta3.r -= sign(colorDelta3.r);\r\n\t\t\tif (abs(colorDelta4.r)>0.5) colorDelta4.r -= sign(colorDelta4.r);\r\n            \r\n\t\t\t//if ( all( lessThanEqual( abs(colorDelta2), vec4(0.01, 0.17, 0.6, 1.0) ) )\r\n            if ( all( lessThanEqual( abs(colorDelta3), vec4(0.026, 0.08, 0.34, 1.0) ) )\r\n            ||   all( lessThanEqual( abs(colorDelta4), vec4(0.1, 0.11, 0.08, 1.0) ) )) {\r\n                numNearbyFlames += 1.0;\r\n            }\r\n        }\r\n    }\r\n\r\n    colorResult.a = clamp(numNearbyFlames * 0.06, 0.0, 1.0);\r\n    \r\n    gl_FragColor = v_vColour * colorResult;\r\n}\r\n\r\n","shd_shockwave","#define LOWPREC lowp\n#define\tMATRIX_VIEW \t\t\t\t\t0\r\n#define\tMATRIX_PROJECTION \t\t\t\t1\r\n#define\tMATRIX_WORLD \t\t\t\t\t2\r\n#define\tMATRIX_WORLD_VIEW \t\t\t\t3\r\n#define\tMATRIX_WORLD_VIEW_PROJECTION \t4\r\n#define\tMATRICES_MAX\t\t\t\t\t5\r\n\r\nuniform mat4 gm_Matrices[MATRICES_MAX]; \r\n\r\nuniform bool gm_LightingEnabled;\r\nuniform bool gm_VS_FogEnabled;\r\nuniform float gm_FogStart;\r\nuniform float gm_RcpFogRange;\r\n\r\n#define MAX_VS_LIGHTS\t8\r\n#define MIRROR_WIN32_LIGHTING_EQUATION\r\n\r\n\r\n//#define\tMAX_VS_LIGHTS\t\t\t\t\t8\r\nuniform vec4   gm_AmbientColour;\t\t\t\t\t\t\t// rgb=colour, a=1\r\nuniform vec4   gm_Lights_Direction[MAX_VS_LIGHTS];\t\t// normalised direction\r\nuniform vec4   gm_Lights_PosRange[MAX_VS_LIGHTS];\t\t\t// X,Y,Z position,  W range\r\nuniform vec4   gm_Lights_Colour[MAX_VS_LIGHTS];\t\t\t// rgb=colour, a=1\r\n\r\nfloat CalcFogFactor(vec4 pos)\r\n{\r\n\tif (gm_VS_FogEnabled)\r\n\t{\r\n\t\tvec4 viewpos = gm_Matrices[MATRIX_WORLD_VIEW] * pos;\r\n\t\tfloat fogfactor = ((viewpos.z - gm_FogStart) * gm_RcpFogRange);\r\n\t\treturn fogfactor;\r\n\t}\r\n\telse\r\n\t{\r\n\t\treturn 0.0;\r\n\t}\r\n}\r\n\r\nvec4 DoDirLight(vec3 ws_normal, vec4 dir, vec4 diffusecol)\r\n{\r\n\tfloat dotresult = dot(ws_normal, dir.xyz);\r\n\tdotresult = max(0.0, dotresult);\r\n\r\n\treturn dotresult * diffusecol;\r\n}\r\n\r\nvec4 DoPointLight(vec3 ws_pos, vec3 ws_normal, vec4 posrange, vec4 diffusecol)\r\n{\r\n\tvec3 diffvec = ws_pos - posrange.xyz;\r\n\tfloat veclen = length(diffvec);\r\n\tdiffvec /= veclen;\t// normalise\r\n#ifdef MIRROR_WIN32_LIGHTING_EQUATION\r\n\t// This is based on the Win32 D3D and OpenGL falloff model, where:\r\n\t// Attenuation = 1.0f / (factor0 + (d * factor1) + (d*d * factor2))\r\n\t// For some reason, factor0 is set to 0.0f while factor1 is set to 1.0f/lightrange (on both D3D and OpenGL)\r\n\t// This'll result in no visible falloff as 1.0f / (d / lightrange) will always be larger than 1.0f (if the vertex is within range)\r\n\tfloat atten = 1.0 / (veclen / posrange.w);\r\n\tif (veclen > posrange.w)\r\n\t{\r\n\t\tatten = 0.0;\r\n\t}\r\n#else\r\n\tfloat atten = clamp( (1.0 - (veclen / posrange.w)), 0.0, 1.0);\t\t// storing 1.0f/range instead would save a rcp\r\n#endif\r\n\tfloat dotresult = dot(ws_normal, diffvec);\r\n\tdotresult = max(0.0, dotresult);\r\n\r\n\treturn dotresult * atten * diffusecol;\r\n}\r\n\r\nvec4 DoLighting(vec4 vertexcolour, vec4 objectspacepos, vec3 objectspacenormal)\r\n{\r\n\tif (gm_LightingEnabled)\r\n\t{\r\n\t\t// Normally we'd have the light positions\\\\directions back-transformed from world to object space\r\n\t\t// But to keep things simple for the moment we'll just transform the normal to world space\r\n\t\tvec4 objectspacenormal4 = vec4(objectspacenormal, 0.0);\r\n\t\tvec3 ws_normal;\r\n\t\tws_normal = (gm_Matrices[MATRIX_WORLD_VIEW] * objectspacenormal4).xyz;\r\n\t\tws_normal = -normalize(ws_normal);\r\n\r\n\t\tvec3 ws_pos;\r\n\t\tws_pos = (gm_Matrices[MATRIX_WORLD] * objectspacepos).xyz;\r\n\r\n\t\t// Accumulate lighting from different light types\r\n\t\tvec4 accumcol = vec4(0.0, 0.0, 0.0, 0.0);\t\t\r\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\r\n\t\t{\r\n\t\t\taccumcol += DoDirLight(ws_normal, gm_Lights_Direction[i], gm_Lights_Colour[i]);\r\n\t\t}\r\n\r\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\r\n\t\t{\r\n\t\t\taccumcol += DoPointLight(ws_pos, ws_normal, gm_Lights_PosRange[i], gm_Lights_Colour[i]);\r\n\t\t}\r\n\r\n\t\taccumcol *= vertexcolour;\r\n\t\taccumcol += gm_AmbientColour;\r\n\t\taccumcol = min(vec4(1.0, 1.0, 1.0, 1.0), accumcol);\r\n\t\taccumcol.a = vertexcolour.a;\r\n\t\treturn accumcol;\r\n\t}\r\n\telse\r\n\t{\r\n\t\treturn vertexcolour;\r\n\t}\r\n}\r\n\r\n#define _YY_GLSLES_ 1\nattribute vec3 in_Position;\r\nattribute vec2 in_TextureCoord;\r\n\r\nvarying vec2 v_texcoord;\r\n\r\nvoid main()\r\n{\r\n    gl_Position = gm_Matrices[MATRIX_WORLD_VIEW_PROJECTION] * vec4(in_Position, 1.0);\r\n    v_texcoord = in_TextureCoord;\r\n}\r\n","precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\r\n\r\nuniform sampler2D gm_BaseTexture;\r\n\r\nuniform bool gm_PS_FogEnabled;\r\nuniform vec4 gm_FogColour;\r\nuniform bool gm_AlphaTestEnabled;\r\nuniform float gm_AlphaRefValue;\r\n\r\nvoid DoAlphaTest(vec4 SrcColour)\r\n{\r\n\tif (gm_AlphaTestEnabled)\r\n\t{\r\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\r\n\t\t{\r\n\t\t\tdiscard;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid DoFog(inout vec4 SrcColour, float fogval)\r\n{\r\n\tif (gm_PS_FogEnabled)\r\n\t{\r\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \r\n\t}\r\n}\r\n\r\n#define _YY_GLSLES_ 1\n\r\nvarying vec2 v_texcoord;\r\n\r\nuniform float time;\r\nuniform vec2 mouse_pos;\r\nuniform vec2 resolution;\r\nuniform float shock_amplitude;\r\nuniform float shock_refraction;\r\nuniform float shock_width;\r\n\r\nvoid main()\r\n{ \r\n    vec2 uv = v_texcoord;\r\n    uv.x *= (resolution.x/resolution.y);\r\n    \r\n    vec2 texCoord = v_texcoord;\r\n    \r\n    float centre_x = (mouse_pos.x / resolution.x) * (resolution.x/resolution.y);\r\n    float centre_y = mouse_pos.y / resolution.y;\r\n  \r\n    float dist = distance(uv, vec2(centre_x,centre_y));\r\n    \r\n    if ( (dist <= (time + shock_width)) && (dist >= (time - shock_width)) ) \r\n    {\r\n        float dif = (dist - time); \r\n        float powDiff = 1.0 - pow(abs(dif*shock_amplitude),shock_refraction); \r\n        float diffTime = dif  * powDiff;\r\n        vec2 diffUV = normalize(uv - mouse_pos); \r\n        texCoord = uv + (diffUV * diffTime);\r\n        texCoord.x *= (resolution.y/resolution.x);\r\n    } \r\n \r\n    gl_FragColor = texture2D(gm_BaseTexture,texCoord);\r\n}\r\n","#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n#define\tMATRIX_VIEW \t\t\t\t\t0\r\n#define\tMATRIX_PROJECTION \t\t\t\t1\r\n#define\tMATRIX_WORLD \t\t\t\t\t2\r\n#define\tMATRIX_WORLD_VIEW \t\t\t\t3\r\n#define\tMATRIX_WORLD_VIEW_PROJECTION \t4\r\n#define\tMATRICES_MAX\t\t\t\t\t5\r\n\r\nuniform mat4 gm_Matrices[MATRICES_MAX]; \r\n\r\nuniform bool gm_LightingEnabled;\r\nuniform bool gm_VS_FogEnabled;\r\nuniform float gm_FogStart;\r\nuniform float gm_RcpFogRange;\r\n\r\n#define MAX_VS_LIGHTS\t8\r\n#define MIRROR_WIN32_LIGHTING_EQUATION\r\n\r\n\r\n//#define\tMAX_VS_LIGHTS\t\t\t\t\t8\r\nuniform vec4   gm_AmbientColour;\t\t\t\t\t\t\t// rgb=colour, a=1\r\nuniform vec4   gm_Lights_Direction[MAX_VS_LIGHTS];\t\t// normalised direction\r\nuniform vec4   gm_Lights_PosRange[MAX_VS_LIGHTS];\t\t\t// X,Y,Z position,  W range\r\nuniform vec4   gm_Lights_Colour[MAX_VS_LIGHTS];\t\t\t// rgb=colour, a=1\r\n\r\nfloat CalcFogFactor(vec4 pos)\r\n{\r\n\tif (gm_VS_FogEnabled)\r\n\t{\r\n\t\tvec4 viewpos = gm_Matrices[MATRIX_WORLD_VIEW] * pos;\r\n\t\tfloat fogfactor = ((viewpos.z - gm_FogStart) * gm_RcpFogRange);\r\n\t\treturn fogfactor;\r\n\t}\r\n\telse\r\n\t{\r\n\t\treturn 0.0;\r\n\t}\r\n}\r\n\r\nvec4 DoDirLight(vec3 ws_normal, vec4 dir, vec4 diffusecol)\r\n{\r\n\tfloat dotresult = dot(ws_normal, dir.xyz);\r\n\tdotresult = max(0.0, dotresult);\r\n\r\n\treturn dotresult * diffusecol;\r\n}\r\n\r\nvec4 DoPointLight(vec3 ws_pos, vec3 ws_normal, vec4 posrange, vec4 diffusecol)\r\n{\r\n\tvec3 diffvec = ws_pos - posrange.xyz;\r\n\tfloat veclen = length(diffvec);\r\n\tdiffvec /= veclen;\t// normalise\r\n#ifdef MIRROR_WIN32_LIGHTING_EQUATION\r\n\t// This is based on the Win32 D3D and OpenGL falloff model, where:\r\n\t// Attenuation = 1.0f / (factor0 + (d * factor1) + (d*d * factor2))\r\n\t// For some reason, factor0 is set to 0.0f while factor1 is set to 1.0f/lightrange (on both D3D and OpenGL)\r\n\t// This'll result in no visible falloff as 1.0f / (d / lightrange) will always be larger than 1.0f (if the vertex is within range)\r\n\tfloat atten = 1.0 / (veclen / posrange.w);\r\n\tif (veclen > posrange.w)\r\n\t{\r\n\t\tatten = 0.0;\r\n\t}\r\n#else\r\n\tfloat atten = clamp( (1.0 - (veclen / posrange.w)), 0.0, 1.0);\t\t// storing 1.0f/range instead would save a rcp\r\n#endif\r\n\tfloat dotresult = dot(ws_normal, diffvec);\r\n\tdotresult = max(0.0, dotresult);\r\n\r\n\treturn dotresult * atten * diffusecol;\r\n}\r\n\r\nvec4 DoLighting(vec4 vertexcolour, vec4 objectspacepos, vec3 objectspacenormal)\r\n{\r\n\tif (gm_LightingEnabled)\r\n\t{\r\n\t\t// Normally we'd have the light positions\\\\directions back-transformed from world to object space\r\n\t\t// But to keep things simple for the moment we'll just transform the normal to world space\r\n\t\tvec4 objectspacenormal4 = vec4(objectspacenormal, 0.0);\r\n\t\tvec3 ws_normal;\r\n\t\tws_normal = (gm_Matrices[MATRIX_WORLD_VIEW] * objectspacenormal4).xyz;\r\n\t\tws_normal = -normalize(ws_normal);\r\n\r\n\t\tvec3 ws_pos;\r\n\t\tws_pos = (gm_Matrices[MATRIX_WORLD] * objectspacepos).xyz;\r\n\r\n\t\t// Accumulate lighting from different light types\r\n\t\tvec4 accumcol = vec4(0.0, 0.0, 0.0, 0.0);\t\t\r\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\r\n\t\t{\r\n\t\t\taccumcol += DoDirLight(ws_normal, gm_Lights_Direction[i], gm_Lights_Colour[i]);\r\n\t\t}\r\n\r\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\r\n\t\t{\r\n\t\t\taccumcol += DoPointLight(ws_pos, ws_normal, gm_Lights_PosRange[i], gm_Lights_Colour[i]);\r\n\t\t}\r\n\r\n\t\taccumcol *= vertexcolour;\r\n\t\taccumcol += gm_AmbientColour;\r\n\t\taccumcol = min(vec4(1.0, 1.0, 1.0, 1.0), accumcol);\r\n\t\taccumcol.a = vertexcolour.a;\r\n\t\treturn accumcol;\r\n\t}\r\n\telse\r\n\t{\r\n\t\treturn vertexcolour;\r\n\t}\r\n}\r\n\r\n#define _YY_GLSL_ 1\nattribute vec3 in_Position;\r\nattribute vec2 in_TextureCoord;\r\n\r\nvarying vec2 v_texcoord;\r\n\r\nvoid main()\r\n{\r\n    gl_Position = gm_Matrices[MATRIX_WORLD_VIEW_PROJECTION] * vec4(in_Position, 1.0);\r\n    v_texcoord = in_TextureCoord;\r\n}\r\n","#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\r\n\r\nuniform sampler2D gm_BaseTexture;\r\n\r\nuniform bool gm_PS_FogEnabled;\r\nuniform vec4 gm_FogColour;\r\nuniform bool gm_AlphaTestEnabled;\r\nuniform float gm_AlphaRefValue;\r\n\r\nvoid DoAlphaTest(vec4 SrcColour)\r\n{\r\n\tif (gm_AlphaTestEnabled)\r\n\t{\r\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\r\n\t\t{\r\n\t\t\tdiscard;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid DoFog(inout vec4 SrcColour, float fogval)\r\n{\r\n\tif (gm_PS_FogEnabled)\r\n\t{\r\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \r\n\t}\r\n}\r\n\r\n#define _YY_GLSL_ 1\n\r\nvarying vec2 v_texcoord;\r\n\r\nuniform float time;\r\nuniform vec2 mouse_pos;\r\nuniform vec2 resolution;\r\nuniform float shock_amplitude;\r\nuniform float shock_refraction;\r\nuniform float shock_width;\r\n\r\nvoid main()\r\n{ \r\n    vec2 uv = v_texcoord;\r\n    uv.x *= (resolution.x/resolution.y);\r\n    \r\n    vec2 texCoord = v_texcoord;\r\n    \r\n    float centre_x = (mouse_pos.x / resolution.x) * (resolution.x/resolution.y);\r\n    float centre_y = mouse_pos.y / resolution.y;\r\n  \r\n    float dist = distance(uv, vec2(centre_x,centre_y));\r\n    \r\n    if ( (dist <= (time + shock_width)) && (dist >= (time - shock_width)) ) \r\n    {\r\n        float dif = (dist - time); \r\n        float powDiff = 1.0 - pow(abs(dif*shock_amplitude),shock_refraction); \r\n        float diffTime = dif  * powDiff;\r\n        vec2 diffUV = normalize(uv - mouse_pos); \r\n        texCoord = uv + (diffUV * diffTime);\r\n        texCoord.x *= (resolution.y/resolution.x);\r\n    } \r\n \r\n    gl_FragColor = texture2D(gm_BaseTexture,texCoord);\r\n}\r\n","shd_ice_shockwave","#define LOWPREC lowp\n#define\tMATRIX_VIEW \t\t\t\t\t0\r\n#define\tMATRIX_PROJECTION \t\t\t\t1\r\n#define\tMATRIX_WORLD \t\t\t\t\t2\r\n#define\tMATRIX_WORLD_VIEW \t\t\t\t3\r\n#define\tMATRIX_WORLD_VIEW_PROJECTION \t4\r\n#define\tMATRICES_MAX\t\t\t\t\t5\r\n\r\nuniform mat4 gm_Matrices[MATRICES_MAX]; \r\n\r\nuniform bool gm_LightingEnabled;\r\nuniform bool gm_VS_FogEnabled;\r\nuniform float gm_FogStart;\r\nuniform float gm_RcpFogRange;\r\n\r\n#define MAX_VS_LIGHTS\t8\r\n#define MIRROR_WIN32_LIGHTING_EQUATION\r\n\r\n\r\n//#define\tMAX_VS_LIGHTS\t\t\t\t\t8\r\nuniform vec4   gm_AmbientColour;\t\t\t\t\t\t\t// rgb=colour, a=1\r\nuniform vec4   gm_Lights_Direction[MAX_VS_LIGHTS];\t\t// normalised direction\r\nuniform vec4   gm_Lights_PosRange[MAX_VS_LIGHTS];\t\t\t// X,Y,Z position,  W range\r\nuniform vec4   gm_Lights_Colour[MAX_VS_LIGHTS];\t\t\t// rgb=colour, a=1\r\n\r\nfloat CalcFogFactor(vec4 pos)\r\n{\r\n\tif (gm_VS_FogEnabled)\r\n\t{\r\n\t\tvec4 viewpos = gm_Matrices[MATRIX_WORLD_VIEW] * pos;\r\n\t\tfloat fogfactor = ((viewpos.z - gm_FogStart) * gm_RcpFogRange);\r\n\t\treturn fogfactor;\r\n\t}\r\n\telse\r\n\t{\r\n\t\treturn 0.0;\r\n\t}\r\n}\r\n\r\nvec4 DoDirLight(vec3 ws_normal, vec4 dir, vec4 diffusecol)\r\n{\r\n\tfloat dotresult = dot(ws_normal, dir.xyz);\r\n\tdotresult = max(0.0, dotresult);\r\n\r\n\treturn dotresult * diffusecol;\r\n}\r\n\r\nvec4 DoPointLight(vec3 ws_pos, vec3 ws_normal, vec4 posrange, vec4 diffusecol)\r\n{\r\n\tvec3 diffvec = ws_pos - posrange.xyz;\r\n\tfloat veclen = length(diffvec);\r\n\tdiffvec /= veclen;\t// normalise\r\n#ifdef MIRROR_WIN32_LIGHTING_EQUATION\r\n\t// This is based on the Win32 D3D and OpenGL falloff model, where:\r\n\t// Attenuation = 1.0f / (factor0 + (d * factor1) + (d*d * factor2))\r\n\t// For some reason, factor0 is set to 0.0f while factor1 is set to 1.0f/lightrange (on both D3D and OpenGL)\r\n\t// This'll result in no visible falloff as 1.0f / (d / lightrange) will always be larger than 1.0f (if the vertex is within range)\r\n\tfloat atten = 1.0 / (veclen / posrange.w);\r\n\tif (veclen > posrange.w)\r\n\t{\r\n\t\tatten = 0.0;\r\n\t}\r\n#else\r\n\tfloat atten = clamp( (1.0 - (veclen / posrange.w)), 0.0, 1.0);\t\t// storing 1.0f/range instead would save a rcp\r\n#endif\r\n\tfloat dotresult = dot(ws_normal, diffvec);\r\n\tdotresult = max(0.0, dotresult);\r\n\r\n\treturn dotresult * atten * diffusecol;\r\n}\r\n\r\nvec4 DoLighting(vec4 vertexcolour, vec4 objectspacepos, vec3 objectspacenormal)\r\n{\r\n\tif (gm_LightingEnabled)\r\n\t{\r\n\t\t// Normally we'd have the light positions\\\\directions back-transformed from world to object space\r\n\t\t// But to keep things simple for the moment we'll just transform the normal to world space\r\n\t\tvec4 objectspacenormal4 = vec4(objectspacenormal, 0.0);\r\n\t\tvec3 ws_normal;\r\n\t\tws_normal = (gm_Matrices[MATRIX_WORLD_VIEW] * objectspacenormal4).xyz;\r\n\t\tws_normal = -normalize(ws_normal);\r\n\r\n\t\tvec3 ws_pos;\r\n\t\tws_pos = (gm_Matrices[MATRIX_WORLD] * objectspacepos).xyz;\r\n\r\n\t\t// Accumulate lighting from different light types\r\n\t\tvec4 accumcol = vec4(0.0, 0.0, 0.0, 0.0);\t\t\r\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\r\n\t\t{\r\n\t\t\taccumcol += DoDirLight(ws_normal, gm_Lights_Direction[i], gm_Lights_Colour[i]);\r\n\t\t}\r\n\r\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\r\n\t\t{\r\n\t\t\taccumcol += DoPointLight(ws_pos, ws_normal, gm_Lights_PosRange[i], gm_Lights_Colour[i]);\r\n\t\t}\r\n\r\n\t\taccumcol *= vertexcolour;\r\n\t\taccumcol += gm_AmbientColour;\r\n\t\taccumcol = min(vec4(1.0, 1.0, 1.0, 1.0), accumcol);\r\n\t\taccumcol.a = vertexcolour.a;\r\n\t\treturn accumcol;\r\n\t}\r\n\telse\r\n\t{\r\n\t\treturn vertexcolour;\r\n\t}\r\n}\r\n\r\n#define _YY_GLSLES_ 1\nattribute vec3 in_Position;\r\nattribute vec2 in_TextureCoord;\r\n\r\nvarying vec2 v_texcoord;\r\n\r\nvoid main()\r\n{\r\n    gl_Position = gm_Matrices[MATRIX_WORLD_VIEW_PROJECTION] * vec4(in_Position, 1.0);\r\n    v_texcoord = in_TextureCoord;// + vec2(sin(in_TextureCoord.x), cos(in_TextureCoord.y));\r\n}\r\n","precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\r\n\r\nuniform sampler2D gm_BaseTexture;\r\n\r\nuniform bool gm_PS_FogEnabled;\r\nuniform vec4 gm_FogColour;\r\nuniform bool gm_AlphaTestEnabled;\r\nuniform float gm_AlphaRefValue;\r\n\r\nvoid DoAlphaTest(vec4 SrcColour)\r\n{\r\n\tif (gm_AlphaTestEnabled)\r\n\t{\r\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\r\n\t\t{\r\n\t\t\tdiscard;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid DoFog(inout vec4 SrcColour, float fogval)\r\n{\r\n\tif (gm_PS_FogEnabled)\r\n\t{\r\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \r\n\t}\r\n}\r\n\r\n#define _YY_GLSLES_ 1\nvarying vec2 v_texcoord;\r\n\r\nuniform float time;\r\nuniform vec2 mouse_pos;\r\nuniform vec2 resolution;\r\nuniform float shock_amplitude;\r\nuniform float shock_refraction;\r\nuniform float shock_width;\r\nuniform vec3 ice_color;\r\n\r\nvoid main()\r\n{ \r\n    vec2 uv = v_texcoord;\r\n    uv.x *= (resolution.x/resolution.y);\r\n    \r\n    vec2 texCoord = v_texcoord;\r\n    \r\n    float centre_x = (mouse_pos.x / resolution.x) * (resolution.x/resolution.y);\r\n    float centre_y = mouse_pos.y / resolution.y;\r\n  \r\n    float dist = distance(uv, vec2(centre_x,centre_y));\r\n    \r\n    vec4 out_color = texture2D(gm_BaseTexture,texCoord);\r\n    \r\n    float timeScale = clamp(time * 2.0, 0.0, 1.0);\r\n    \r\n    float dX = uv.x - centre_x;\r\n    float dY = uv.y - centre_y;\r\n    float dAngle = atan(dY, dX);\r\n    \r\n    float offset1 = sin((dAngle - time * 0.5) * (20.0 * (1.0 + timeScale)));\r\n    float offset2 = sin((dAngle + time) * (10.0 * (1.0 + timeScale)));\r\n    float offset3 = cos(dAngle * (30.0 - 20.0 * timeScale));\r\n    float offset = (offset1 + offset2 + offset3) * 0.01;\r\n    \r\n    if ( (dist <= (time + shock_width) + offset) && (dist >= (time - shock_width) - offset) ) \r\n    {\r\n        float dif = (dist - time);\r\n        dif -= sign(dif) * offset;\r\n        float powDiff = 1.0 - pow(abs(dif*shock_amplitude),shock_refraction); \r\n        float diffTime = dif  * powDiff;\r\n        vec2 diffUV = normalize(uv - mouse_pos);\r\n        texCoord = uv + (diffUV * diffTime);\r\n        texCoord.x *= (resolution.y/resolution.x);\r\n        \r\n        float grad = clamp(1.2 * (1.0 - (abs(dif)/shock_width)), 0.0, 1.0);\r\n        \r\n        out_color = texture2D(gm_BaseTexture,texCoord);\r\n        //vec4 ice_color = vec4(0.7, 0.9, 0.9, 0.0);\r\n        out_color += vec4(ice_color, 0.0) * 0.5 * grad;\r\n    }\r\n \r\n    gl_FragColor = out_color;\r\n}\r\n","#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n#define\tMATRIX_VIEW \t\t\t\t\t0\r\n#define\tMATRIX_PROJECTION \t\t\t\t1\r\n#define\tMATRIX_WORLD \t\t\t\t\t2\r\n#define\tMATRIX_WORLD_VIEW \t\t\t\t3\r\n#define\tMATRIX_WORLD_VIEW_PROJECTION \t4\r\n#define\tMATRICES_MAX\t\t\t\t\t5\r\n\r\nuniform mat4 gm_Matrices[MATRICES_MAX]; \r\n\r\nuniform bool gm_LightingEnabled;\r\nuniform bool gm_VS_FogEnabled;\r\nuniform float gm_FogStart;\r\nuniform float gm_RcpFogRange;\r\n\r\n#define MAX_VS_LIGHTS\t8\r\n#define MIRROR_WIN32_LIGHTING_EQUATION\r\n\r\n\r\n//#define\tMAX_VS_LIGHTS\t\t\t\t\t8\r\nuniform vec4   gm_AmbientColour;\t\t\t\t\t\t\t// rgb=colour, a=1\r\nuniform vec4   gm_Lights_Direction[MAX_VS_LIGHTS];\t\t// normalised direction\r\nuniform vec4   gm_Lights_PosRange[MAX_VS_LIGHTS];\t\t\t// X,Y,Z position,  W range\r\nuniform vec4   gm_Lights_Colour[MAX_VS_LIGHTS];\t\t\t// rgb=colour, a=1\r\n\r\nfloat CalcFogFactor(vec4 pos)\r\n{\r\n\tif (gm_VS_FogEnabled)\r\n\t{\r\n\t\tvec4 viewpos = gm_Matrices[MATRIX_WORLD_VIEW] * pos;\r\n\t\tfloat fogfactor = ((viewpos.z - gm_FogStart) * gm_RcpFogRange);\r\n\t\treturn fogfactor;\r\n\t}\r\n\telse\r\n\t{\r\n\t\treturn 0.0;\r\n\t}\r\n}\r\n\r\nvec4 DoDirLight(vec3 ws_normal, vec4 dir, vec4 diffusecol)\r\n{\r\n\tfloat dotresult = dot(ws_normal, dir.xyz);\r\n\tdotresult = max(0.0, dotresult);\r\n\r\n\treturn dotresult * diffusecol;\r\n}\r\n\r\nvec4 DoPointLight(vec3 ws_pos, vec3 ws_normal, vec4 posrange, vec4 diffusecol)\r\n{\r\n\tvec3 diffvec = ws_pos - posrange.xyz;\r\n\tfloat veclen = length(diffvec);\r\n\tdiffvec /= veclen;\t// normalise\r\n#ifdef MIRROR_WIN32_LIGHTING_EQUATION\r\n\t// This is based on the Win32 D3D and OpenGL falloff model, where:\r\n\t// Attenuation = 1.0f / (factor0 + (d * factor1) + (d*d * factor2))\r\n\t// For some reason, factor0 is set to 0.0f while factor1 is set to 1.0f/lightrange (on both D3D and OpenGL)\r\n\t// This'll result in no visible falloff as 1.0f / (d / lightrange) will always be larger than 1.0f (if the vertex is within range)\r\n\tfloat atten = 1.0 / (veclen / posrange.w);\r\n\tif (veclen > posrange.w)\r\n\t{\r\n\t\tatten = 0.0;\r\n\t}\r\n#else\r\n\tfloat atten = clamp( (1.0 - (veclen / posrange.w)), 0.0, 1.0);\t\t// storing 1.0f/range instead would save a rcp\r\n#endif\r\n\tfloat dotresult = dot(ws_normal, diffvec);\r\n\tdotresult = max(0.0, dotresult);\r\n\r\n\treturn dotresult * atten * diffusecol;\r\n}\r\n\r\nvec4 DoLighting(vec4 vertexcolour, vec4 objectspacepos, vec3 objectspacenormal)\r\n{\r\n\tif (gm_LightingEnabled)\r\n\t{\r\n\t\t// Normally we'd have the light positions\\\\directions back-transformed from world to object space\r\n\t\t// But to keep things simple for the moment we'll just transform the normal to world space\r\n\t\tvec4 objectspacenormal4 = vec4(objectspacenormal, 0.0);\r\n\t\tvec3 ws_normal;\r\n\t\tws_normal = (gm_Matrices[MATRIX_WORLD_VIEW] * objectspacenormal4).xyz;\r\n\t\tws_normal = -normalize(ws_normal);\r\n\r\n\t\tvec3 ws_pos;\r\n\t\tws_pos = (gm_Matrices[MATRIX_WORLD] * objectspacepos).xyz;\r\n\r\n\t\t// Accumulate lighting from different light types\r\n\t\tvec4 accumcol = vec4(0.0, 0.0, 0.0, 0.0);\t\t\r\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\r\n\t\t{\r\n\t\t\taccumcol += DoDirLight(ws_normal, gm_Lights_Direction[i], gm_Lights_Colour[i]);\r\n\t\t}\r\n\r\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\r\n\t\t{\r\n\t\t\taccumcol += DoPointLight(ws_pos, ws_normal, gm_Lights_PosRange[i], gm_Lights_Colour[i]);\r\n\t\t}\r\n\r\n\t\taccumcol *= vertexcolour;\r\n\t\taccumcol += gm_AmbientColour;\r\n\t\taccumcol = min(vec4(1.0, 1.0, 1.0, 1.0), accumcol);\r\n\t\taccumcol.a = vertexcolour.a;\r\n\t\treturn accumcol;\r\n\t}\r\n\telse\r\n\t{\r\n\t\treturn vertexcolour;\r\n\t}\r\n}\r\n\r\n#define _YY_GLSL_ 1\nattribute vec3 in_Position;\r\nattribute vec2 in_TextureCoord;\r\n\r\nvarying vec2 v_texcoord;\r\n\r\nvoid main()\r\n{\r\n    gl_Position = gm_Matrices[MATRIX_WORLD_VIEW_PROJECTION] * vec4(in_Position, 1.0);\r\n    v_texcoord = in_TextureCoord;// + vec2(sin(in_TextureCoord.x), cos(in_TextureCoord.y));\r\n}\r\n","#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\r\n\r\nuniform sampler2D gm_BaseTexture;\r\n\r\nuniform bool gm_PS_FogEnabled;\r\nuniform vec4 gm_FogColour;\r\nuniform bool gm_AlphaTestEnabled;\r\nuniform float gm_AlphaRefValue;\r\n\r\nvoid DoAlphaTest(vec4 SrcColour)\r\n{\r\n\tif (gm_AlphaTestEnabled)\r\n\t{\r\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\r\n\t\t{\r\n\t\t\tdiscard;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid DoFog(inout vec4 SrcColour, float fogval)\r\n{\r\n\tif (gm_PS_FogEnabled)\r\n\t{\r\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \r\n\t}\r\n}\r\n\r\n#define _YY_GLSL_ 1\nvarying vec2 v_texcoord;\r\n\r\nuniform float time;\r\nuniform vec2 mouse_pos;\r\nuniform vec2 resolution;\r\nuniform float shock_amplitude;\r\nuniform float shock_refraction;\r\nuniform float shock_width;\r\nuniform vec3 ice_color;\r\n\r\nvoid main()\r\n{ \r\n    vec2 uv = v_texcoord;\r\n    uv.x *= (resolution.x/resolution.y);\r\n    \r\n    vec2 texCoord = v_texcoord;\r\n    \r\n    float centre_x = (mouse_pos.x / resolution.x) * (resolution.x/resolution.y);\r\n    float centre_y = mouse_pos.y / resolution.y;\r\n  \r\n    float dist = distance(uv, vec2(centre_x,centre_y));\r\n    \r\n    vec4 out_color = texture2D(gm_BaseTexture,texCoord);\r\n    \r\n    float timeScale = clamp(time * 2.0, 0.0, 1.0);\r\n    \r\n    float dX = uv.x - centre_x;\r\n    float dY = uv.y - centre_y;\r\n    float dAngle = atan(dY, dX);\r\n    \r\n    float offset1 = sin((dAngle - time * 0.5) * (20.0 * (1.0 + timeScale)));\r\n    float offset2 = sin((dAngle + time) * (10.0 * (1.0 + timeScale)));\r\n    float offset3 = cos(dAngle * (30.0 - 20.0 * timeScale));\r\n    float offset = (offset1 + offset2 + offset3) * 0.01;\r\n    \r\n    if ( (dist <= (time + shock_width) + offset) && (dist >= (time - shock_width) - offset) ) \r\n    {\r\n        float dif = (dist - time);\r\n        dif -= sign(dif) * offset;\r\n        float powDiff = 1.0 - pow(abs(dif*shock_amplitude),shock_refraction); \r\n        float diffTime = dif  * powDiff;\r\n        vec2 diffUV = normalize(uv - mouse_pos);\r\n        texCoord = uv + (diffUV * diffTime);\r\n        texCoord.x *= (resolution.y/resolution.x);\r\n        \r\n        float grad = clamp(1.2 * (1.0 - (abs(dif)/shock_width)), 0.0, 1.0);\r\n        \r\n        out_color = texture2D(gm_BaseTexture,texCoord);\r\n        //vec4 ice_color = vec4(0.7, 0.9, 0.9, 0.0);\r\n        out_color += vec4(ice_color, 0.0) * 0.5 * grad;\r\n    }\r\n \r\n    gl_FragColor = out_color;\r\n}\r\n","shd_abyss_shockwave","#define LOWPREC lowp\n#define\tMATRIX_VIEW \t\t\t\t\t0\r\n#define\tMATRIX_PROJECTION \t\t\t\t1\r\n#define\tMATRIX_WORLD \t\t\t\t\t2\r\n#define\tMATRIX_WORLD_VIEW \t\t\t\t3\r\n#define\tMATRIX_WORLD_VIEW_PROJECTION \t4\r\n#define\tMATRICES_MAX\t\t\t\t\t5\r\n\r\nuniform mat4 gm_Matrices[MATRICES_MAX]; \r\n\r\nuniform bool gm_LightingEnabled;\r\nuniform bool gm_VS_FogEnabled;\r\nuniform float gm_FogStart;\r\nuniform float gm_RcpFogRange;\r\n\r\n#define MAX_VS_LIGHTS\t8\r\n#define MIRROR_WIN32_LIGHTING_EQUATION\r\n\r\n\r\n//#define\tMAX_VS_LIGHTS\t\t\t\t\t8\r\nuniform vec4   gm_AmbientColour;\t\t\t\t\t\t\t// rgb=colour, a=1\r\nuniform vec4   gm_Lights_Direction[MAX_VS_LIGHTS];\t\t// normalised direction\r\nuniform vec4   gm_Lights_PosRange[MAX_VS_LIGHTS];\t\t\t// X,Y,Z position,  W range\r\nuniform vec4   gm_Lights_Colour[MAX_VS_LIGHTS];\t\t\t// rgb=colour, a=1\r\n\r\nfloat CalcFogFactor(vec4 pos)\r\n{\r\n\tif (gm_VS_FogEnabled)\r\n\t{\r\n\t\tvec4 viewpos = gm_Matrices[MATRIX_WORLD_VIEW] * pos;\r\n\t\tfloat fogfactor = ((viewpos.z - gm_FogStart) * gm_RcpFogRange);\r\n\t\treturn fogfactor;\r\n\t}\r\n\telse\r\n\t{\r\n\t\treturn 0.0;\r\n\t}\r\n}\r\n\r\nvec4 DoDirLight(vec3 ws_normal, vec4 dir, vec4 diffusecol)\r\n{\r\n\tfloat dotresult = dot(ws_normal, dir.xyz);\r\n\tdotresult = max(0.0, dotresult);\r\n\r\n\treturn dotresult * diffusecol;\r\n}\r\n\r\nvec4 DoPointLight(vec3 ws_pos, vec3 ws_normal, vec4 posrange, vec4 diffusecol)\r\n{\r\n\tvec3 diffvec = ws_pos - posrange.xyz;\r\n\tfloat veclen = length(diffvec);\r\n\tdiffvec /= veclen;\t// normalise\r\n#ifdef MIRROR_WIN32_LIGHTING_EQUATION\r\n\t// This is based on the Win32 D3D and OpenGL falloff model, where:\r\n\t// Attenuation = 1.0f / (factor0 + (d * factor1) + (d*d * factor2))\r\n\t// For some reason, factor0 is set to 0.0f while factor1 is set to 1.0f/lightrange (on both D3D and OpenGL)\r\n\t// This'll result in no visible falloff as 1.0f / (d / lightrange) will always be larger than 1.0f (if the vertex is within range)\r\n\tfloat atten = 1.0 / (veclen / posrange.w);\r\n\tif (veclen > posrange.w)\r\n\t{\r\n\t\tatten = 0.0;\r\n\t}\r\n#else\r\n\tfloat atten = clamp( (1.0 - (veclen / posrange.w)), 0.0, 1.0);\t\t// storing 1.0f/range instead would save a rcp\r\n#endif\r\n\tfloat dotresult = dot(ws_normal, diffvec);\r\n\tdotresult = max(0.0, dotresult);\r\n\r\n\treturn dotresult * atten * diffusecol;\r\n}\r\n\r\nvec4 DoLighting(vec4 vertexcolour, vec4 objectspacepos, vec3 objectspacenormal)\r\n{\r\n\tif (gm_LightingEnabled)\r\n\t{\r\n\t\t// Normally we'd have the light positions\\\\directions back-transformed from world to object space\r\n\t\t// But to keep things simple for the moment we'll just transform the normal to world space\r\n\t\tvec4 objectspacenormal4 = vec4(objectspacenormal, 0.0);\r\n\t\tvec3 ws_normal;\r\n\t\tws_normal = (gm_Matrices[MATRIX_WORLD_VIEW] * objectspacenormal4).xyz;\r\n\t\tws_normal = -normalize(ws_normal);\r\n\r\n\t\tvec3 ws_pos;\r\n\t\tws_pos = (gm_Matrices[MATRIX_WORLD] * objectspacepos).xyz;\r\n\r\n\t\t// Accumulate lighting from different light types\r\n\t\tvec4 accumcol = vec4(0.0, 0.0, 0.0, 0.0);\t\t\r\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\r\n\t\t{\r\n\t\t\taccumcol += DoDirLight(ws_normal, gm_Lights_Direction[i], gm_Lights_Colour[i]);\r\n\t\t}\r\n\r\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\r\n\t\t{\r\n\t\t\taccumcol += DoPointLight(ws_pos, ws_normal, gm_Lights_PosRange[i], gm_Lights_Colour[i]);\r\n\t\t}\r\n\r\n\t\taccumcol *= vertexcolour;\r\n\t\taccumcol += gm_AmbientColour;\r\n\t\taccumcol = min(vec4(1.0, 1.0, 1.0, 1.0), accumcol);\r\n\t\taccumcol.a = vertexcolour.a;\r\n\t\treturn accumcol;\r\n\t}\r\n\telse\r\n\t{\r\n\t\treturn vertexcolour;\r\n\t}\r\n}\r\n\r\n#define _YY_GLSLES_ 1\nattribute vec3 in_Position;\r\nattribute vec2 in_TextureCoord; \r\n\r\nvarying vec2 v_texcoord;\r\n\r\nvoid main()\r\n{\r\n    gl_Position = gm_Matrices[MATRIX_WORLD_VIEW_PROJECTION] * vec4(in_Position, 1.0);\r\n    v_texcoord = in_TextureCoord;// + vec2(sin(in_TextureCoord.x), cos(in_TextureCoord.y));\r\n}\r\n","precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\r\n\r\nuniform sampler2D gm_BaseTexture;\r\n\r\nuniform bool gm_PS_FogEnabled;\r\nuniform vec4 gm_FogColour;\r\nuniform bool gm_AlphaTestEnabled;\r\nuniform float gm_AlphaRefValue;\r\n\r\nvoid DoAlphaTest(vec4 SrcColour)\r\n{\r\n\tif (gm_AlphaTestEnabled)\r\n\t{\r\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\r\n\t\t{\r\n\t\t\tdiscard;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid DoFog(inout vec4 SrcColour, float fogval)\r\n{\r\n\tif (gm_PS_FogEnabled)\r\n\t{\r\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \r\n\t}\r\n}\r\n\r\n#define _YY_GLSLES_ 1\nvarying vec2 v_texcoord;\r\n\r\nuniform float time;\r\nuniform vec2 mouse_pos;\r\nuniform vec2 resolution;\r\nuniform float shock_amplitude;\r\nuniform float shock_refraction;\r\nuniform float shock_width;\r\n\r\nvoid main()\r\n{ \r\n    vec2 uv = v_texcoord;\r\n    uv.x *= (resolution.x/resolution.y);\r\n    \r\n    vec2 texCoord = v_texcoord;\r\n    \r\n    float centre_x = (mouse_pos.x / resolution.x) * (resolution.x/resolution.y);\r\n    float centre_y = mouse_pos.y / resolution.y;\r\n  \r\n    float dist = distance(uv, vec2(centre_x,centre_y));\r\n    \r\n    vec4 out_color = texture2D(gm_BaseTexture,texCoord);\r\n    \r\n    float timeScale = clamp(time * 2.0, 0.0, 1.0);\r\n    \r\n    float dX = uv.x - centre_x;\r\n    float dY = uv.y - centre_y;\r\n    float dAngle = atan(dY, dX);\r\n    \r\n    float offset1 = sin((dAngle - time * 0.5) * (20.0 * (1.0 + timeScale)));\r\n    float offset2 = sin((dAngle + time) * (10.0 * (1.0 + timeScale)));\r\n    float offset3 = cos(dAngle * (30.0 - 20.0 * timeScale));\r\n    float offset = (offset1 + offset2 + offset3) * 0.01;\r\n    \r\n    if (dist <= time && (dist >= (time - shock_width) - offset) ) // (dist <= (time + shock_width) + offset) &&  \r\n    {\r\n        float dif = (dist - time);\r\n        dif -= sign(dif) * offset;\r\n        float powDiff = 1.0 - pow(abs(dif*shock_amplitude),shock_refraction); \r\n        float diffTime = dif  * powDiff;\r\n        vec2 diffUV = normalize(uv - mouse_pos);\r\n        texCoord = uv + (diffUV * diffTime);\r\n        texCoord.x *= (resolution.y/resolution.x);\r\n        \r\n        float grad = clamp(1.2 * (1.0 - (abs(dif)/shock_width)), 0.0, 1.0);\r\n        \r\n        out_color = texture2D(gm_BaseTexture,texCoord);\r\n        vec4 abyss_color = vec4(0.86, 0.44, 1.0, 0.0);\r\n        out_color += abyss_color * grad * 0.5;\r\n    }\r\n \r\n    gl_FragColor = out_color;\r\n}\r\n","#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n#define\tMATRIX_VIEW \t\t\t\t\t0\r\n#define\tMATRIX_PROJECTION \t\t\t\t1\r\n#define\tMATRIX_WORLD \t\t\t\t\t2\r\n#define\tMATRIX_WORLD_VIEW \t\t\t\t3\r\n#define\tMATRIX_WORLD_VIEW_PROJECTION \t4\r\n#define\tMATRICES_MAX\t\t\t\t\t5\r\n\r\nuniform mat4 gm_Matrices[MATRICES_MAX]; \r\n\r\nuniform bool gm_LightingEnabled;\r\nuniform bool gm_VS_FogEnabled;\r\nuniform float gm_FogStart;\r\nuniform float gm_RcpFogRange;\r\n\r\n#define MAX_VS_LIGHTS\t8\r\n#define MIRROR_WIN32_LIGHTING_EQUATION\r\n\r\n\r\n//#define\tMAX_VS_LIGHTS\t\t\t\t\t8\r\nuniform vec4   gm_AmbientColour;\t\t\t\t\t\t\t// rgb=colour, a=1\r\nuniform vec4   gm_Lights_Direction[MAX_VS_LIGHTS];\t\t// normalised direction\r\nuniform vec4   gm_Lights_PosRange[MAX_VS_LIGHTS];\t\t\t// X,Y,Z position,  W range\r\nuniform vec4   gm_Lights_Colour[MAX_VS_LIGHTS];\t\t\t// rgb=colour, a=1\r\n\r\nfloat CalcFogFactor(vec4 pos)\r\n{\r\n\tif (gm_VS_FogEnabled)\r\n\t{\r\n\t\tvec4 viewpos = gm_Matrices[MATRIX_WORLD_VIEW] * pos;\r\n\t\tfloat fogfactor = ((viewpos.z - gm_FogStart) * gm_RcpFogRange);\r\n\t\treturn fogfactor;\r\n\t}\r\n\telse\r\n\t{\r\n\t\treturn 0.0;\r\n\t}\r\n}\r\n\r\nvec4 DoDirLight(vec3 ws_normal, vec4 dir, vec4 diffusecol)\r\n{\r\n\tfloat dotresult = dot(ws_normal, dir.xyz);\r\n\tdotresult = max(0.0, dotresult);\r\n\r\n\treturn dotresult * diffusecol;\r\n}\r\n\r\nvec4 DoPointLight(vec3 ws_pos, vec3 ws_normal, vec4 posrange, vec4 diffusecol)\r\n{\r\n\tvec3 diffvec = ws_pos - posrange.xyz;\r\n\tfloat veclen = length(diffvec);\r\n\tdiffvec /= veclen;\t// normalise\r\n#ifdef MIRROR_WIN32_LIGHTING_EQUATION\r\n\t// This is based on the Win32 D3D and OpenGL falloff model, where:\r\n\t// Attenuation = 1.0f / (factor0 + (d * factor1) + (d*d * factor2))\r\n\t// For some reason, factor0 is set to 0.0f while factor1 is set to 1.0f/lightrange (on both D3D and OpenGL)\r\n\t// This'll result in no visible falloff as 1.0f / (d / lightrange) will always be larger than 1.0f (if the vertex is within range)\r\n\tfloat atten = 1.0 / (veclen / posrange.w);\r\n\tif (veclen > posrange.w)\r\n\t{\r\n\t\tatten = 0.0;\r\n\t}\r\n#else\r\n\tfloat atten = clamp( (1.0 - (veclen / posrange.w)), 0.0, 1.0);\t\t// storing 1.0f/range instead would save a rcp\r\n#endif\r\n\tfloat dotresult = dot(ws_normal, diffvec);\r\n\tdotresult = max(0.0, dotresult);\r\n\r\n\treturn dotresult * atten * diffusecol;\r\n}\r\n\r\nvec4 DoLighting(vec4 vertexcolour, vec4 objectspacepos, vec3 objectspacenormal)\r\n{\r\n\tif (gm_LightingEnabled)\r\n\t{\r\n\t\t// Normally we'd have the light positions\\\\directions back-transformed from world to object space\r\n\t\t// But to keep things simple for the moment we'll just transform the normal to world space\r\n\t\tvec4 objectspacenormal4 = vec4(objectspacenormal, 0.0);\r\n\t\tvec3 ws_normal;\r\n\t\tws_normal = (gm_Matrices[MATRIX_WORLD_VIEW] * objectspacenormal4).xyz;\r\n\t\tws_normal = -normalize(ws_normal);\r\n\r\n\t\tvec3 ws_pos;\r\n\t\tws_pos = (gm_Matrices[MATRIX_WORLD] * objectspacepos).xyz;\r\n\r\n\t\t// Accumulate lighting from different light types\r\n\t\tvec4 accumcol = vec4(0.0, 0.0, 0.0, 0.0);\t\t\r\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\r\n\t\t{\r\n\t\t\taccumcol += DoDirLight(ws_normal, gm_Lights_Direction[i], gm_Lights_Colour[i]);\r\n\t\t}\r\n\r\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\r\n\t\t{\r\n\t\t\taccumcol += DoPointLight(ws_pos, ws_normal, gm_Lights_PosRange[i], gm_Lights_Colour[i]);\r\n\t\t}\r\n\r\n\t\taccumcol *= vertexcolour;\r\n\t\taccumcol += gm_AmbientColour;\r\n\t\taccumcol = min(vec4(1.0, 1.0, 1.0, 1.0), accumcol);\r\n\t\taccumcol.a = vertexcolour.a;\r\n\t\treturn accumcol;\r\n\t}\r\n\telse\r\n\t{\r\n\t\treturn vertexcolour;\r\n\t}\r\n}\r\n\r\n#define _YY_GLSL_ 1\nattribute vec3 in_Position;\r\nattribute vec2 in_TextureCoord; \r\n\r\nvarying vec2 v_texcoord;\r\n\r\nvoid main()\r\n{\r\n    gl_Position = gm_Matrices[MATRIX_WORLD_VIEW_PROJECTION] * vec4(in_Position, 1.0);\r\n    v_texcoord = in_TextureCoord;// + vec2(sin(in_TextureCoord.x), cos(in_TextureCoord.y));\r\n}\r\n","#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\r\n\r\nuniform sampler2D gm_BaseTexture;\r\n\r\nuniform bool gm_PS_FogEnabled;\r\nuniform vec4 gm_FogColour;\r\nuniform bool gm_AlphaTestEnabled;\r\nuniform float gm_AlphaRefValue;\r\n\r\nvoid DoAlphaTest(vec4 SrcColour)\r\n{\r\n\tif (gm_AlphaTestEnabled)\r\n\t{\r\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\r\n\t\t{\r\n\t\t\tdiscard;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid DoFog(inout vec4 SrcColour, float fogval)\r\n{\r\n\tif (gm_PS_FogEnabled)\r\n\t{\r\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \r\n\t}\r\n}\r\n\r\n#define _YY_GLSL_ 1\nvarying vec2 v_texcoord;\r\n\r\nuniform float time;\r\nuniform vec2 mouse_pos;\r\nuniform vec2 resolution;\r\nuniform float shock_amplitude;\r\nuniform float shock_refraction;\r\nuniform float shock_width;\r\n\r\nvoid main()\r\n{ \r\n    vec2 uv = v_texcoord;\r\n    uv.x *= (resolution.x/resolution.y);\r\n    \r\n    vec2 texCoord = v_texcoord;\r\n    \r\n    float centre_x = (mouse_pos.x / resolution.x) * (resolution.x/resolution.y);\r\n    float centre_y = mouse_pos.y / resolution.y;\r\n  \r\n    float dist = distance(uv, vec2(centre_x,centre_y));\r\n    \r\n    vec4 out_color = texture2D(gm_BaseTexture,texCoord);\r\n    \r\n    float timeScale = clamp(time * 2.0, 0.0, 1.0);\r\n    \r\n    float dX = uv.x - centre_x;\r\n    float dY = uv.y - centre_y;\r\n    float dAngle = atan(dY, dX);\r\n    \r\n    float offset1 = sin((dAngle - time * 0.5) * (20.0 * (1.0 + timeScale)));\r\n    float offset2 = sin((dAngle + time) * (10.0 * (1.0 + timeScale)));\r\n    float offset3 = cos(dAngle * (30.0 - 20.0 * timeScale));\r\n    float offset = (offset1 + offset2 + offset3) * 0.01;\r\n    \r\n    if (dist <= time && (dist >= (time - shock_width) - offset) ) // (dist <= (time + shock_width) + offset) &&  \r\n    {\r\n        float dif = (dist - time);\r\n        dif -= sign(dif) * offset;\r\n        float powDiff = 1.0 - pow(abs(dif*shock_amplitude),shock_refraction); \r\n        float diffTime = dif  * powDiff;\r\n        vec2 diffUV = normalize(uv - mouse_pos);\r\n        texCoord = uv + (diffUV * diffTime);\r\n        texCoord.x *= (resolution.y/resolution.x);\r\n        \r\n        float grad = clamp(1.2 * (1.0 - (abs(dif)/shock_width)), 0.0, 1.0);\r\n        \r\n        out_color = texture2D(gm_BaseTexture,texCoord);\r\n        vec4 abyss_color = vec4(0.86, 0.44, 1.0, 0.0);\r\n        out_color += abyss_color * grad * 0.5;\r\n    }\r\n \r\n    gl_FragColor = out_color;\r\n}\r\n","shd_screen_door","#define LOWPREC lowp\n#define\tMATRIX_VIEW \t\t\t\t\t0\r\n#define\tMATRIX_PROJECTION \t\t\t\t1\r\n#define\tMATRIX_WORLD \t\t\t\t\t2\r\n#define\tMATRIX_WORLD_VIEW \t\t\t\t3\r\n#define\tMATRIX_WORLD_VIEW_PROJECTION \t4\r\n#define\tMATRICES_MAX\t\t\t\t\t5\r\n\r\nuniform mat4 gm_Matrices[MATRICES_MAX]; \r\n\r\nuniform bool gm_LightingEnabled;\r\nuniform bool gm_VS_FogEnabled;\r\nuniform float gm_FogStart;\r\nuniform float gm_RcpFogRange;\r\n\r\n#define MAX_VS_LIGHTS\t8\r\n#define MIRROR_WIN32_LIGHTING_EQUATION\r\n\r\n\r\n//#define\tMAX_VS_LIGHTS\t\t\t\t\t8\r\nuniform vec4   gm_AmbientColour;\t\t\t\t\t\t\t// rgb=colour, a=1\r\nuniform vec4   gm_Lights_Direction[MAX_VS_LIGHTS];\t\t// normalised direction\r\nuniform vec4   gm_Lights_PosRange[MAX_VS_LIGHTS];\t\t\t// X,Y,Z position,  W range\r\nuniform vec4   gm_Lights_Colour[MAX_VS_LIGHTS];\t\t\t// rgb=colour, a=1\r\n\r\nfloat CalcFogFactor(vec4 pos)\r\n{\r\n\tif (gm_VS_FogEnabled)\r\n\t{\r\n\t\tvec4 viewpos = gm_Matrices[MATRIX_WORLD_VIEW] * pos;\r\n\t\tfloat fogfactor = ((viewpos.z - gm_FogStart) * gm_RcpFogRange);\r\n\t\treturn fogfactor;\r\n\t}\r\n\telse\r\n\t{\r\n\t\treturn 0.0;\r\n\t}\r\n}\r\n\r\nvec4 DoDirLight(vec3 ws_normal, vec4 dir, vec4 diffusecol)\r\n{\r\n\tfloat dotresult = dot(ws_normal, dir.xyz);\r\n\tdotresult = max(0.0, dotresult);\r\n\r\n\treturn dotresult * diffusecol;\r\n}\r\n\r\nvec4 DoPointLight(vec3 ws_pos, vec3 ws_normal, vec4 posrange, vec4 diffusecol)\r\n{\r\n\tvec3 diffvec = ws_pos - posrange.xyz;\r\n\tfloat veclen = length(diffvec);\r\n\tdiffvec /= veclen;\t// normalise\r\n#ifdef MIRROR_WIN32_LIGHTING_EQUATION\r\n\t// This is based on the Win32 D3D and OpenGL falloff model, where:\r\n\t// Attenuation = 1.0f / (factor0 + (d * factor1) + (d*d * factor2))\r\n\t// For some reason, factor0 is set to 0.0f while factor1 is set to 1.0f/lightrange (on both D3D and OpenGL)\r\n\t// This'll result in no visible falloff as 1.0f / (d / lightrange) will always be larger than 1.0f (if the vertex is within range)\r\n\tfloat atten = 1.0 / (veclen / posrange.w);\r\n\tif (veclen > posrange.w)\r\n\t{\r\n\t\tatten = 0.0;\r\n\t}\r\n#else\r\n\tfloat atten = clamp( (1.0 - (veclen / posrange.w)), 0.0, 1.0);\t\t// storing 1.0f/range instead would save a rcp\r\n#endif\r\n\tfloat dotresult = dot(ws_normal, diffvec);\r\n\tdotresult = max(0.0, dotresult);\r\n\r\n\treturn dotresult * atten * diffusecol;\r\n}\r\n\r\nvec4 DoLighting(vec4 vertexcolour, vec4 objectspacepos, vec3 objectspacenormal)\r\n{\r\n\tif (gm_LightingEnabled)\r\n\t{\r\n\t\t// Normally we'd have the light positions\\\\directions back-transformed from world to object space\r\n\t\t// But to keep things simple for the moment we'll just transform the normal to world space\r\n\t\tvec4 objectspacenormal4 = vec4(objectspacenormal, 0.0);\r\n\t\tvec3 ws_normal;\r\n\t\tws_normal = (gm_Matrices[MATRIX_WORLD_VIEW] * objectspacenormal4).xyz;\r\n\t\tws_normal = -normalize(ws_normal);\r\n\r\n\t\tvec3 ws_pos;\r\n\t\tws_pos = (gm_Matrices[MATRIX_WORLD] * objectspacepos).xyz;\r\n\r\n\t\t// Accumulate lighting from different light types\r\n\t\tvec4 accumcol = vec4(0.0, 0.0, 0.0, 0.0);\t\t\r\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\r\n\t\t{\r\n\t\t\taccumcol += DoDirLight(ws_normal, gm_Lights_Direction[i], gm_Lights_Colour[i]);\r\n\t\t}\r\n\r\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\r\n\t\t{\r\n\t\t\taccumcol += DoPointLight(ws_pos, ws_normal, gm_Lights_PosRange[i], gm_Lights_Colour[i]);\r\n\t\t}\r\n\r\n\t\taccumcol *= vertexcolour;\r\n\t\taccumcol += gm_AmbientColour;\r\n\t\taccumcol = min(vec4(1.0, 1.0, 1.0, 1.0), accumcol);\r\n\t\taccumcol.a = vertexcolour.a;\r\n\t\treturn accumcol;\r\n\t}\r\n\telse\r\n\t{\r\n\t\treturn vertexcolour;\r\n\t}\r\n}\r\n\r\n#define _YY_GLSLES_ 1\n//\r\n// Simple passthrough vertex shader\r\n//\r\nattribute vec3 in_Position;                  // (x,y,z)\r\n//attribute vec3 in_Normal;                  // (x,y,z)     unused in this shader.\r\nattribute vec4 in_Colour;                    // (r,g,b,a)\r\nattribute vec2 in_TextureCoord;              // (u,v)\r\n\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\nvarying vec3 v_vPosition;\r\n\r\nvoid main()\r\n{\r\n    vec4 object_space_pos = vec4( in_Position.x, in_Position.y, in_Position.z, 1.0);\r\n    gl_Position = gm_Matrices[MATRIX_WORLD_VIEW_PROJECTION] * object_space_pos;\r\n    \r\n    v_vColour = in_Colour;\r\n    v_vTexcoord = in_TextureCoord;\r\n    v_vPosition = in_Position;\r\n}\r\n\r\n","precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\r\n\r\nuniform sampler2D gm_BaseTexture;\r\n\r\nuniform bool gm_PS_FogEnabled;\r\nuniform vec4 gm_FogColour;\r\nuniform bool gm_AlphaTestEnabled;\r\nuniform float gm_AlphaRefValue;\r\n\r\nvoid DoAlphaTest(vec4 SrcColour)\r\n{\r\n\tif (gm_AlphaTestEnabled)\r\n\t{\r\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\r\n\t\t{\r\n\t\t\tdiscard;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid DoFog(inout vec4 SrcColour, float fogval)\r\n{\r\n\tif (gm_PS_FogEnabled)\r\n\t{\r\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \r\n\t}\r\n}\r\n\r\n#define _YY_GLSLES_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\nvarying vec3 v_vPosition;\r\n\r\nuniform float time;\r\nuniform float camera_x;\r\nuniform float camera_y;\r\n\r\nvoid main()\r\n{\r\n    vec2 pos = vec2(v_vPosition.x, v_vPosition.y) - vec2(camera_x, camera_y);\r\n    \r\n    //screen door\r\n    float smoke_alpha = time + (1.0 - 2.0*time)*abs(mod(pos.x, 2.0) - mod(pos.y, 2.0));\r\n    \r\n    //horizontal blinds\r\n    //float smoke_alpha = time + (1.0 - 2.0*time)*floor(mod(pos.y, 2.0));\r\n    \r\n    //vertical blinds\r\n    //float smoke_alpha = time + (1.0 - 2.0*time)*floor(mod(pos.x, 2.0));\r\n\r\n    gl_FragColor = smoke_alpha * v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n}\r\n\r\n","#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n#define\tMATRIX_VIEW \t\t\t\t\t0\r\n#define\tMATRIX_PROJECTION \t\t\t\t1\r\n#define\tMATRIX_WORLD \t\t\t\t\t2\r\n#define\tMATRIX_WORLD_VIEW \t\t\t\t3\r\n#define\tMATRIX_WORLD_VIEW_PROJECTION \t4\r\n#define\tMATRICES_MAX\t\t\t\t\t5\r\n\r\nuniform mat4 gm_Matrices[MATRICES_MAX]; \r\n\r\nuniform bool gm_LightingEnabled;\r\nuniform bool gm_VS_FogEnabled;\r\nuniform float gm_FogStart;\r\nuniform float gm_RcpFogRange;\r\n\r\n#define MAX_VS_LIGHTS\t8\r\n#define MIRROR_WIN32_LIGHTING_EQUATION\r\n\r\n\r\n//#define\tMAX_VS_LIGHTS\t\t\t\t\t8\r\nuniform vec4   gm_AmbientColour;\t\t\t\t\t\t\t// rgb=colour, a=1\r\nuniform vec4   gm_Lights_Direction[MAX_VS_LIGHTS];\t\t// normalised direction\r\nuniform vec4   gm_Lights_PosRange[MAX_VS_LIGHTS];\t\t\t// X,Y,Z position,  W range\r\nuniform vec4   gm_Lights_Colour[MAX_VS_LIGHTS];\t\t\t// rgb=colour, a=1\r\n\r\nfloat CalcFogFactor(vec4 pos)\r\n{\r\n\tif (gm_VS_FogEnabled)\r\n\t{\r\n\t\tvec4 viewpos = gm_Matrices[MATRIX_WORLD_VIEW] * pos;\r\n\t\tfloat fogfactor = ((viewpos.z - gm_FogStart) * gm_RcpFogRange);\r\n\t\treturn fogfactor;\r\n\t}\r\n\telse\r\n\t{\r\n\t\treturn 0.0;\r\n\t}\r\n}\r\n\r\nvec4 DoDirLight(vec3 ws_normal, vec4 dir, vec4 diffusecol)\r\n{\r\n\tfloat dotresult = dot(ws_normal, dir.xyz);\r\n\tdotresult = max(0.0, dotresult);\r\n\r\n\treturn dotresult * diffusecol;\r\n}\r\n\r\nvec4 DoPointLight(vec3 ws_pos, vec3 ws_normal, vec4 posrange, vec4 diffusecol)\r\n{\r\n\tvec3 diffvec = ws_pos - posrange.xyz;\r\n\tfloat veclen = length(diffvec);\r\n\tdiffvec /= veclen;\t// normalise\r\n#ifdef MIRROR_WIN32_LIGHTING_EQUATION\r\n\t// This is based on the Win32 D3D and OpenGL falloff model, where:\r\n\t// Attenuation = 1.0f / (factor0 + (d * factor1) + (d*d * factor2))\r\n\t// For some reason, factor0 is set to 0.0f while factor1 is set to 1.0f/lightrange (on both D3D and OpenGL)\r\n\t// This'll result in no visible falloff as 1.0f / (d / lightrange) will always be larger than 1.0f (if the vertex is within range)\r\n\tfloat atten = 1.0 / (veclen / posrange.w);\r\n\tif (veclen > posrange.w)\r\n\t{\r\n\t\tatten = 0.0;\r\n\t}\r\n#else\r\n\tfloat atten = clamp( (1.0 - (veclen / posrange.w)), 0.0, 1.0);\t\t// storing 1.0f/range instead would save a rcp\r\n#endif\r\n\tfloat dotresult = dot(ws_normal, diffvec);\r\n\tdotresult = max(0.0, dotresult);\r\n\r\n\treturn dotresult * atten * diffusecol;\r\n}\r\n\r\nvec4 DoLighting(vec4 vertexcolour, vec4 objectspacepos, vec3 objectspacenormal)\r\n{\r\n\tif (gm_LightingEnabled)\r\n\t{\r\n\t\t// Normally we'd have the light positions\\\\directions back-transformed from world to object space\r\n\t\t// But to keep things simple for the moment we'll just transform the normal to world space\r\n\t\tvec4 objectspacenormal4 = vec4(objectspacenormal, 0.0);\r\n\t\tvec3 ws_normal;\r\n\t\tws_normal = (gm_Matrices[MATRIX_WORLD_VIEW] * objectspacenormal4).xyz;\r\n\t\tws_normal = -normalize(ws_normal);\r\n\r\n\t\tvec3 ws_pos;\r\n\t\tws_pos = (gm_Matrices[MATRIX_WORLD] * objectspacepos).xyz;\r\n\r\n\t\t// Accumulate lighting from different light types\r\n\t\tvec4 accumcol = vec4(0.0, 0.0, 0.0, 0.0);\t\t\r\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\r\n\t\t{\r\n\t\t\taccumcol += DoDirLight(ws_normal, gm_Lights_Direction[i], gm_Lights_Colour[i]);\r\n\t\t}\r\n\r\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\r\n\t\t{\r\n\t\t\taccumcol += DoPointLight(ws_pos, ws_normal, gm_Lights_PosRange[i], gm_Lights_Colour[i]);\r\n\t\t}\r\n\r\n\t\taccumcol *= vertexcolour;\r\n\t\taccumcol += gm_AmbientColour;\r\n\t\taccumcol = min(vec4(1.0, 1.0, 1.0, 1.0), accumcol);\r\n\t\taccumcol.a = vertexcolour.a;\r\n\t\treturn accumcol;\r\n\t}\r\n\telse\r\n\t{\r\n\t\treturn vertexcolour;\r\n\t}\r\n}\r\n\r\n#define _YY_GLSL_ 1\n//\r\n// Simple passthrough vertex shader\r\n//\r\nattribute vec3 in_Position;                  // (x,y,z)\r\n//attribute vec3 in_Normal;                  // (x,y,z)     unused in this shader.\r\nattribute vec4 in_Colour;                    // (r,g,b,a)\r\nattribute vec2 in_TextureCoord;              // (u,v)\r\n\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\nvarying vec3 v_vPosition;\r\n\r\nvoid main()\r\n{\r\n    vec4 object_space_pos = vec4( in_Position.x, in_Position.y, in_Position.z, 1.0);\r\n    gl_Position = gm_Matrices[MATRIX_WORLD_VIEW_PROJECTION] * object_space_pos;\r\n    \r\n    v_vColour = in_Colour;\r\n    v_vTexcoord = in_TextureCoord;\r\n    v_vPosition = in_Position;\r\n}\r\n\r\n","#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\r\n\r\nuniform sampler2D gm_BaseTexture;\r\n\r\nuniform bool gm_PS_FogEnabled;\r\nuniform vec4 gm_FogColour;\r\nuniform bool gm_AlphaTestEnabled;\r\nuniform float gm_AlphaRefValue;\r\n\r\nvoid DoAlphaTest(vec4 SrcColour)\r\n{\r\n\tif (gm_AlphaTestEnabled)\r\n\t{\r\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\r\n\t\t{\r\n\t\t\tdiscard;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid DoFog(inout vec4 SrcColour, float fogval)\r\n{\r\n\tif (gm_PS_FogEnabled)\r\n\t{\r\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \r\n\t}\r\n}\r\n\r\n#define _YY_GLSL_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\nvarying vec3 v_vPosition;\r\n\r\nuniform float time;\r\nuniform float camera_x;\r\nuniform float camera_y;\r\n\r\nvoid main()\r\n{\r\n    vec2 pos = vec2(v_vPosition.x, v_vPosition.y) - vec2(camera_x, camera_y);\r\n    \r\n    //screen door\r\n    float smoke_alpha = time + (1.0 - 2.0*time)*abs(mod(pos.x, 2.0) - mod(pos.y, 2.0));\r\n    \r\n    //horizontal blinds\r\n    //float smoke_alpha = time + (1.0 - 2.0*time)*floor(mod(pos.y, 2.0));\r\n    \r\n    //vertical blinds\r\n    //float smoke_alpha = time + (1.0 - 2.0*time)*floor(mod(pos.x, 2.0));\r\n\r\n    gl_FragColor = smoke_alpha * v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n}\r\n\r\n","shd_css_bg_new","#define LOWPREC lowp\n#define\tMATRIX_VIEW \t\t\t\t\t0\r\n#define\tMATRIX_PROJECTION \t\t\t\t1\r\n#define\tMATRIX_WORLD \t\t\t\t\t2\r\n#define\tMATRIX_WORLD_VIEW \t\t\t\t3\r\n#define\tMATRIX_WORLD_VIEW_PROJECTION \t4\r\n#define\tMATRICES_MAX\t\t\t\t\t5\r\n\r\nuniform mat4 gm_Matrices[MATRICES_MAX]; \r\n\r\nuniform bool gm_LightingEnabled;\r\nuniform bool gm_VS_FogEnabled;\r\nuniform float gm_FogStart;\r\nuniform float gm_RcpFogRange;\r\n\r\n#define MAX_VS_LIGHTS\t8\r\n#define MIRROR_WIN32_LIGHTING_EQUATION\r\n\r\n\r\n//#define\tMAX_VS_LIGHTS\t\t\t\t\t8\r\nuniform vec4   gm_AmbientColour;\t\t\t\t\t\t\t// rgb=colour, a=1\r\nuniform vec4   gm_Lights_Direction[MAX_VS_LIGHTS];\t\t// normalised direction\r\nuniform vec4   gm_Lights_PosRange[MAX_VS_LIGHTS];\t\t\t// X,Y,Z position,  W range\r\nuniform vec4   gm_Lights_Colour[MAX_VS_LIGHTS];\t\t\t// rgb=colour, a=1\r\n\r\nfloat CalcFogFactor(vec4 pos)\r\n{\r\n\tif (gm_VS_FogEnabled)\r\n\t{\r\n\t\tvec4 viewpos = gm_Matrices[MATRIX_WORLD_VIEW] * pos;\r\n\t\tfloat fogfactor = ((viewpos.z - gm_FogStart) * gm_RcpFogRange);\r\n\t\treturn fogfactor;\r\n\t}\r\n\telse\r\n\t{\r\n\t\treturn 0.0;\r\n\t}\r\n}\r\n\r\nvec4 DoDirLight(vec3 ws_normal, vec4 dir, vec4 diffusecol)\r\n{\r\n\tfloat dotresult = dot(ws_normal, dir.xyz);\r\n\tdotresult = max(0.0, dotresult);\r\n\r\n\treturn dotresult * diffusecol;\r\n}\r\n\r\nvec4 DoPointLight(vec3 ws_pos, vec3 ws_normal, vec4 posrange, vec4 diffusecol)\r\n{\r\n\tvec3 diffvec = ws_pos - posrange.xyz;\r\n\tfloat veclen = length(diffvec);\r\n\tdiffvec /= veclen;\t// normalise\r\n#ifdef MIRROR_WIN32_LIGHTING_EQUATION\r\n\t// This is based on the Win32 D3D and OpenGL falloff model, where:\r\n\t// Attenuation = 1.0f / (factor0 + (d * factor1) + (d*d * factor2))\r\n\t// For some reason, factor0 is set to 0.0f while factor1 is set to 1.0f/lightrange (on both D3D and OpenGL)\r\n\t// This'll result in no visible falloff as 1.0f / (d / lightrange) will always be larger than 1.0f (if the vertex is within range)\r\n\tfloat atten = 1.0 / (veclen / posrange.w);\r\n\tif (veclen > posrange.w)\r\n\t{\r\n\t\tatten = 0.0;\r\n\t}\r\n#else\r\n\tfloat atten = clamp( (1.0 - (veclen / posrange.w)), 0.0, 1.0);\t\t// storing 1.0f/range instead would save a rcp\r\n#endif\r\n\tfloat dotresult = dot(ws_normal, diffvec);\r\n\tdotresult = max(0.0, dotresult);\r\n\r\n\treturn dotresult * atten * diffusecol;\r\n}\r\n\r\nvec4 DoLighting(vec4 vertexcolour, vec4 objectspacepos, vec3 objectspacenormal)\r\n{\r\n\tif (gm_LightingEnabled)\r\n\t{\r\n\t\t// Normally we'd have the light positions\\\\directions back-transformed from world to object space\r\n\t\t// But to keep things simple for the moment we'll just transform the normal to world space\r\n\t\tvec4 objectspacenormal4 = vec4(objectspacenormal, 0.0);\r\n\t\tvec3 ws_normal;\r\n\t\tws_normal = (gm_Matrices[MATRIX_WORLD_VIEW] * objectspacenormal4).xyz;\r\n\t\tws_normal = -normalize(ws_normal);\r\n\r\n\t\tvec3 ws_pos;\r\n\t\tws_pos = (gm_Matrices[MATRIX_WORLD] * objectspacepos).xyz;\r\n\r\n\t\t// Accumulate lighting from different light types\r\n\t\tvec4 accumcol = vec4(0.0, 0.0, 0.0, 0.0);\t\t\r\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\r\n\t\t{\r\n\t\t\taccumcol += DoDirLight(ws_normal, gm_Lights_Direction[i], gm_Lights_Colour[i]);\r\n\t\t}\r\n\r\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\r\n\t\t{\r\n\t\t\taccumcol += DoPointLight(ws_pos, ws_normal, gm_Lights_PosRange[i], gm_Lights_Colour[i]);\r\n\t\t}\r\n\r\n\t\taccumcol *= vertexcolour;\r\n\t\taccumcol += gm_AmbientColour;\r\n\t\taccumcol = min(vec4(1.0, 1.0, 1.0, 1.0), accumcol);\r\n\t\taccumcol.a = vertexcolour.a;\r\n\t\treturn accumcol;\r\n\t}\r\n\telse\r\n\t{\r\n\t\treturn vertexcolour;\r\n\t}\r\n}\r\n\r\n#define _YY_GLSLES_ 1\nattribute vec3 in_Position;\r\nattribute vec4 in_Colour;\r\n\r\nvarying vec2 v_vPosition;\r\nvoid main()\r\n{\r\n    gl_Position = gm_Matrices[MATRIX_WORLD_VIEW_PROJECTION] * vec4(in_Position.xyz, 1.0);\r\n    \r\n    v_vPosition = in_Position.xy;\r\n}\r\n","precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\r\n\r\nuniform sampler2D gm_BaseTexture;\r\n\r\nuniform bool gm_PS_FogEnabled;\r\nuniform vec4 gm_FogColour;\r\nuniform bool gm_AlphaTestEnabled;\r\nuniform float gm_AlphaRefValue;\r\n\r\nvoid DoAlphaTest(vec4 SrcColour)\r\n{\r\n\tif (gm_AlphaTestEnabled)\r\n\t{\r\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\r\n\t\t{\r\n\t\t\tdiscard;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid DoFog(inout vec4 SrcColour, float fogval)\r\n{\r\n\tif (gm_PS_FogEnabled)\r\n\t{\r\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \r\n\t}\r\n}\r\n\r\n#define _YY_GLSLES_ 1\nvarying vec2 v_vPosition;\r\n\r\nuniform vec2  u_vGlowLine;\r\nuniform float u_fGlowTimer;\r\nuniform vec2  u_vView;\r\n\r\nvec3 getColour( float i )\r\n{\r\n    if ( i >= 12.0 ) i += 1.0; //Missing colour in source sprite at index 12\r\n    i = clamp( i, 0.0, 14.0 );\r\n    vec3 colour = vec3( 22.0 + i*( 79.0-22.0)/15.0,\r\n                        22.0 + i*( 74.0-22.0)/15.0,\r\n                        46.0 + i*(129.0-46.0)/15.0 );\r\n    colour = floor( colour+0.5 ) / 255.0; //Convert from \"standard\" 8-bit range to fraction\r\n    return colour;\r\n}\r\n\r\nfloat glowLineValue( float position, float line, float r1, float r2 )\r\n{\r\n    float num = abs( position + 8.0 - line );\r\n    if ( position < line )\r\n    {\r\n        return r1 - clamp( num, 0.0, r1 );\r\n    }\r\n    else\r\n    {\r\n        return r2 - clamp( num, 0.0, r2 );\r\n    }\r\n}\r\n\r\nfloat crazyRandomisationFunction( vec2 position )\r\n{\r\n    return (mod( position.x+position.y+1.0,  7.0 )\r\n          + mod( position.x*position.y+1.0, 11.0 )) / 20.0;\r\n}\r\n\r\nvoid main()\r\n{\r\n    vec2 pixelCoord = floor( (v_vPosition-2.0)/4.0 );\r\n    vec2 gridCoord = floor( pixelCoord/4.0 );\r\n    vec2 pixelRoundedCoord = gridCoord * 4.0;\r\n    \r\n    float glowR = 100.0;\r\n    float glowR1 = glowR * 2.50;\r\n    float glowR2 = glowR * 0.75;\r\n    \r\n    float glowAlpha = max( glowLineValue( v_vPosition.x, u_vGlowLine.x, glowR*2.50, glowR*0.75 ),\r\n                           glowLineValue( v_vPosition.y, u_vGlowLine.y, glowR*2.50, glowR*0.75 ) );\r\n    \r\n    if (glowAlpha > 0.0)\r\n    {\r\n        if ((v_vPosition.x < u_vGlowLine.x) || (v_vPosition.y < u_vGlowLine.y))\r\n        {\r\n            glowAlpha *= 0.75/(glowR*2.50);\r\n        }\r\n        else\r\n        {\r\n            glowAlpha *= 0.75/(glowR*0.75);\r\n        }\r\n    }\r\n    \r\n    float glowValue = 0.0;\r\n    float posValue = (u_vView.x + 3.0*(u_vView.y+1000.0))/200.0 + 1.0;\r\n    float tileValue = crazyRandomisationFunction( pixelRoundedCoord );\r\n    \r\n    // float num = ((v_vPosition.y - u_vView.y)/16.0)/13.0;\r\n    float num = ((v_vPosition.y - u_vView.y)/48.0)/13.0; //Increase gradient height in menus\r\n\t\r\n    float gradient = 1.0 - clamp( 1.5*num, (1.0-0.6), 1.0 ); //Need to multiply num by 1.5 for some reason\r\n    \r\n    glowValue = 2.0*gradient * (-0.5 + sin( tileValue * (u_fGlowTimer+1000.0)/60.0 + posValue ));\r\n    \r\n    // if ( u_fGlowTimer < (180.0-30.0) ) glowValue *= clamp( (u_fGlowTimer - (120.0-30.0)) / 60.0, 0.0, 1.0 ); //Fade in at the beginning of the stage\r\n    if ( u_fGlowTimer < (240.0-30.0) ) glowValue *= clamp( (u_fGlowTimer - (120.0-30.0)) / 120.0, 0.0, 1.0 ); //Fade in at the beginning of the stage slower\r\n    \r\n    float glowIndex = 15.0*(clamp( glowValue, 0.0, 9.0 ) + glowAlpha);\r\n    \r\n    vec2 pixelRelativeToGrid = pixelCoord - pixelRoundedCoord;\r\n    if ((pixelRelativeToGrid.x == 3.0) || (pixelRelativeToGrid.y == 3.0))\r\n    {\r\n        //Remove pixels around the edge of the grid cells to create the illusion of 3x3 sprites\r\n        gl_FragColor = vec4(0.0);\r\n    }\r\n    else\r\n    {\r\n        gl_FragColor = vec4( getColour(glowIndex), 1.0 );\r\n    }\r\n}\r\n\r\n//       R   G   B\r\n//  0   22, 22,  46\r\n//  1   26, 25,  51\r\n//  2   30, 29,  56\r\n//  3   33, 32,  61\r\n//  4   37, 36,  66\r\n//  5   41, 39,  71\r\n//  6   45, 43,  76\r\n//  7   49, 46,  81\r\n//  8   52, 50,  85\r\n//  9   56, 53,  90\r\n// 10   60, 57,  95\r\n// 11   64, 60, 100\r\n// Then a weird jump here... probably a missing sprite\r\n// 13   71, 67, 110\r\n// 14   75, 71, 115\r\n// 15   79, 74, 120\r\n//\r\n// R = 22 + floor(0.5 + i( 79-22)/15)\r\n// G = 22 + floor(0.5 + i( 74-22)/15)\r\n// B = 46 + floor(0.5 + i(120-46)/15)\r\n","#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n#define\tMATRIX_VIEW \t\t\t\t\t0\r\n#define\tMATRIX_PROJECTION \t\t\t\t1\r\n#define\tMATRIX_WORLD \t\t\t\t\t2\r\n#define\tMATRIX_WORLD_VIEW \t\t\t\t3\r\n#define\tMATRIX_WORLD_VIEW_PROJECTION \t4\r\n#define\tMATRICES_MAX\t\t\t\t\t5\r\n\r\nuniform mat4 gm_Matrices[MATRICES_MAX]; \r\n\r\nuniform bool gm_LightingEnabled;\r\nuniform bool gm_VS_FogEnabled;\r\nuniform float gm_FogStart;\r\nuniform float gm_RcpFogRange;\r\n\r\n#define MAX_VS_LIGHTS\t8\r\n#define MIRROR_WIN32_LIGHTING_EQUATION\r\n\r\n\r\n//#define\tMAX_VS_LIGHTS\t\t\t\t\t8\r\nuniform vec4   gm_AmbientColour;\t\t\t\t\t\t\t// rgb=colour, a=1\r\nuniform vec4   gm_Lights_Direction[MAX_VS_LIGHTS];\t\t// normalised direction\r\nuniform vec4   gm_Lights_PosRange[MAX_VS_LIGHTS];\t\t\t// X,Y,Z position,  W range\r\nuniform vec4   gm_Lights_Colour[MAX_VS_LIGHTS];\t\t\t// rgb=colour, a=1\r\n\r\nfloat CalcFogFactor(vec4 pos)\r\n{\r\n\tif (gm_VS_FogEnabled)\r\n\t{\r\n\t\tvec4 viewpos = gm_Matrices[MATRIX_WORLD_VIEW] * pos;\r\n\t\tfloat fogfactor = ((viewpos.z - gm_FogStart) * gm_RcpFogRange);\r\n\t\treturn fogfactor;\r\n\t}\r\n\telse\r\n\t{\r\n\t\treturn 0.0;\r\n\t}\r\n}\r\n\r\nvec4 DoDirLight(vec3 ws_normal, vec4 dir, vec4 diffusecol)\r\n{\r\n\tfloat dotresult = dot(ws_normal, dir.xyz);\r\n\tdotresult = max(0.0, dotresult);\r\n\r\n\treturn dotresult * diffusecol;\r\n}\r\n\r\nvec4 DoPointLight(vec3 ws_pos, vec3 ws_normal, vec4 posrange, vec4 diffusecol)\r\n{\r\n\tvec3 diffvec = ws_pos - posrange.xyz;\r\n\tfloat veclen = length(diffvec);\r\n\tdiffvec /= veclen;\t// normalise\r\n#ifdef MIRROR_WIN32_LIGHTING_EQUATION\r\n\t// This is based on the Win32 D3D and OpenGL falloff model, where:\r\n\t// Attenuation = 1.0f / (factor0 + (d * factor1) + (d*d * factor2))\r\n\t// For some reason, factor0 is set to 0.0f while factor1 is set to 1.0f/lightrange (on both D3D and OpenGL)\r\n\t// This'll result in no visible falloff as 1.0f / (d / lightrange) will always be larger than 1.0f (if the vertex is within range)\r\n\tfloat atten = 1.0 / (veclen / posrange.w);\r\n\tif (veclen > posrange.w)\r\n\t{\r\n\t\tatten = 0.0;\r\n\t}\r\n#else\r\n\tfloat atten = clamp( (1.0 - (veclen / posrange.w)), 0.0, 1.0);\t\t// storing 1.0f/range instead would save a rcp\r\n#endif\r\n\tfloat dotresult = dot(ws_normal, diffvec);\r\n\tdotresult = max(0.0, dotresult);\r\n\r\n\treturn dotresult * atten * diffusecol;\r\n}\r\n\r\nvec4 DoLighting(vec4 vertexcolour, vec4 objectspacepos, vec3 objectspacenormal)\r\n{\r\n\tif (gm_LightingEnabled)\r\n\t{\r\n\t\t// Normally we'd have the light positions\\\\directions back-transformed from world to object space\r\n\t\t// But to keep things simple for the moment we'll just transform the normal to world space\r\n\t\tvec4 objectspacenormal4 = vec4(objectspacenormal, 0.0);\r\n\t\tvec3 ws_normal;\r\n\t\tws_normal = (gm_Matrices[MATRIX_WORLD_VIEW] * objectspacenormal4).xyz;\r\n\t\tws_normal = -normalize(ws_normal);\r\n\r\n\t\tvec3 ws_pos;\r\n\t\tws_pos = (gm_Matrices[MATRIX_WORLD] * objectspacepos).xyz;\r\n\r\n\t\t// Accumulate lighting from different light types\r\n\t\tvec4 accumcol = vec4(0.0, 0.0, 0.0, 0.0);\t\t\r\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\r\n\t\t{\r\n\t\t\taccumcol += DoDirLight(ws_normal, gm_Lights_Direction[i], gm_Lights_Colour[i]);\r\n\t\t}\r\n\r\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\r\n\t\t{\r\n\t\t\taccumcol += DoPointLight(ws_pos, ws_normal, gm_Lights_PosRange[i], gm_Lights_Colour[i]);\r\n\t\t}\r\n\r\n\t\taccumcol *= vertexcolour;\r\n\t\taccumcol += gm_AmbientColour;\r\n\t\taccumcol = min(vec4(1.0, 1.0, 1.0, 1.0), accumcol);\r\n\t\taccumcol.a = vertexcolour.a;\r\n\t\treturn accumcol;\r\n\t}\r\n\telse\r\n\t{\r\n\t\treturn vertexcolour;\r\n\t}\r\n}\r\n\r\n#define _YY_GLSL_ 1\nattribute vec3 in_Position;\r\nattribute vec4 in_Colour;\r\n\r\nvarying vec2 v_vPosition;\r\nvoid main()\r\n{\r\n    gl_Position = gm_Matrices[MATRIX_WORLD_VIEW_PROJECTION] * vec4(in_Position.xyz, 1.0);\r\n    \r\n    v_vPosition = in_Position.xy;\r\n}\r\n","#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\r\n\r\nuniform sampler2D gm_BaseTexture;\r\n\r\nuniform bool gm_PS_FogEnabled;\r\nuniform vec4 gm_FogColour;\r\nuniform bool gm_AlphaTestEnabled;\r\nuniform float gm_AlphaRefValue;\r\n\r\nvoid DoAlphaTest(vec4 SrcColour)\r\n{\r\n\tif (gm_AlphaTestEnabled)\r\n\t{\r\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\r\n\t\t{\r\n\t\t\tdiscard;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid DoFog(inout vec4 SrcColour, float fogval)\r\n{\r\n\tif (gm_PS_FogEnabled)\r\n\t{\r\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \r\n\t}\r\n}\r\n\r\n#define _YY_GLSL_ 1\nvarying vec2 v_vPosition;\r\n\r\nuniform vec2  u_vGlowLine;\r\nuniform float u_fGlowTimer;\r\nuniform vec2  u_vView;\r\n\r\nvec3 getColour( float i )\r\n{\r\n    if ( i >= 12.0 ) i += 1.0; //Missing colour in source sprite at index 12\r\n    i = clamp( i, 0.0, 14.0 );\r\n    vec3 colour = vec3( 22.0 + i*( 79.0-22.0)/15.0,\r\n                        22.0 + i*( 74.0-22.0)/15.0,\r\n                        46.0 + i*(129.0-46.0)/15.0 );\r\n    colour = floor( colour+0.5 ) / 255.0; //Convert from \"standard\" 8-bit range to fraction\r\n    return colour;\r\n}\r\n\r\nfloat glowLineValue( float position, float line, float r1, float r2 )\r\n{\r\n    float num = abs( position + 8.0 - line );\r\n    if ( position < line )\r\n    {\r\n        return r1 - clamp( num, 0.0, r1 );\r\n    }\r\n    else\r\n    {\r\n        return r2 - clamp( num, 0.0, r2 );\r\n    }\r\n}\r\n\r\nfloat crazyRandomisationFunction( vec2 position )\r\n{\r\n    return (mod( position.x+position.y+1.0,  7.0 )\r\n          + mod( position.x*position.y+1.0, 11.0 )) / 20.0;\r\n}\r\n\r\nvoid main()\r\n{\r\n    vec2 pixelCoord = floor( (v_vPosition-2.0)/4.0 );\r\n    vec2 gridCoord = floor( pixelCoord/4.0 );\r\n    vec2 pixelRoundedCoord = gridCoord * 4.0;\r\n    \r\n    float glowR = 100.0;\r\n    float glowR1 = glowR * 2.50;\r\n    float glowR2 = glowR * 0.75;\r\n    \r\n    float glowAlpha = max( glowLineValue( v_vPosition.x, u_vGlowLine.x, glowR*2.50, glowR*0.75 ),\r\n                           glowLineValue( v_vPosition.y, u_vGlowLine.y, glowR*2.50, glowR*0.75 ) );\r\n    \r\n    if (glowAlpha > 0.0)\r\n    {\r\n        if ((v_vPosition.x < u_vGlowLine.x) || (v_vPosition.y < u_vGlowLine.y))\r\n        {\r\n            glowAlpha *= 0.75/(glowR*2.50);\r\n        }\r\n        else\r\n        {\r\n            glowAlpha *= 0.75/(glowR*0.75);\r\n        }\r\n    }\r\n    \r\n    float glowValue = 0.0;\r\n    float posValue = (u_vView.x + 3.0*(u_vView.y+1000.0))/200.0 + 1.0;\r\n    float tileValue = crazyRandomisationFunction( pixelRoundedCoord );\r\n    \r\n    // float num = ((v_vPosition.y - u_vView.y)/16.0)/13.0;\r\n    float num = ((v_vPosition.y - u_vView.y)/48.0)/13.0; //Increase gradient height in menus\r\n\t\r\n    float gradient = 1.0 - clamp( 1.5*num, (1.0-0.6), 1.0 ); //Need to multiply num by 1.5 for some reason\r\n    \r\n    glowValue = 2.0*gradient * (-0.5 + sin( tileValue * (u_fGlowTimer+1000.0)/60.0 + posValue ));\r\n    \r\n    // if ( u_fGlowTimer < (180.0-30.0) ) glowValue *= clamp( (u_fGlowTimer - (120.0-30.0)) / 60.0, 0.0, 1.0 ); //Fade in at the beginning of the stage\r\n    if ( u_fGlowTimer < (240.0-30.0) ) glowValue *= clamp( (u_fGlowTimer - (120.0-30.0)) / 120.0, 0.0, 1.0 ); //Fade in at the beginning of the stage slower\r\n    \r\n    float glowIndex = 15.0*(clamp( glowValue, 0.0, 9.0 ) + glowAlpha);\r\n    \r\n    vec2 pixelRelativeToGrid = pixelCoord - pixelRoundedCoord;\r\n    if ((pixelRelativeToGrid.x == 3.0) || (pixelRelativeToGrid.y == 3.0))\r\n    {\r\n        //Remove pixels around the edge of the grid cells to create the illusion of 3x3 sprites\r\n        gl_FragColor = vec4(0.0);\r\n    }\r\n    else\r\n    {\r\n        gl_FragColor = vec4( getColour(glowIndex), 1.0 );\r\n    }\r\n}\r\n\r\n//       R   G   B\r\n//  0   22, 22,  46\r\n//  1   26, 25,  51\r\n//  2   30, 29,  56\r\n//  3   33, 32,  61\r\n//  4   37, 36,  66\r\n//  5   41, 39,  71\r\n//  6   45, 43,  76\r\n//  7   49, 46,  81\r\n//  8   52, 50,  85\r\n//  9   56, 53,  90\r\n// 10   60, 57,  95\r\n// 11   64, 60, 100\r\n// Then a weird jump here... probably a missing sprite\r\n// 13   71, 67, 110\r\n// 14   75, 71, 115\r\n// 15   79, 74, 120\r\n//\r\n// R = 22 + floor(0.5 + i( 79-22)/15)\r\n// G = 22 + floor(0.5 + i( 74-22)/15)\r\n// B = 46 + floor(0.5 + i(120-46)/15)\r\n","shd_tut_bg_new","precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\r\n\r\nuniform sampler2D gm_BaseTexture;\r\n\r\nuniform bool gm_PS_FogEnabled;\r\nuniform vec4 gm_FogColour;\r\nuniform bool gm_AlphaTestEnabled;\r\nuniform float gm_AlphaRefValue;\r\n\r\nvoid DoAlphaTest(vec4 SrcColour)\r\n{\r\n\tif (gm_AlphaTestEnabled)\r\n\t{\r\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\r\n\t\t{\r\n\t\t\tdiscard;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid DoFog(inout vec4 SrcColour, float fogval)\r\n{\r\n\tif (gm_PS_FogEnabled)\r\n\t{\r\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \r\n\t}\r\n}\r\n\r\n#define _YY_GLSLES_ 1\nprecision highp float;\r\n\r\nvarying vec2 v_vPosition;\r\n\r\nuniform vec2  u_vGlowLine;\r\nuniform float u_fGlowTimer;\r\nuniform vec2  u_vView;\r\n\r\nvec3 getColour( float i )\r\n{\r\n    if ( i >= 12.0 ) i += 1.0; //Missing colour in source sprite at index 12\r\n    i = clamp( i, 0.0, 14.0 );\r\n    vec3 colour = vec3( 22.0 + i*( 79.0-22.0)/15.0,\r\n                        22.0 + i*( 74.0-22.0)/15.0,\r\n                        46.0 + i*(129.0-46.0)/15.0 );\r\n    colour = floor( colour+0.5 ) / 255.0; //Convert from \"standard\" 8-bit range to fraction\r\n    return colour;\r\n}\r\n\r\nfloat glowLineValue( float position, float line, float r1, float r2 )\r\n{\r\n    float num = abs( position + 8.0 - line );\r\n    if ( position < line )\r\n    {\r\n        return r1 - clamp( num, 0.0, r1 );\r\n    }\r\n    else\r\n    {\r\n        return r2 - clamp( num, 0.0, r2 );\r\n    }\r\n}\r\n\r\nfloat crazyRandomisationFunction( vec2 position )\r\n{\r\n    return (mod( position.x+position.y+1.0,  7.0 )\r\n          + mod( position.x*position.y+1.0, 11.0 )) / 20.0;\r\n}\r\n\r\nvoid main()\r\n{\r\n    vec2 pixelCoord = floor( (v_vPosition-2.0)/4.0 );\r\n    vec2 gridCoord = floor( pixelCoord/4.0 );\r\n    vec2 pixelRoundedCoord = gridCoord * 4.0;\r\n    \r\n    float glowR = 100.0;\r\n    float glowR1 = glowR * 2.50;\r\n    float glowR2 = glowR * 0.75;\r\n    \r\n    float glowAlpha = max( glowLineValue( v_vPosition.x, u_vGlowLine.x, glowR*2.50, glowR*0.75 ),\r\n                           glowLineValue( v_vPosition.y, u_vGlowLine.y, glowR*2.50, glowR*0.75 ) );\r\n    \r\n    if (glowAlpha > 0.0)\r\n    {\r\n        if ((v_vPosition.x < u_vGlowLine.x) || (v_vPosition.y < u_vGlowLine.y))\r\n        {\r\n            glowAlpha *= 0.75/(glowR*2.50);\r\n        }\r\n        else\r\n        {\r\n            glowAlpha *= 0.75/(glowR*0.75);\r\n        }\r\n    }\r\n    \r\n    float glowValue = 0.0;\r\n    float posValue = (u_vView.x + 3.0*(u_vView.y+1000.0))/200.0 + 1.0;\r\n    float tileValue = crazyRandomisationFunction( pixelRoundedCoord );\r\n    \r\n    float num = ((v_vPosition.y - u_vView.y)/36.0)/13.0;\r\n    float gradient = 1.0 - clamp( 1.5*num, (1.0-0.6), 1.0 ); //Need to multiply num by 1.5 for some reason\r\n    \r\n    glowValue = 2.0*gradient * (-0.5 + sin( tileValue * (u_fGlowTimer+1000.0)/60.0 + posValue ));\r\n    \r\n    // if ( u_fGlowTimer < (180.0-30.0) ) glowValue *= clamp( (u_fGlowTimer - (120.0-30.0)) / 60.0, 0.0, 1.0 ); //Fade in at the beginning of the stage\r\n    if ( u_fGlowTimer < (300.0-0.0) ) glowValue *= clamp( (u_fGlowTimer - (120.0-0.0)) / 180.0, 0.0, 1.0 ); //Fade in at the beginning of the stage slower\r\n    \r\n    float glowIndex = 15.0*(clamp( glowValue, 0.0, 9.0 ) + glowAlpha);\r\n    \r\n    vec2 pixelRelativeToGrid = pixelCoord - pixelRoundedCoord;\r\n    if ((pixelRelativeToGrid.x == 3.0) || (pixelRelativeToGrid.y == 3.0))\r\n    {\r\n        //Remove pixels around the edge of the grid cells to create the illusion of 3x3 sprites\r\n        gl_FragColor = vec4(0.0);\r\n    }\r\n    else\r\n    {\r\n        gl_FragColor = vec4( getColour(glowIndex), 1.0 );\r\n    }\r\n}\r\n\r\n//       R   G   B\r\n//  0   22, 22,  46\r\n//  1   26, 25,  51\r\n//  2   30, 29,  56\r\n//  3   33, 32,  61\r\n//  4   37, 36,  66\r\n//  5   41, 39,  71\r\n//  6   45, 43,  76\r\n//  7   49, 46,  81\r\n//  8   52, 50,  85\r\n//  9   56, 53,  90\r\n// 10   60, 57,  95\r\n// 11   64, 60, 100\r\n// Then a weird jump here... probably a missing sprite\r\n// 13   71, 67, 110\r\n// 14   75, 71, 115\r\n// 15   79, 74, 120\r\n//\r\n// R = 22 + floor(0.5 + i( 79-22)/15)\r\n// G = 22 + floor(0.5 + i( 74-22)/15)\r\n// B = 46 + floor(0.5 + i(120-46)/15)\r\n","#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\r\n\r\nuniform sampler2D gm_BaseTexture;\r\n\r\nuniform bool gm_PS_FogEnabled;\r\nuniform vec4 gm_FogColour;\r\nuniform bool gm_AlphaTestEnabled;\r\nuniform float gm_AlphaRefValue;\r\n\r\nvoid DoAlphaTest(vec4 SrcColour)\r\n{\r\n\tif (gm_AlphaTestEnabled)\r\n\t{\r\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\r\n\t\t{\r\n\t\t\tdiscard;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid DoFog(inout vec4 SrcColour, float fogval)\r\n{\r\n\tif (gm_PS_FogEnabled)\r\n\t{\r\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \r\n\t}\r\n}\r\n\r\n#define _YY_GLSL_ 1\nprecision highp float;\r\n\r\nvarying vec2 v_vPosition;\r\n\r\nuniform vec2  u_vGlowLine;\r\nuniform float u_fGlowTimer;\r\nuniform vec2  u_vView;\r\n\r\nvec3 getColour( float i )\r\n{\r\n    if ( i >= 12.0 ) i += 1.0; //Missing colour in source sprite at index 12\r\n    i = clamp( i, 0.0, 14.0 );\r\n    vec3 colour = vec3( 22.0 + i*( 79.0-22.0)/15.0,\r\n                        22.0 + i*( 74.0-22.0)/15.0,\r\n                        46.0 + i*(129.0-46.0)/15.0 );\r\n    colour = floor( colour+0.5 ) / 255.0; //Convert from \"standard\" 8-bit range to fraction\r\n    return colour;\r\n}\r\n\r\nfloat glowLineValue( float position, float line, float r1, float r2 )\r\n{\r\n    float num = abs( position + 8.0 - line );\r\n    if ( position < line )\r\n    {\r\n        return r1 - clamp( num, 0.0, r1 );\r\n    }\r\n    else\r\n    {\r\n        return r2 - clamp( num, 0.0, r2 );\r\n    }\r\n}\r\n\r\nfloat crazyRandomisationFunction( vec2 position )\r\n{\r\n    return (mod( position.x+position.y+1.0,  7.0 )\r\n          + mod( position.x*position.y+1.0, 11.0 )) / 20.0;\r\n}\r\n\r\nvoid main()\r\n{\r\n    vec2 pixelCoord = floor( (v_vPosition-2.0)/4.0 );\r\n    vec2 gridCoord = floor( pixelCoord/4.0 );\r\n    vec2 pixelRoundedCoord = gridCoord * 4.0;\r\n    \r\n    float glowR = 100.0;\r\n    float glowR1 = glowR * 2.50;\r\n    float glowR2 = glowR * 0.75;\r\n    \r\n    float glowAlpha = max( glowLineValue( v_vPosition.x, u_vGlowLine.x, glowR*2.50, glowR*0.75 ),\r\n                           glowLineValue( v_vPosition.y, u_vGlowLine.y, glowR*2.50, glowR*0.75 ) );\r\n    \r\n    if (glowAlpha > 0.0)\r\n    {\r\n        if ((v_vPosition.x < u_vGlowLine.x) || (v_vPosition.y < u_vGlowLine.y))\r\n        {\r\n            glowAlpha *= 0.75/(glowR*2.50);\r\n        }\r\n        else\r\n        {\r\n            glowAlpha *= 0.75/(glowR*0.75);\r\n        }\r\n    }\r\n    \r\n    float glowValue = 0.0;\r\n    float posValue = (u_vView.x + 3.0*(u_vView.y+1000.0))/200.0 + 1.0;\r\n    float tileValue = crazyRandomisationFunction( pixelRoundedCoord );\r\n    \r\n    float num = ((v_vPosition.y - u_vView.y)/36.0)/13.0;\r\n    float gradient = 1.0 - clamp( 1.5*num, (1.0-0.6), 1.0 ); //Need to multiply num by 1.5 for some reason\r\n    \r\n    glowValue = 2.0*gradient * (-0.5 + sin( tileValue * (u_fGlowTimer+1000.0)/60.0 + posValue ));\r\n    \r\n    // if ( u_fGlowTimer < (180.0-30.0) ) glowValue *= clamp( (u_fGlowTimer - (120.0-30.0)) / 60.0, 0.0, 1.0 ); //Fade in at the beginning of the stage\r\n    if ( u_fGlowTimer < (300.0-0.0) ) glowValue *= clamp( (u_fGlowTimer - (120.0-0.0)) / 180.0, 0.0, 1.0 ); //Fade in at the beginning of the stage slower\r\n    \r\n    float glowIndex = 15.0*(clamp( glowValue, 0.0, 9.0 ) + glowAlpha);\r\n    \r\n    vec2 pixelRelativeToGrid = pixelCoord - pixelRoundedCoord;\r\n    if ((pixelRelativeToGrid.x == 3.0) || (pixelRelativeToGrid.y == 3.0))\r\n    {\r\n        //Remove pixels around the edge of the grid cells to create the illusion of 3x3 sprites\r\n        gl_FragColor = vec4(0.0);\r\n    }\r\n    else\r\n    {\r\n        gl_FragColor = vec4( getColour(glowIndex), 1.0 );\r\n    }\r\n}\r\n\r\n//       R   G   B\r\n//  0   22, 22,  46\r\n//  1   26, 25,  51\r\n//  2   30, 29,  56\r\n//  3   33, 32,  61\r\n//  4   37, 36,  66\r\n//  5   41, 39,  71\r\n//  6   45, 43,  76\r\n//  7   49, 46,  81\r\n//  8   52, 50,  85\r\n//  9   56, 53,  90\r\n// 10   60, 57,  95\r\n// 11   64, 60, 100\r\n// Then a weird jump here... probably a missing sprite\r\n// 13   71, 67, 110\r\n// 14   75, 71, 115\r\n// 15   79, 74, 120\r\n//\r\n// R = 22 + floor(0.5 + i( 79-22)/15)\r\n// G = 22 + floor(0.5 + i( 74-22)/15)\r\n// B = 46 + floor(0.5 + i(120-46)/15)\r\n","medFont","roa_s_bold_loc5","fName","roa_tiny_loc13","roundFont","roa_med_round_loc2","roaMBLFont","roa_m_bold_loc18","roaLBLFont","roa_l_bold_loc7","tinyFont","cc.yal.5w3.block","gameplay_parent","gameplay_player","grabbable_obj","oPlayer","oTestPlayer","pHurtBox","pHitBox","plant_obj","mark_leaf_obj","pillar_obj","rock_obj","bubble_obj","big_bubble_obj","puddle_obj","smoke_obj","wind_obj","cloud_obj","pBurnBox","ice_obj","orb_obj","orb_follower_obj","tongue_obj","frog_bubble_obj","frog_small_bubble_obj","plasma_field_obj","wolf_bud_obj","wolf_vine_ball_obj","wolf_grass_obj","wolf_bair_vine_obj","platform_blocker","wolf_ftilt_petal","steam_bubble_obj","steam_pusher_obj","steam_bomb_obj","steam_mech_obj","steam_strong_explosion","steam_claw_obj","gus_gem","gus_anchor_obj","treasure_rock_obj","mobile_gear_obj","gus_rock_obj","shield_knight_obj","chester_obj","exclamation_obj","moneybag_obj","gus_gem_num_obj","falling_cactus_obj","decoy_cactus_obj","penguin_ball_obj","seasonal_obj","clairen_pong_ball_obj","ori_checkpoint_obj","kragg_statue_obj","obj_article1","obj_article2","obj_article3","obj_article_parent","obj_article_solid","obj_article_platform","cloud_platform_obj","menu_bg_anim_spr","draw_tut_stage_bgs","draw_sfront_bgs","poison_bg_anim","plasma_bg_anim","grass_bg_anim","grass_plat_obj","steam_bg_anim","steam_plat1_obj","steam_plat2_obj","steam_box_obj","firebg_anim_spr","draw_ships_obj","draw_clouds_fg","draw_clouds_fg2","air_trigger_obj","air_spring_obj","air_platform_obj","air_ground_clean_obj","air_speed_lines_obj","air_ground_obj","air_flag_obj","tiny_ship_obj","small_ship_obj","water_grnd_obj","water_wheel_plat_obj","stationary_water_plat_obj","water_wheel_obj","water_pipe_obj","water_bird_obj","draw_water_bg","draw_water_fg","CEO_crowd_anim_spr","waterfall_anim_spr","rockwall_rock_piece_obj","rock_wall_pillar_obj","rockwall_support_obj","tree_wisps_obj","tree_plant_obj","tree_sign_obj","tree_level_bgs","draw_smoke_bgs","draw_smoke_fgs","rising_fire_obj","draw_ice_bgs","draw_ice_fgs","ice_wall_obj","draw_mount_bgs","draw_mount_stage","draw_mount_fgs","draw_mount_fgs2","mount_plat_obj","yellow_32_obj","draw_holy_bgs","draw_holy_fgs","draw_holy_fgs2","holy_law_obj","holy_lightning_obj","holy_guy_obj","holy_plant_obj","holy_bug_obj","abyss_hazards_obj","abyss_platform_obj","abyss_platform_scrolling_obj","abyss_portal_obj","draw_abyss_bgs","draw_abyss_fgs","target_obj","abyss_seed_obj","abyss_bomb_obj","abyss_root_obj","abyss_pinata_obj","abyss_orb_obj","abyss_capture_point_obj","abyss_mine_obj","abyss_cpu_explode_obj","abyss_blob_obj","draw_fog_bg","gumo_plat_obj","ori_safezone_obj","guss_plat_obj","draw_guss_bg","troupple_king_obj","troupple_fish_obj","draw_gusto_bg","draw_cavern_bgs","cavern_platform_obj","death_block_obj","dust_fx_obj","new_dust_fx_obj","promo_flag_obj","promo_sword_obj","promo_shard_obj","promo_cape_obj","hit_fx_obj","pet_obj","hit_fx_white_obj","stage_explosion_obj","jumpthrough_32_obj","left_block_obj","camera_obj","HUD","mainMenu_obj","localVersus_obj","titleMenu_obj","conveyor_belt","follow_all_players_obj_old","coinportal_bg_obj","coinportal_fg_obj","coin_spin_obj","mm_coin_spin_obj","cs_playerbg_obj","cs_playercursor_obj","cs_custombox_obj","cs_charbox_obj","cs_random_box","cs_changeplayer_but","cs_changeteam_but","cs_team_but","cs_teamattack_but","cs_back_but","cs_tapjump_but","cs_stick_but","header_obj","topbar_obj","middlebar_obj","bottombar_obj","paxcontrols_obj","cs_profcomp_but","cs_optionsmall_but","cs_profilename_but","cs_custcont_but","cs_set_all_but","cs_profilenum_but","cs_info_page_but","cs_custombuttons_but","cs_contup_but","cs_button_par","cs_info_but","cs_info_close_but","cs_options_but","cs_chat_but","cs_profile_but","cs_add_player_but","cs_icon_but","cs_pet_but","cs_petselect_but","cs_iconselect_but","cs_rune_but","cs_runeconfirm_but","cs_runeequip_but","cs_runesmall_but","rune_legend_but","cs_stockdown_but","cs_stockup_but","cs_timedown_but","cs_timeup_but","cs_cpu_lvl_up_but","cs_cpu_lvl_down_but","cs_stockbar_obj","cs_random_but","cs_gamepad_prof_but","cs_music_but","obj_casual_filter","ss_stage_header_obj","ss_music_but","ss_back_but","ss_cursor_obj","ss_hazard_but","ss_dlc_but","ss_stagebox_obj","net_ready_but","devmode_but","abyss_mode_but","turbomode_but","moneymatch_but","invrand_but","sendstock_but","online_changeplayer_but","NetworkManager","onlineVersus_obj","cs_net_button","cs_found_but","cs_spectate_but","boss_eye_obj","boss_manhole_obj","draw_boss_fgs","draw_boss_bgs","boss_black_hole_obj","boss_credits_obj","boss_platform_obj","abyss_popup_obj","draw_game_over","draw_story_map","cutscene_obj","story_battle_intro_obj","boss_select_obj","chapter_results_object","par_block","par_jumpthrough","par_unit","pers_obj","obj_pause","smoke_sur_parent","result_screen_box","draw_result_screen","right_block_obj","smoke_bg_surface","smoke_fg_surface","dust_bg_surface","dust_fg_surface","char_system_draw","fg_system_draw","solid_32_obj","stage_HUD","draw_tut_bgs","draw_tut_fgs","tut_guide_obj","tut_path_node","tut_diagram_obj","tut_spikes_obj","tut_checkpoint_obj","tut_adv_obj","tut_timed_block_obj","replay_back_but","replay_menu_obj","replay_playercursor_obj","replay_sort_but","replay_autosave_but","sound_menu_obj","milestones_obj","tall_block_obj","follow_all_players_obj","cc_back_but","cc_bottombar_obj","cc_bottomBlade_obj","cc_colorNumber_obj","cc_LB_obj","cc_RB_obj","cc_playercursor_obj","cc_revertBox_obj","cc_revertButton_obj","cc_saveBox_obj","cc_saveButton_obj","cc_sectionBar_obj","cc_yesBox_obj","cc_noBox_obj","cc_codeButton_obj","customColor_obj","custom_keyboard_obj","ck_action_but","ck_back_but","ck_defaultButton_obj","ck_noBox_obj","ck_playercursor_obj","ck_revertBox_obj","ck_revertButton_obj","popupBox_obj","popupBut_obj","popupTextEntry_obj","popup_region_but","popup_save_but","obj_draw_stagebackground","obj_global_controller_master","intentionally_blank_obj","cs_chat","cs_chat_scroll_but","cs_chat_mode_but","obj_workshop","obj_workshop_async","obj_gml_mod","ws_back_but","ws_load_but","ws_submit_but","ws_playercursor_obj","obj_stage_editor","obj_custom_stage","depth_of_ten","depth_of_five","sentry_handler","fps_graph_obj","switch_nex_obj","init_room","Compatibility_Instances_Depth_-1","Compatibility_Colour","logo_room","Compatibility_Instances_Depth_0","mainMenu_room","Compatibility_Instances_Depth_10","local_charselect_room","Compatibility_Instances_Depth_-6","Compatibility_Instances_Depth_-5","Compatibility_Instances_Depth_-2","Compatibility_Instances_Depth_5","Compatibility_Instances_Depth_6","Compatibility_Background_0","local_stage_select","Compatibility_Instances_Depth_-10","network_stage_select","network_stage_select_BAK","network_2v2_select","Compatibility_Instances_Depth_1","local_result_screen","online_result_screen","stage_tree_level","Compatibility_Instances_Depth_-20","Compatibility_Instances_Depth_-19","Compatibility_Instances_Depth_-8","Compatibility_Instances_Depth_100000","stage_tree_clean","stage_tree_large","stage_mount_level","Compatibility_Instances_Depth_-12","Compatibility_Instances_Depth_11","Compatibility_Instances_Depth_12","Compatibility_Instances_Depth_30","stage_mount_clean","stage_boss_level","stage_boss_clean","Compatibility_Instances_Depth_7","stage_boss","stage_ice_level","stage_ice_clean","stage_earth_level","Instances_1","stage_earth_clean","stage_earth_ring","stage_earth_ring_a","stage_water_level","Compatibility_Instances_Depth_8","Compatibility_Instances_Depth_16","Compatibility_Instances_Depth_1000000","stage_water_clean","stage_air_level","Compatibility_Instances_Depth_13","Compatibility_Instances_Depth_14","Compatibility_Instances_Depth_20","stage_air_clean","stage_holy_level","Compatibility_Instances_Depth_29","stage_holy_clean","stage_grid_clean","Tiles_1","stage_sfront_clean","stage_training_clean","stage_fire_level","stage_fire_clean","stage_smoke_clean","stage_smoke_level","Compatibility_Instances_Depth_-11","stage_abyss","stage_ori_level","stage_ori_clean","stage_gus_level","Compatibility_Instances_Depth_30_1","stage_gus_clean","stage_gusto_clean","stage_abyss_clean","stage_poison_clean","stage_plasma_clean","stage_grass_level","Compatibility_Tiles_Depth_1000000","stage_grass_clean","stage_grass_1v1","stage_steam_level","stage_steam_clean","stage_abyss_level","Compatibility_Instances_Depth_9","stage_abyss_clean_6plat","stage_custom_clean","stage_custom_temp","stage_cavern_clean","stage_credits","Compatibility_Instances_Depth_-30","Compatibility_Background_6_holy_clouds_fg","Compatibility_Background_5_holy_tower_ground_bg2","Compatibility_Background_4_holy_tower_gradient_bg","Compatibility_Background_3_holy_tower_color_bg","Compatibility_Background_2_holy_clouds_bg1","Compatibility_Background_1_holy_clouds_bg2","Compatibility_Background_0_holy_sky_bg","GamePlay","Launch","training_charselect_room","tourney_charselect_room","custom_color_menu","Compatibility_Instances_Depth_-7","workshop_room","level_editor_room","custom_keyboard_room","abyss_vs_charselect_room","abyss_charselect_room","replay_menu","gamepad_menu_room","sound_room","milestones_room","tut_beg_mov_room","Compatibility_Tiles_Depth_28","camera","tut_beg_def_room","Compatibility_Background_0_tut_bg","tut_beg_off_room","tut_int_mov_room","Compatibility_Tiles_Depth_27","tut_int_def_room","tut_int_off_room","tut_adv_mov_room","tut_adv_def_room","tut_adv_off_room","tut_zet_room","tut_orc_room","tut_wra_room","tut_krg_room","tut_for_room","tut_may_room","tut_abs_room","tut_eta_room","tut_ori_room","tut_ran_room","tut_cla_room","tut_syl_room","tut_ell_room","tut_gus_room","story_map_room","cutscene_room","story_battle_intro_room","boss_select_room","abyss_popup_room","game_over_room","chapter_results_room","network_char_select","loading_room","Instances","Background","X:\\bin\\ParticleImages\\pt_shape_circle.png","X:\\bin\\ParticleImages\\pt_shape_cloud.png","X:\\bin\\ParticleImages\\pt_shape_disk.png","X:\\bin\\ParticleImages\\pt_shape_explosion.png","X:\\bin\\ParticleImages\\pt_shape_flare.png","X:\\bin\\ParticleImages\\pt_shape_line.png","X:\\bin\\ParticleImages\\pt_shape_pixel.png","X:\\bin\\ParticleImages\\pt_shape_ring.png","X:\\bin\\ParticleImages\\pt_shape_smoke.png","X:\\bin\\ParticleImages\\pt_shape_snow.png","X:\\bin\\ParticleImages\\pt_shape_spark.png","X:\\bin\\ParticleImages\\pt_shape_sphere.png","X:\\bin\\ParticleImages\\pt_shape_square.png","X:\\bin\\ParticleImages\\pt_shape_star.png","Absa","AbyssStage","AirStage","BossStage","Buddies","CatStage","Cavern_Stage","Clairen","DeathExplosions","Debug","Default","EarthStage","Elliana","Etalus","FinalCannon","FireStage","Forsburn","Gameplay","GameplayKO","Gatekeepers","GatekeepersRocks","Global","GrassStage","Gus","GusStage","Gusto_Stage","HideoutStage","IceStage","Kragg","Masks","Maypul","MenuBG","MenuColors","MenuCSS","Menus","MenuStory","ObeliskCannon","Orcane","Ori","PlasmaStage","PoisonStage","Ragnir","Ranno","ResultBG","Results","RingStage","Sandbert","Sfront_Stage","SteamStage","StoryPanels","Sylvanos","ThunderStage","TitleScreen","TowerStage","TreeStage","Tutorial","Unused","WaterStage","Wrastor","Zetterburn"]